<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QWhale.Editor</name>
    </assembly>
    <members>
        <member name="T:QWhale.Editor.TextSource.ITabulation">
            <summary>
            Represents properties and methods for handling tabulations within the text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.ResetTabStops">
            <summary>
            When implemented by a class, resets the <c>ITabulation.TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.ResetUseSpaces">
            <summary>
            When implemented by a class, resets the <c>ITabulation.UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.GetTabString(System.String)">
            <summary>
            When implemented by a class, converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <returns>Tabbed string.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.GetTabString(System.String,QWhale.Syntax.ITextUndoList)">
            <summary>
            When implemented by a class, converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs)</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.GetTabStop(System.Int32)">
            <summary>
            When implemented by a class, returns number of spaces to the next TabStop at the specified position.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.GetPrevTabStop(System.Int32)">
            <summary>
            When implemented by a class, returns number of spaces to the previous TabStop.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.GetIndentString(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="pos">Specifies start position of the string.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.GetIndentString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="p">Specifies start position of the string.</param>
            <param name="useSpaces">Specifies that spaces should be used instead of tab characters.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.TabPosToPos(System.String,System.Int32)">
            <summary>
            When implemented by a class, returns specified position within given string as untabbed position.
            </summary>
            <param name="s">Specifies string to convert.</param>
            <param name="pos">Specifies index of character which position should be converted.</param>
            <returns>Untabbed position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.PosToTabPos(System.String,System.Int32)">
            <summary>
            When implemented by a class, returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Positon of the character in the string.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITabulation.PosToTabPos(System.String,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Positon of the character in the string.</param>
            <param name="tabEnd">reserwed for interna use.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITabulation.TabStops">
            <summary>
            When implemented by a class, gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITabulation.UseSpaces">
            <summary>
            When implemented by a class, gets or sets a value indicating whether indent or TAB operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.UndoList">
            <summary>
            Provides an indexed access to undo data.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IUndoList">
            <summary>
            Provides an indexed access to undo data.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndoList.Clear">
            <summary>
            When implemented by a class, clears entire collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndoList.Add(QWhale.Editor.TextSource.IUndoData)">
            <summary>
            When implemented by a class, adds an item to the collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndoList.RemoveAt(System.Int32)">
            <summary>
            When implemented by a class, removes item at the specified index.
            </summary>
            <param name="index">Specifies index of item to remove</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndoList.UndoCount">
            <summary>
            When implemented by a class, determines number of undo operations stored in the list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoList.BeginUpdate">
            <summary>
            Prevents undo list updating until calling <c>IUndoList.EndUpdate</c> method.
            </summary>
            <returns>Number of undo list updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoList.EndUpdate">
            <summary>
            Re-enables undo list updating, that was turn of by calling <c>IUndoList.BeginUpdate</c> method.
            </summary>
            <returns>Number of undo list updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoList.DisableUpdate">
            <summary>
            Prevents undo list updating until calling <c>IUndoList.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoList.EnableUpdate">
            <summary>
            Re-enables undo list updating, that was turn of by calling <c>IUndoList.BeginUpdate</c> method.
            </summary>
            <returns>Number of gutter updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoList.Update">
            <summary>
            Rescans the undo list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoList.Clear">
            <summary>
            Clears entire collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoList.Add(QWhale.Editor.TextSource.IUndoData)">
            <summary>
            Adds an item to the collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoList.RemoveAt(System.Int32)">
            <summary>
            Removes item at the specified index.
            </summary>
            <param name="index">Specifies index of item to remove</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.UndoList.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.UndoList.UndoCount">
            <summary>
            Determines number of undo operations stored in the list.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlPrintingInfo">
            <summary>
            Contains information about <c>IPrinting</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPrintingInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPrintingInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPrintingInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlPrintingInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPrintingInfo.#ctor(QWhale.Editor.IPrinting)">
            <summary>
            Initializes a new instance of the <c>XmlPrintingInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IPrinting</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPrintingInfo.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPrintingInfo.ShouldSerializeAllowedOptions">
            <summary>
            Indicates whether the <c>AllowedOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>AllowedOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPrintingInfo.Footer">
            <summary>
            Stores <c>IPrinting.Footer</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPrintingInfo.Header">
            <summary>
            Stores <c>IPrinting.Header</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPrintingInfo.Options">
            <summary>
            Stores <c>IPrinting.Options</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPrintingInfo.AllowedOptions">
            <summary>
            Stores <c>IPrinting.AllowedOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPrintingInfo.ShowPrintOptionsDialog">
            <summary>
            Stores <c>IPrinting.AllowedOptions</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Margin">
            <summary>
            Represents an appearance of the margin in Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IMargin">
            <summary>
            Represents properties and methods specifying appearance of the margin in Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.Assign(QWhale.Editor.IMargin)">
            <summary>
            When implemented by a class, copies the contents from another <c>IMargin</c> object.
            </summary>
            <param name="source">Specifies <c>IMargin</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IMargin.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws <c>IMargin</c> object on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>IMargin</c> to draw.</param>
        </member>
        <member name="M:QWhale.Editor.IMargin.PaintColumn(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws margin column on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:QWhale.Editor.IMargin.ResetPosition">
            <summary>
            When implemented by a class, resets the <c>Position</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.ResetColumnPositions">
            <summary>
            When implemented by a class, resets the <c>ColumnPositions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.ResetPenColor">
            <summary>
            When implemented by a class, resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.ResetVisible">
            <summary>
            When implemented by a class, resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.ResetColumnsPenColor">
            <summary>
            When implemented by a class, resets the <c>ColumnPenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.ResetColumnsVisible">
            <summary>
            When implemented by a class, resets the <c>ColumnsVisible</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.ResetAllowDrag">
            <summary>
            When implemented by a class, resets the <c>AllowDrag</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.ResetShowHints">
            <summary>
            When implemented by a class, resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging the margin.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMargin.Contains(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether <c>IMargin</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.IMargin.DragTo(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves <c>IMargin</c> to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="P:QWhale.Editor.IMargin.Position">
            <summary>
            When implemented by a class, gets or sets value indicating position, in characters, of the vertical line within the text portion of the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.ColumnPositions">
            <summary>
            When implemented by a class, gets or sets the character columns where additional column margin will be drawn.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.Pen">
            <summary>
            When implemented by a class, gets or sets Pen object that describes the color and pattern of <c>IMargin</c> line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.PenColor">
            <summary>
            When implemented by a class, gets or sets a color of the margin line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.ColumnPen">
            <summary>
            When implemented by a class, gets or sets Pen object that describes the color and pattern of column margin lines.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.ColumnPenColor">
            <summary>
            When implemented by a class, gets or sets a color of the column margin line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether vertical line should be painted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.ColumnsVisible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether column margins should be painted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.IsDragging">
            <summary>
            When implemented by a class, indicates whether <c>IMargin</c> is in dragging state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.AllowDrag">
            <summary>
            When implemented by a class,  indicates whether drag operation can performed to <c>IMargin</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.ShowHints">
            <summary>
            When implemented by a class, gets or sets a value indicating whether <c>IMargin</c> should display some hint when mouse pointer is over the margin area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMargin.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IMargin
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.#ctor">
            <summary>
            Initializes a new instance of the <c>Margin</c> with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Margin</c> with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.Margin.Finalize">
            <summary>
            Destroys the instance of the <c>Margin</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.ShouldSerializePosition">
            <summary>
            Indicates whether the <c>Position</c> property should be persisted.
            </summary>
            <returns>True if <c>Position</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.ShouldSerializeColumnPositions">
            <summary>
            Indicates whether the <c>ColumnPositions</c> property should be persisted.
            </summary>
            <returns>True if <c>ColumnPositions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.ShouldSerializeColumnPenColor">
            <summary>
            Indicates whether the <c>ColumnPenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ColumnPenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.BeginUpdate">
            <summary>
            Prevents Margin updating until calling <c>Margin.EndUpdate</c> method.
            </summary>
            <returns>Number of Margin updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>Margin.BeginUpdate</c> method.
            </summary>
            <returns>Number of Margin updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.DisableUpdate">
            <summary>
            Prevents Margin updating until calling <c>Margin.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.EnableUpdate">
            <summary>
            Re-enables Margin updating, that was turn of by calling <c>Margin.BeginUpdate</c> method.
            </summary>
            <returns>Number of Margin updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.Update(System.Boolean)">
            <summary>
            Invalidates editor if needed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.Update">
            <summary>
            Forces editor control to invalidate it's area.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.Assign(QWhale.Editor.IMargin)">
            <summary>
            Copies the contents from another <c>IMargin</c> object.
            </summary>
            <param name="source">Specifies <c>IMargin</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Margin.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws <c>Margin</c> object on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:QWhale.Editor.Margin.PaintColumn(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws margin column on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of <c>Margin</c> to draw.</param>
        </member>
        <member name="M:QWhale.Editor.Margin.ResetPosition">
            <summary>
            Resets the <c>Position</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.ResetColumnPositions">
            <summary>
            Resets the <c>Position</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.ResetPenColor">
            <summary>
            Resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.ResetColumnsPenColor">
            <summary>
            Resets the <c>ColumnPenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.ResetColumnsVisible">
            <summary>
            Resets the <c>ColumnsVisible</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.ResetAllowDrag">
            <summary>
            Resets the <c>AllowDrag</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.ResetShowHints">
            <summary>
            Resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.CancelDragging">
            <summary>
            Cancels dragging the margin.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Margin.Contains(System.Int32,System.Int32)">
            <summary>
            Indicates whether <c>Margin</c> area contains given position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the point to check-up.</param>
            <param name="y">The Y-constituent of the Point value that specifies the point to check-up.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Margin.DragTo(System.Int32,System.Int32)">
            <summary>
            Moves <c>Margin</c> to specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies position to drag.</param>
            <param name="y">The Y-constituent of the Point value that specifies position to drag.</param>
        </member>
        <member name="P:QWhale.Editor.Margin.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.Position">
            <summary>
            Gets or sets value indicating position, in characters, of the vertical line within the text portion of the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.ColumnPositions">
            <summary>
            Gets or sets the character columns where additional column margin will be drawn.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.Pen">
            <summary>
            Gets or sets Pen object that describes the color and pattern of <c>Margin</c> line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.PenColor">
            <summary>
            Gets or sets a color of the margin line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.ColumnPen">
            <summary>
            Gets or sets Pen object that describes the color and pattern of <c>Margin</c> line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.ColumnPenColor">
            <summary>
            Gets or sets a color of the column margin line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.Visible">
            <summary>
            Gets or sets a value indicating whether vertical line should be painted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.ColumnsVisible">
            <summary>
            Gets or sets a value indicating whether column margins should be painted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.IsDragging">
            <summary>
            Indicates whether <c>Margin</c> is in dragging state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.AllowDrag">
            <summary>
            Indicates whether drag operation can performed to <c>Margin</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.ShowHints">
            <summary>
            Gets or sets a value indicating whether <c>Margin</c> should display some hint when mouse pointer is over the margin area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Margin.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>Margin</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.KeyList">
            <summary>
            Represents list of key or its combinations with attached actions.
            </summary>
            <remarks>KeyList class is used to dinamically link key sequences with executing some actions within Edit control. You can use this class to customize reaction on pressing certain keys sequences in the Edit control.</remarks>
        </member>
        <member name="T:QWhale.Editor.IKeyList">
            <summary>
            Represents list of key or its combinations with attached actions.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IKeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.IKeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="state">State of the Edit control before key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.IKeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEventEx,System.Object)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:QWhale.Editor.IKeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified action.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.IKeyList.AddNormal(System.Windows.Forms.Keys,QWhale.Editor.KeyEventEx,System.Object)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:QWhale.Editor.IKeyList.AddNormal(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent)">
            <summary>
            When implemented by a class, adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keys">Key that added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.IKeyList.Remove(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            When implemented by a class, removes given key from the key collection.
            </summary>
            <param name="keys">Key to remove.</param>
            <param name="state">State of the Edit control when the key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.IKeyList.Remove(System.Windows.Forms.Keys)">
            <summary>
            When implemented by a class, removes given key from the key collection.
            </summary>
            <param name="keys">Key to remove.</param>
        </member>
        <member name="M:QWhale.Editor.IKeyList.Clear">
            <summary>
            When implemented by a class, removes all elements from the key list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IKeyList.ExecuteKey(System.Windows.Forms.Keys,System.Int32@)">
            <summary>
            When implemented by a class, executes action or extended action attached to the specified key.
            </summary>
            <param name="keys">Key for which action should be executed.</param>
            <param name="state">Receive leave state of specified action.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.IKeyList.FindKey(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            When implemented by a class, indicates whether given key locates within the collection.
            </summary>
            <param name="keys">Key to find.</param>
            <param name="state">State of the Edit control before the key is pressed.</param>
            <returns>True if the specified key exists; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.IKeyList.Handlers">
            <summary>
            When implemented by a class, represents an event handlers collection which contains elements that can be used as a particular action attached to key or key combination from the <c>IKeyList</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IKeyList.EventData">
            <summary>
            When implemented by a class, represents array of event handlers associated with keys
            </summary>
        </member>
        <member name="M:QWhale.Editor.KeyList.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>KeyList</c> class with specified owner.
            </summary>
            <param name="owner"><c>SyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent,QWhale.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="actionEx">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">State of the Edit control when key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent,System.Int32,System.Int32)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="state">State of the Edit control before key is pressed.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEventEx,System.Object)">
            <summary>
            Adds a new key to key collection with specified parameters.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.Add(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent)">
            <summary>
            Adds a new key to key collection with specified action.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.AddNormal(System.Windows.Forms.Keys,QWhale.Editor.KeyEventEx,System.Object)">
            <summary>
            Adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keys">Key added to the collection.</param>
            <param name="action">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.AddNormal(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent)">
            <summary>
            Adds a new key to key collection with specified parameters and default (normal) state and leave state.
            </summary>
            <param name="keys">Key that added to the collection.</param>
            <param name="action">Action that executes when the key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.Remove(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            Removes given key from the key collection.
            </summary>
            <param name="keys">Key to remove.</param>
            <param name="state">State of the Edit control when the key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.Remove(System.Windows.Forms.Keys)">
            <summary>
            Removes given key from the key collection.
            </summary>
            <param name="keys">Key to remove.</param>
        </member>
        <member name="M:QWhale.Editor.KeyList.Clear">
            <summary>
            Removes all elements from the key list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.KeyList.ExecuteKey(System.Windows.Forms.Keys,System.Int32@)">
            <summary>
            Executes action or extended action attached to the specified key.
            </summary>
            <param name="keys">Key for which action should be executed.</param>
            <param name="state">Receive leave state of specified action.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.KeyList.FindKey(System.Windows.Forms.Keys,System.Int32)">
            <summary>
            Indicates whether given key locates within the collection.
            </summary>
            <param name="keys">Key to find.</param>
            <param name="state">State of the Edit control before the key is pressed.</param>
            <returns>True if the specified key exists; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.KeyList.EventData">
            <summary>
            Represents array of event handlers associated with keys
            </summary>
        </member>
        <member name="P:QWhale.Editor.KeyList.Handlers">
            <summary>
            Represents an event handlers collection which contains elements that can be used as a particular action attached to key or key combination from the <c>KeyList</c>.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CodeCompletionWindow">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.ICodeCompletionWindow">
            <summary>
            Represents properties and methods to display a popup window containing Code Completion information.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.Popup">
            <summary>
            When implemented by a class, displays popup window at the current mouse position.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.PopupAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, displays popup window at the specified screen position.
            </summary>
            <param name="x">Horizontal coordinate at which popup window should be displayed.</param>
            <param name="y">Vertical coordinate at which popup window should be displayed.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.PopupAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, displays popup window at the specified screen position.
            </summary>
            <param name="position">The Point object that specifies the coordinates at which popup window should be displayed.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.Close(System.Boolean)">
            <summary>
            When implemented by a class, closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.CloseDelayed(System.Boolean)">
            <summary>
            When implemented by a class, closes the popup window with delay.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.IsFocused">
            <summary>
            When implemented by a class, indicates whether <c>ICodeCompletionWindow</c> or it's child control has an input focus.
            </summary>
            <returns>True if focused; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, responds on chaning position in the popup window.
            </summary>
            <param name="x">X-coordinate of current position.</param>
            <param name="y">Y-coordinate of current position.</param>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.EnsureVisible(System.Drawing.Point@)">
            <summary>
            When implemented by a class, ensures that the popup window is visible in the screen working area, moving it if necessary.
            </summary>
            <param name="position">Position to evaluate.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.ContainsControl(System.Windows.Forms.Control)">
            <summary>
            When implemented by a class, retrieves a value indicating whether the popup window contains the specified control.
            </summary>
            <param name="control">The Control to evaluate.</param>
            <returns>True if the popup window contains the specified control; otherwise, false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.ResetContent">
            <summary>
            When implemented by a class, updates <c>ICodeCompletionWindow</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.ResetSizeable">
            <summary>
            When implemented by a class, resets the <c>Sizeable</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.ResetAutoSize">
            <summary>
            When implemented by a class, resets the <c>AutoSize</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.ResetCodeCompletionFlags">
            <summary>
            When implemented by a class, resets the <c>CodeCompletions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.PerformSearch">
            <summary>
            When implemented by a class, performes searching operation.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.Provider">
            <summary>
            When implemented by a class, gets or sets the object that contains data related to the popup window.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.Sizeable">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the border of the popup window is resizable.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.AutoSize">
            <summary>
            When implemented by a class, gets or sets a value indicating whether a popup window is automatically resized to fit its contents.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.Images">
            <summary>
            When implemented by a class, gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.CompletionFlags">
            <summary>
            When implemented by a class, gets or sets collection of attributes that specifies behaviour of the popup window.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.OwnerControl">
            <summary>
            When implemented by a class, represents a control owning the <c>ICodeCompletionWindow</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.StartPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is valid.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.EndPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is valid.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.DisplayPos">
            <summary>
            When implemented by a class, specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is displayed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.PopupControl">
            <summary>
            When implemented by a class, represents control contained in popup window. Usually <c>CodeCompletionHint</c> or	<c>CompletionListBox</c>.
            <seealso cref="T:QWhale.Editor.CodeCompletion.CodeCompletionHint"/>
            <seealso cref="T:QWhale.Editor.CodeCompletion.CompletionListBox"/>
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.ClosePopup">
            <summary>
            When implemented by a class, occurs when the popup window is closed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.ShowPopup">
            <summary>
            When implemented by a class, occurs when the popup window is displayed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.Disposed">
            <summary>
            When implemented by a class, occurs when the popup window is disposed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.KeyPreviewEvent">
            <summary>
            Occurs when the popup window receives key message
            </summary>
            <remarks>The event handler receives an argument of type <c>KeyPreviewEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.ICodeCompletionWindow.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeCompletionWindow</c> class with default settings.
            </summary>
            <param name="owner">The <c>SyntaxEdit</c> control owning this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionWindow</c> class with specified owner.
            </summary>
            <param name="owner">The <c>SyntaxEdit</c> control owning this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.Close(System.Boolean,System.Boolean)">
            <summary>
            Closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
            <param name="setFocus">Indicates whether the owner control should be focused after closing popup window.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Responds on chaning position in the popup window.
            </summary>
            <param name="x">X-coordinate of current position.</param>
            <param name="y">Y-coordinate of current position.</param>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.Popup">
            <summary>
            Displays popup window at the current mouse position.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.PopupAt(System.Int32,System.Int32)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="x">Horizontal coordinate at which popup window should be displayed.</param>
            <param name="y">Vertical coordinate at which popup window should be displayed</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.PopupAt(System.Drawing.Point)">
            <summary>
            Displays popup window at the specified position.
            </summary>
            <param name="position">The Point object that specifies the coordinates at which popup window should be displayed.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.Close(System.Boolean)">
            <summary>
            Closes the popup window.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.CloseDelayed(System.Boolean)">
            <summary>
            Closes the popup window with delay.
            </summary>
            <param name="accept">Indicates whether the result of the popup should be accepted.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.IsFocused">
            <summary>
            Indicates whether <c>CodeCompletionWindow</c> or it's child control has an input focus.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.EnsureVisible(System.Drawing.Point@)">
            <summary>
            Ensures that the popup window is visible in the screen working area, moving it if necessary.
            </summary>
            <param name="position">Position in screen coordinates.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.ResetContent">
            <summary>
            Updates <c>CodeCompletionWindow</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.ResetSizeable">
            <summary>
            Resets the <c>Sizeable</c> property to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.ResetAutoSize">
            <summary>
            Resets the AutoSize property to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.ResetCodeCompletionFlags">
            <summary>
            Resets the <c>CompletionFlags</c> property to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.PerformSearch">
            <summary>
            Performes searching operation.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.ContainsControl(System.Windows.Forms.Control)">
            <summary>
            Retrieves a value indicating whether the popup window contains the specified control.
            </summary>
            <param name="control">The Control to evaluate.</param>
            <returns>True if the popup window contains the specified control; otherwise, false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.Dispose(System.Boolean)">
            <summary>
            Destroys the instance of the <c>CodeCompletionWindow</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Editor#CodeCompletion#ICodeCompletionWindow#add_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Editor#CodeCompletion#ICodeCompletionWindow#remove_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#CreateGraphics">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#Invalidate">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#Invalidate(System.Drawing.Rectangle)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#Invalidate(System.Drawing.Region)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#PointToClient(System.Drawing.Point)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#PointToScreen(System.Drawing.Point)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#Focus">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#FindForm">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#BringToFront">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#Invoke(System.Delegate)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_CanFocus">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Visible">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Visible(System.Boolean)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Location">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Location(System.Drawing.Point)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Left">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Left(System.Int32)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Top">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Top(System.Int32)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Width">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Width(System.Int32)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Height">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Height(System.Int32)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Bounds(System.Drawing.Rectangle)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_ClientRectangle">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Parent">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Parent(System.Windows.Forms.Control)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Enabled">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#set_Enabled(System.Boolean)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_IsHandleCreated">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#get_Created">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#add_Click(System.EventHandler)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionWindow.QWhale#Common#IControl#remove_Click(System.EventHandler)">
            <summary>
            Represents a base class for popup controls such as <c>CodeCompletionBox</c> and <c>CodeCompletionHint</c>.
            </summary>
            <remarks>Do not create instances of this class, use derived classes instead.</remarks>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.AutoSize">
            <summary>
            Gets or sets a value indicating whether a popup window is automatically resized to fit its contents.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.PopupControl">
            <summary>
            Represents control contained in popup window. Usually <c>CodeCompletionHint</c> or	<c>CompletionListBox</c>.
            <seealso cref="T:QWhale.Editor.CodeCompletion.CodeCompletionHint"/>
            <seealso cref="T:QWhale.Editor.CodeCompletion.CompletionListBox"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.Provider">
            <summary>
            Gets or sets the object that contains data related to the popup window.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.Sizeable">
            <summary>
            Gets or sets a value indicating whether the border of the popup window is sizable.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.Images">
            <summary>
            Gets or sets the <c>ImageList</c> for code completion items.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.CompletionFlags">
            <summary>
            Gets or sets collection of attributes that specifies behavior of the popup window.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.OwnerControl">
            <summary>
            Represents a control owning this <c>CodeCompletionWindow</c> object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.StartPos">
            <summary>
            Specifies position within the text where <c>CodeCompletionWindow</c> is valid.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.EndPos"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.EndPos">
            <summary>
            Specifies position within the text where <c>CodeCompletionWindow</c> is valid.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.StartPos"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionWindow.DisplayPos">
            <summary>
            Specifies position within the text (as index of line and character) where <c>ICodeCompletionWindow</c> is displayed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.CodeCompletionWindow.ClosePopup">
            <summary>
            Occurs when the popup window is closed.
            </summary>
            <remarks>The event handler receives an argument of type <c>ClosingEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.CodeCompletionWindow.ShowPopup">
            <summary>
            Occurs when the popup window is displayed.
            </summary>
            <remarks>The event handler receives an argument of type <c>ShowingEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.CodeCompletionWindow.KeyPreviewEvent">
            <summary>
            Occurs when the popup window receives key message
            </summary>
            <remarks>The event handler receives an argument of type <c>KeyPreviewEventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlScrollingButtonInfo">
            <summary>
            Contains information about <c>IScrollingButton</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingButtonInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingButtonInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingButtonInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlScrollingButtonInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingButtonInfo.#ctor(QWhale.Editor.IScrollingButton)">
            <summary>
            Initializes a new instance of the <c>XmlScrollingButtonInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IGutter</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.Name">
            <summary>
            Stores <c>IScrollingButton.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.Description">
            <summary>
            Stores <c>IScrollingButton.Description</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.ImageIndex">
            <summary>
            Stores <c>IScrollingButton.ImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.Images">
            <summary>
            Stores <c>IScrollingButton.ImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.Visible">
            <summary>
            Stores <c>IScrollingButton.Visible</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.BorderStyle">
            <summary>
            Stores <c>IScrollingButton.BorderStyle</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.Checked">
            <summary>
            Stores <c>IScrollingButton.Checked</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.AllowCheck">
            <summary>
            Stores <c>IScrollingButton.AllowCheck</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingButtonInfo.GroupIndex">
            <summary>
            Stores <c>IScrollingButton.GroupIndex</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IWordBreak">
            <summary>
            Represents properties and methods used to separate words within Edit control content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.IsDelimiter(System.String,System.Int32)">
            <summary>
            When implemented by a class, indicates whether the character at the specific position of given string is a delimiter character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.IsWhitespace(System.String,System.Int32)">
            <summary>
            When implemented by a class, indicates whether the character at the specific position of given string is a whitespace character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is whitespace; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether the character at the specific position of the string collection is delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.IsDelimiter(System.Char)">
            <summary>
            When implemented by a class, indicates whether the specified character is delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Collections.Hashtable)">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.GetTextAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns word at the specific text position.
            </summary>
            <param name="pos">Specifies index of the line.</param>
            <param name="line">Specifies index of character in the text string.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.GetTextAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IWordBreak.ResetDelimiters">
            <summary>
            When implemented by a class, resets the <c>Delimiters</c> to the defalut value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IWordBreak.Delimiters">
            <summary>
            When implemented by a class, gets or sets an array of characters used as delimiters between words in the text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IWordBreak.DelimiterString">
            <summary>
            When implemented by a class, gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.SearchOptions">
            <summary>
            Defines options for search and replace operations.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.CaseSensitive">
            <summary>
            Specifies that search should be case sensitive.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.WholeWordsOnly">
            <summary>
            Searches only for whole words, rather than matching the text as it occurs within words.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.RegularExpressions">
            <summary>
            Specifies that text to find represents notations for patterns of text rather than the literal character.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.BackwardSearch">
            <summary>
            Specifies that search should be executed towards the beginning of text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.SelectionOnly">
            <summary>
            Searches only within the selected text in the currently active document.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.EntireScope">
            <summary>
            Specifies that search should start from the beginnig of text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.SearchHiddenText">
            <summary>
            Specifies that the search includes invisible text, such as an collapsed section.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.FindTextAtCursor">
            <summary>
            Specifies that text at the current position of the active document should be used as text to find.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.PromptOnReplace">
            <summary>
            Specifies that confirm dialog should appear before replacing found text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.FindSelectedText">
            <summary>
            Specifies that selected text of the active document should be used as text to find.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.CycledSearch">
            <summary>
            Search until current position is reached.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.SearchOptions.SilentSearch">
            <summary>
            Search until current position is reached.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextSearch">
            <summary>
            Represents method used to search text within the string collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSearch.Find(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            When implemented by a class, searches for given text within the control's text content.
            </summary>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo">
            <summary>
            Contains information about <c>ITextStrings</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlTextStringsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.#ctor(QWhale.Editor.TextSource.ITextStrings)">
            <summary>
            Initializes a new instance of the <c>XmlTextStringsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ITextStrings</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.ShouldSerializeTabStops">
            <summary>
            Indicates whether the <c>TabStops</c> property should be persisted.
            </summary>
            <returns>True if <c>TabStops</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.ShouldSerializeLineTerminator">
            <summary>
            Indicates whether the <c>LineTerminator</c> property should be persisted.
            </summary>
            <returns>True if <c>LineTerminator</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.ShouldSerializeDelimiters">
            <summary>
            Indicates whether the <c>Delimiters</c> property should be persisted.
            </summary>
            <returns>True if <c>Delimiters</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.TabStops">
            <summary>
            Stores <c>ITextStrings.TabStops</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.UseSpaces">
            <summary>
            Stores <c>ITextStrings.UseSpaces</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.Delimiters">
            <summary>
            Stores <c>ITextStrings.DelimiterString</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.Lines">
            <summary>
            Stores string collection from <c>ITextStrings</c> object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.LineTerminator">
            <summary>
            Stores <c>ITextStrings.LineTerminator</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextStringsInfo.RemoveTrailingSpaces">
            <summary>
            Stores <c>ITextStrings.RemoveTrailingSpaces</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEventHandlers">
            <summary>
            Represents key events for default keymapping.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEventHandlers.EventNames">
            <summary>
            When implemented by a class, represents names of all available event handlers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEventHandlers.MacroRecordEvent">
            <summary>
            When implemented by a class, represents an event to process macro recording.
            </summary>
        </member>
        <member name="T:QWhale.Editor.SyntaxEdit">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ISyntaxEdit">
            <summary>
            Represents properties and methods for an advanced multi-line Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ISearch">
            <summary>
            Represents properties and methods used to search and replace control's text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISearch.Find(System.String)">
            <summary>
            When implemented by a class, searches for given text within the control's contents.
            </summary>
            <param name="text">Text to find.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.Find(System.String,QWhale.Editor.TextSource.SearchOptions)">
            <summary>
            When implemented by a class, searches for given text within the control's contents with specified options.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.Find(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            When implemented by a class, searches for given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.Find(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            When implemented by a class, searches for all occurences of given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="ranges">Represents list of ranges determining search results.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.FindNext">
            <summary>
            When implemented by a class, searches for the next occurence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.FindPrevious">
            <summary>
            When implemented by a class, searches for the previous occurence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.FindNextSelected">
            <summary>
            When implemented by a class, searches for the next occurence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.FindPreviousSelected">
            <summary>
            When implemented by a class, searches for the previous occurence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.CanFindNext">
            <summary>
            When implemented by a class, indicates whether search engine can find next occurence of the text specified by previous search or it is only first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.CanFindPrevious">
            <summary>
            When implemented by a class, indicates whether search engine can find previous occurence of the text specified to search or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.CanFindNextSelected">
            <summary>
            When implemented by a class, indicates whether search engine can find next occurence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.CanFindPreviousSelected">
            <summary>
            When implemented by a class, indicates whether search engine can find previous occurence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.Replace(System.String,System.String)">
            <summary>
            When implemented by a class, searches for the first occurrence of given text within the text content and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.Replace(System.String,System.String,QWhale.Editor.TextSource.SearchOptions)">
            <summary>
            When implemented by a class, searches for first occurrence given text within the text content with specified options and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.Replace(System.String,System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            When implemented by a class, searches for first occurrence given text within the text content with specified options using specified regular expression and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.ReplaceAll(System.String,System.String,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.ReplaceAll(System.String,System.String,QWhale.Editor.TextSource.SearchOptions,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.ReplaceAll(System.String,System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.ReplaceAll(System.String,System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@,System.Boolean@)">
            <summary>
            When implemented by a class, replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <param name="abort">Indicates whether replace action aborted.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.MarkAll(System.String,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.MarkAll(System.String,QWhale.Editor.TextSource.SearchOptions,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.MarkAll(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            When implemented by a class, marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.NeedReplaceCurrent(System.Text.RegularExpressions.Match@)">
            <summary>
            When implemented by a class, indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if selected text matches search text; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.ReplaceCurrent(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Match)">
            <summary>
            When implemented by a class, replaces currently selected text.
            </summary>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Specifies parameters of search and replace.</param>
            <param name="match">Represents Match object if regular expression search successfull.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.StartIncrementalSearch">
            <summary>
            When implemented by a class, enters control to the incremental search state.
            <seealso cref="M:QWhale.Editor.ISearch.FinishIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISearch.StartIncrementalSearch(System.Boolean)">
            <summary>
            When implemented by a class, enters control to the incremental search state.
            <seealso cref="M:QWhale.Editor.ISearch.FinishIncrementalSearch"/>
            </summary>
            <param name="backwardSearch">Indicates that search should be executed towards the beginning of text.</param>
        </member>
        <member name="M:QWhale.Editor.ISearch.FinishIncrementalSearch">
            <summary>
            When implemented by a class, leaves control from the incremental search state.
            <seealso cref="M:QWhale.Editor.ISearch.StartIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISearch.IncrementalSearch(System.String,System.Boolean)">
            <summary>
            When implemented by a class, finds given text incrementally.
            </summary>
            <param name="key">Additional value to seach text.</param>
            <param name="deleteLast">Specifies whether search text should be altered by adding Key string.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.GetTextToSearchAtCursor">
            <summary>
            When implemented by a class, returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.CanSearchSelection(System.String@)">
            <summary>
            When implemented by a class, returns whether search can be performed inside selection.
            </summary>
            <param name="selectedText">Specifies the text being selected.</param>
            <returns>True if selection is not empty; otherwise false</returns>
        </member>
        <member name="M:QWhale.Editor.ISearch.ShowNotFound(System.String)">
            <summary>
            When implemented by a class, displays "searched text not found" message box.
            </summary>
            <param name="caption">Specifies caption of the message dialog.</param>
        </member>
        <member name="P:QWhale.Editor.ISearch.InIncrementalSearch">
            <summary>
            When implemented by a class, indicates whether control is in incremental search state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISearch.IncrementalSearchString">
            <summary>
            When implemented by a class, return text to search if class is in incremental search state; otherwise return empty string.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISearch.SearchPos">
            <summary>
            When implemented by a class, gets or sets a value that represents position of the last found text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISearch.SearchOptions">
            <summary>
            When implemented by a class, gets or sets a value that defines search and replace options.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISearch.SearchLen">
            <summary>
            When implemented by a class, represents length of the last found text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISearch.FirstSearch">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control launches text search at first.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISearch.SearchDialog">
            <summary>
            When implemented by a class, gets or sets a dialog box allowing to search for the text or replace it.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISearch.GotoLineDialog">
            <summary>
            When implemented by a class, gets or sets a dialog prompting for index of the line you need to locate.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditNotifier">
            <summary>
            Represents method that informs editor object about changes in linked objects.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNotifier.OnStateChanged(System.Object,QWhale.Editor.TextSource.NotifyState)">
            <summary>
            When implemented by a class, updates editor control's content according to the parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="state">Reason of changes.</param>
        </member>
        <member name="T:QWhale.Editor.ICaret">
            <summary>
            Represents properties and methods to handle caret within the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICaret.CreateCaret">
            <summary>
            When implemented by a class, creates a new shape for the system caret and gets ownership of the caret.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICaret.DestroyCaret">
            <summary>
            When implemented by a class, destroys the caret's current shape, frees the caret from the control, and removes the caret from the screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICaret.ShowCaret(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves the caret to the specified coordinates.
            </summary>
            <param name="x">Specifies the new x-coordinate of the caret.</param>
            <param name="y">Specifies the new y-coordinate of the caret.</param>
        </member>
        <member name="M:QWhale.Editor.ICaret.GetCaretSize(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns size of the caret's current shape at given position.
            </summary>
            <param name="position">Point at which caret size should be calculated.</param>
            <returns>Size of the caret.</returns>
        </member>
        <member name="M:QWhale.Editor.ICaret.DisplayDragCaret">
            <summary>
            When implemented by a class, displays dragging caret rather than regular caret.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICaret.HideDragCaret">
            <summary>
            When implemented by a class, hides dragging caret.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICaret.UpdateCaret">
            <summary>
            When implemented by a class, ensures the caret is displayed in the current position.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICaret.KillFocus">
            <summary>
            When implemented by a class, ensure the caret is not visible.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICaret.ResetKeepCaretOnLostFocus">
            <summary>
            When implemented by a class, resets the <c>KeepCaretOnLostFocus</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICaret.ResetHideCaret">
            <summary>
            When implemented by a class, resets the <c>HideCaret</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ICaret.KeepCaretOnLostFocus">
            <summary>
            When implemented by a class, keeps caret in visible state even Edit control lost focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ICaret.HideCaret">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control should display caret when it has input focus.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditNavigate">
            <summary>
            Represents additional methods to navigate within the Edit control's text content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.INavigate">
            <summary>
            Represents properties and methods allowing to navigate within the Edit control's text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.Navigate(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.MoveTo(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.MoveTo(System.Drawing.Point)">
            <summary>
            When implemented by a class, moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.MoveToChar(System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the specified character in the current line.
            </summary>
            <param name="x">Index of character in the current line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.MoveToLine(System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.MoveToLine(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
            <param name="linesAbove">Number of lines to leave above cursor.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.ValidatePosition(System.Drawing.Point@)">
            <summary>
            When implemented by a class, validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.StorePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.StorePosition(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <param name="endPos">Specifies whether position represents end of range</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.RestorePosition(System.Int32)">
            <summary>
            When implemented by a class, restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.DisablePositionUpdate">
            <summary>
            When implemented by a class, prevents notification of changing of caret position until 
            calling <c>EnablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.EnablePositionUpdate">
            <summary>
            When implemented by a class, re-enables notification of changing of caret position 
            that was turn of by calling <c>DisablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.ResetNavigateOptions">
            <summary>
            When implemented by a class, resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.INavigate.SetNavigateOptions(QWhale.Editor.TextSource.NavigateOptions)">
            <summary>
            When implemented by a class, sets navigating options without validating position.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.INavigate.NavigateOptions">
            <summary>
            When implemented by a class, gets or sets navigating options.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.INavigate.Position">
            <summary>
            When implemented by a class, gets or sets current position within the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.INavigate.PrevPosition">
            <summary>
            When implemented by a class, gets previous position within the control's text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveCharLeft">
            <summary>
            When implemented by a class, moves the current position one character to the left.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveCharRight">
            <summary>
            When implemented by a class, moves the current position one character to the right.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveWordLeft">
            <summary>
            When implemented by a class, moves the current position one word to the left.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveWordRight">
            <summary>
            When implemented by a class, moves the current position one word to the right.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveLineUp">
            <summary>
            When implemented by a class, moves the current position to the previous line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveLineDown">
            <summary>
            When implemented by a class, moves the current position to the next line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveLineBegin">
            <summary>
            When implemented by a class, moves the current position to the first character of current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveLineEnd">
            <summary>
            When implemented by a class, moves the current position to the last character of current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveLineBeginCycled">
            <summary>
            When implemented by a class, moves the current position to the first not whitespace character/first character of current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveLineEndCycled">
            <summary>
            When implemented by a class, moves the current position to the last not whitespace character/last character of current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveFileBegin">
            <summary>
            When implemented by a class, moves the current position to the first character of the first line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveFileEnd">
            <summary>
            When implemented by a class, moves the current position to the last character of the last line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MovePageUp">
            <summary>
            When implemented by a class, moves current position to the previous page.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MovePageDown">
            <summary>
            When implemented by a class, moves current position to the next page.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveScreenTop">
            <summary>
            When implemented by a class, moves the current position to the top of the screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveScreenBottom">
            <summary>
            When implemented by a class, moves the current position to the bottom of the screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.ScrollLineUp">
            <summary>
            When implemented by a class, scrolls text content one line up.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.ScrollLineDown">
            <summary>
            When implemented by a class, scrolls text content one line down.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveToOpenBrace">
            <summary>
            When implemented by a class, moves the current position to the prev open brace in the text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveToCloseBrace">
            <summary>
            When implemented by a class, moves the current position to the next close brace in the text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.MoveToBrace">
            <summary>
            When implemented by a class, moves the current position to the next open or close brace in the text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.ProcessTab(System.Drawing.Point)">
            <summary>
            When implemented by a class, performs specific actions when Tab key is pressed.
            <returns>True if key was processed; otherwise false.</returns>
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.ProcessShiftTab(System.Drawing.Point)">
            <summary>
            When implemented by a class, performs specific actions when Shift + Tab key is pressed.
            <returns>True if key was processed; otherwise false.</returns>
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditNavigate.ProcessEnter">
            <summary>
            When implemented by a class, performs specific actions when Enter key is pressed.
            <returns>True if key was processed; otherwise false.</returns>
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IEdit">
            <summary>
            Represents properties and methods used for editing the text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.Insert(System.String)">
            <summary>
            When implemeted by a class, inserts the given string at the specified location.
            </summary>
            <param name="text">The text to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.InsertFromFile(System.String)">
            <summary>
            When implemented by a class, inserts the file text content at the specified location.
            </summary>
            <param name="fileName">Name of file to load text from.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.DeleteRight(System.Int32)">
            <summary>
            When implemented by a class, deletes a specified number of characters to the right of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.DeleteLeft(System.Int32)">
            <summary>
            When implemeted by a class, deletes a specified number of characters to the left of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.InsertBlock(System.String)">
            <summary>
            When implemeted by a class, inserts the given string at the specified location.
            </summary>
            <param name="text">String to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.InsertBlock(System.String[])">
            <summary>
            When implmeneted by a class, inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.InsertBlock(QWhale.Editor.TextSource.ITextStrings)">
            <summary>
            When implemeted by a class, inserts the given string collection at the specified location.
            </summary>
            <param name="strings">Collection of strings to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.InsertBlock(System.String[],System.Boolean)">
            <summary>
            When implemented by a class, inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <param name="select">Specifies whether inserted block should be selected.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.DeleteBlock(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, deletes a specified block of characters.
            </summary>
            <param name="rect">Specifies coordinates of characters block to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.BreakLine">
            <summary>
            When implemented by a class, breaks current line into two lines.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.UnBreakLine">
            <summary>
            When implemented by a class, concatenates lines at current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.NewLine">
            <summary>
            When implemeted by a class, inserts a line break at the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.NewLineAbove">
            <summary>
            When implemented by a class, inserts a line break above the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.NewLineBelow">
            <summary>
            When implemented by a class, inserts a line break below the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.IndentLine">
            <summary>
            When implemented by a class, inserts spaces to the start of the current line. 
            Number of spaces is calculated from ident options or <c>SyntaxParser</c> if assigned.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.LineIsReadonly(System.Int32)">
            <summary>
            When implemented by a class, determines whether the given line is readonly.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is readonly; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.PositionIsReadonly(System.Drawing.Point)">
            <summary>
            When implemented by a class, determines whether the text at given position is readonly.
            </summary>
            <param name="position">Position in text coordinates.</param>
            <returns>True if the text can be edited at given position; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.SetLineReadonly(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, sets readonly state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.ResetReadOnly">
            <summary>
            When implemented by a class, resets the <c>Readonly</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.ResetOverWrite">
            <summary>
            When implemented by a class, resets the <c>OverWrite</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.ResetModified">
            <summary>
            When implemented by a class, resets the <c>Modified</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.ResetIndentOptions">
            <summary>
            When implemented by a class, resets the <c>IndentOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.ResetMaxLength">
            <summary>
            When implemented by a class, resets the <c>MaxLength</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IEdit.ResetSingleLineMode">
            <summary>
            When implemented by a class, resets the <c>SingleLineMode</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IEdit.ReadOnly">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IEdit.Overwrite">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the inserted text overwrites existing text.
            </summary>
            
        </member>
        <member name="P:QWhale.Editor.TextSource.IEdit.Modified">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control's text content is modified.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IEdit.SingleLineMode">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IEdit.IndentOptions">
            <summary>
            When implemented by a class, gets or sets <c>QWhale.Editor.IndentOptions</c> for this class, allowing to customize behaior of Edit control when user presses Enter to insert new text line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IEdit.MaxLength">
            <summary>
            When implemented by a class, specifies the maximum number of characters that can be entered into the edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IWordWrap">
            <summary>
            Represents properties and methods to wrap Edit control's text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWordWrap.UpdateWordWrap">
            <summary>
            When implemented by a class, re-wraps all lines in the text.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.IWordWrap.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, re-wraps lines in the text within specific scope.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies last line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.IWordWrap.GetWrapMargin">
            <summary>
            When implemented by a class, returns position of the wrapping margin.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Editor.IWordWrap.ResetWordWrap">
            <summary>
            When implemented by a class, resets the <c>WordWrap</c> to the defalut value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWordWrap.ResetWrapAtMargin">
            <summary>
            When implemented by a class, resets the <c>WrapAtMargin</c> to the defalut value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWordWrap.WordWrap">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWordWrap.WrapAtMargin">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control automatically wraps words at margin position.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWordWrap.WrapMargin">
            <summary>
            When implemented by a class, gets position of the wrapping margin.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextExport">
            <summary>
            Represents properties methods to save text content using different formats.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextExport.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            When implemented by a class, saves content to the given file with specified exporter.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextExport.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves content to the given file with specified exported and specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextExport.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            When implemented by a class, saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextExport.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextExport.SaveStream(System.IO.TextWriter,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            When implemented by a class, saves the text content to the given stream with specified exporter.
            </summary>
            <param name="writer">The TextWriter object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextExport.LineTerminator">
            <summary>
            When implemented by a class, gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextImport">
            <summary>
            Represents methods to load text content in different formats.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextImport.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            When implemented by a class, loads content from the given file with specified importer.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextImport.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextImport.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            When implemented by a class, loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextImport.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to load the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextImport.LoadStream(System.IO.TextReader,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            When implemented by a class, loads the text content from the given stream with specified importer.
            </summary>
            <param name="reader">The TextReader object to load the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.ICodeCompletion">
            <summary>
            Represents properties and methods to provide code completion list box/tooltip for the Editor's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.ShowCodeCompletionBox(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,QWhale.Syntax.CodeCompletionType)">
            <summary>
            When implemented by a class, shows code completion popup window with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.ShowCodeCompletionBox(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,QWhale.Syntax.CodeCompletionType,System.Drawing.Point)">
            <summary>
            When implemented by a class, shows code completion popup window with given Provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type</param>
            <param name="position">Position to show code completion popup window.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.ShowCodeCompletionHint(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,QWhale.Syntax.Lexer.ILexer)">
            <summary>
            When implemented by a class, displays <c>ICodeCompletionHint</c> with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="lexer">Specifies lexer used to draw code completion hint.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.ShowCodeCompletionHint(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,System.Drawing.Point,QWhale.Syntax.Lexer.ILexer)">
            <summary>
            When implemented by a class, displays <c>ICodeCompletionHint</c> with given provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="position">Position to display the hint.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.IsValidText(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether text at the specified position is valid (that is does not contain comments or stirng constants).
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if text is not plain; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.CompleteWord">
            <summary>
            When implemented by a class, displays a code completion window that lists members of the current class in the Editor's content and locates single member, if possible.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.ListMembers">
            <summary>
            When implemented by a class, displays a code completion window that lists members of the current class in the Editor's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.QuickInfo">
            <summary>
            When implemeted by a class, displays a code completion window with simple tooltip information.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.ParameterInfo">
            <summary>
            When implemeted by a class, displays a code completion window containing information for the current method or parameter in the Editor's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.CodeSnippets">
            <summary>
            When implemented by a class, displays a code completion window with list of available code snippets.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.CodeCompletionWindowFocused(System.Windows.Forms.Control@)">
            <summary>
            When implemented by a class, indicates whether <c>ICodeCompletionWindow</c> has focus.
            </summary>
            <param name="control">Returns control that has focus.</param>
            <returns>True if succeed; otherwise, false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletion.CodeCompletion(QWhale.Syntax.CodeCompletionArgs)">
            <summary>
            When implemented by a class, performs code completion for the specified text representing language element.
            </summary>
            <param name="e">A <c>CodeCompletionArgs</c> that contains data for codecompletion.</param>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletion.IsCodeCompletionWindowFocused">
            <summary>
            When implemented by a class, indicates whether <c>ICodeCompletionWindow</c> has focus.
            </summary>
            <returns>True if succeed; otherwise, false.</returns>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletion.CodeCompletionBox">
            <summary>
            When implemented by a class, represents object that specifies a popup window that contains Code completion information presented in the form of list.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletion.CodeCompletionHint">
            <summary>
            When implemented by a class, represents object that specifies a popup window that contains Code completion information presented in the form of the tooltip.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletion.CodeCompletionChars">
            <summary>
            When implemented by a class, represents a collection of characters that initializes a code completion procedure when typing in the editor.
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.ICodeCompletion.NeedCodeCompletion">
            <summary>
            When implemented by a class, occurs when code completion window is to be displayed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IRecordPlayBack">
            <summary>
            Represents properties and methods that allows recording sequences of keyboard commands and play back them later.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.PlayBackMacro">
            <summary>
            When implemented by a class, repeats the stored command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.StartMacroRecording">
            <summary>
            When implemented by a class, starts recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.StopMacroRecording">
            <summary>
            When implemented by a class, stops recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.PauseMacroRecording">
            <summary>
            When implemented by a class, suspends recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.ResumeMacroRecording">
            <summary>
            When implemented by a class, resumes recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.ToggleMacroRecording">
            <summary>
            When implemented by a class, toggles recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.SaveMacros(System.IO.Stream)">
            <summary>
            When implemented by a class, saves the macro records to the given stream in xml format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.SaveMacros(System.IO.TextWriter)">
            <summary>
            When implemented by a class, saves the macro records to the given stream in xml format.
            </summary>
            <param name="writer">The TextWriter object to write macros to stream.</param>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.SaveMacros(System.String)">
            <summary>
            When implemented by a class, saves the macro records to the given file in xml format.
            </summary>
            <param name="fileName">Name of file to save macros.</param>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.LoadMacros(System.IO.Stream)">
            <summary>
            When implemented by a class, loads the macro records fromt the given stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.LoadMacros(System.IO.TextReader)">
            <summary>
            When implemented by a class, loads the macro records fromt the given stream.
            </summary>
            <param name="reader">The TextReader object to read macros from stream.</param>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.LoadMacros(System.String)">
            <summary>
            When implemented by a class, loads the macro records fromt the given file.
            </summary>
            <param name="fileName">Name of file to load macros.</param>
        </member>
        <member name="M:QWhale.Editor.IRecordPlayBack.RecordKeyData(QWhale.Editor.IMacroKeyData)">
            <summary>
            When implemented by a class, adds keyData to the <c>MacroRecords</c> array.
            </summary>
            <param name="keyData">Specifies a keyboard command.</param>
        </member>
        <member name="P:QWhale.Editor.IRecordPlayBack.MacroRecording">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether Edit control should record sequence of keyboard commands. 
            </summary>
        </member>
        <member name="P:QWhale.Editor.IRecordPlayBack.MacroSuspendend">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether recording is suspendend. 
            </summary>
        </member>
        <member name="P:QWhale.Editor.IRecordPlayBack.MacroRecords">
            <summary>
            When implemented by a class, represents an array containing keyboard commands.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ISplitView">
            <summary>
            Represents properties and methods allowing Edit control to visually split its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISplitView.CanSplitHorz">
            <summary>
            When implemented by a class, indicates whether control can split its content horizontally.
            </summary>
            <returns>True if can split horizontally; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISplitView.CanSplitVert">
            <summary>
            When implemented by a class, indicates whether control can split its content vertically.
            </summary>
            <returns>True if can split vertically; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISplitView.CanUnsplitHorz">
            <summary>
            When implemented by a class, indicates whether control has horizontal split view.
            </summary>
            <returns>True if horizontal split view is visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISplitView.CanUnsplitVert">
            <summary>
            When implemented by a class, indicates whether control has vertical split view.
            </summary>
            <returns>True if vertical split view is visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISplitView.SplitViewHorz">
            <summary>
            When implemented by a class, splits its content horizontally.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISplitView.SplitViewVert">
            <summary>
            When implemented by a class, splits its content vertically.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISplitView.UnsplitViewHorz">
            <summary>
            When implemented by a class, removes horizontal split view.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISplitView.UnsplitViewVert">
            <summary>
            When implemented by a class, removes vertical split view.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISplitView.VertSplitEdit">
            <summary>
            When implemented by a class, represents an vertical split view control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISplitView.HorzSplitEdit">
            <summary>
            When implemented by a class, represents horizontal split view control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISplitView.VertSplitter">
            <summary>
            When implemented by a class, represents a vertical Splitter control allowing to split Edit content vertically.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISplitView.HorzSplitter">
            <summary>
            When implemented by a class, represents a horizontal Splitter control allowing to split Edit content horizontally.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISplitView.SplitHorz">
            <summary>
            When implemented by a class, occurs when user splits Edit control horizontally.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISplitView.SplitVert">
            <summary>
            When implemented by a class, occurs when user splits Edit control vertically.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISplitView.UnsplitHorz">
            <summary>
            When implemented by a class, occurs when horizontal split view is removed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISplitView.UnsplitVert">
            <summary>
            When implemented by a class, occurs when vertical split view is removed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IAutoCorrect">
            <summary>
            Represents properties and methods allowing to auto correct words when typing.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IAutoCorrect.HasAutoCorrection(System.String,System.String@)">
            <summary>
            When implemented by a class, checks whether specified word has correction. 
            </summary>
            <param name="word">Word that should be corrected.</param>
            <param name="correctWord">Receives a corrected word.</param>
            <returns>True if word has correction; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.IAutoCorrect.AutoCorrectDelimiters">
            <summary>
            When implemented by a class, gets or sets an array of chars that used as word delimiters.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IAutoCorrect.AutoCorrection">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether to auto correct words being typed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IAutoCorrect.AutoCorrect">
            <summary>
            When implemented by a class, occurs when control tries to auto correct word being typed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ScreenToText(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="position">The screen coordinate Point to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.TextToScreen(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>The Point representing screen coordinate</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ScreenToText(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.TextToScreen(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Horizontal text coordinate to convert.</param>
            <param name="y">Vertical text coordinate to convert.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ScreenToText(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            When implemented by a class, converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <param name="lineEnd">Receives boolean value indicating if the caret is at the line end of the wrapped line.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.TextToScreen(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="position">Point coordinate to convert.</param>
            <param name="lineEnd">Boolean value indicating if the text position can be set to the end of the wrapped line.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ScreenToDisplay(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts given screen coordinates to display coordinates(index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing display coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayToScreen(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <returns>The Point representing screen coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayToScreen(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <param name="average"></param>
            <returns>The Point representing screen coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks> 
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.MoveCaretOnDrag">
            <summary>
            When implemented by a class, moves caret to the position of drag cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.MakeVisible(System.Drawing.Point)">
            <summary>
            When implemented by a class, scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.MakeVisible(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
            <param name="centerLine">Specifies whether given line must be centered within control's client area.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.UpdateView">
            <summary>
            When implemented by a class, updates editor content, caret and pages area.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ShowScrollHint(System.Int32)">
            <summary>
            When implemented by a class, displays tooltip indicating destination line when scrolling.
            </summary>
            <param name="pos">Specifies vertical position (in display coordinates) to obtain hint info.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.HideScrollHint">
            <summary>
            When implemented by a class, hides scroll hint window if necessary.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.GetCharsInWidth(System.Int32)">
            <summary>
            When implemented by a class, returns number of characters painted with current font that will fit into specified Width.
            </summary>
            <param name="width">Width to fit charachers.</param>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.GetLinesInHeight(System.Int32)">
            <summary>
            When implemented by a class, determines how many lines can fit into given Height.
            </summary>
            <param name="height">Height to fit lines.</param>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.GetHitTest(System.Drawing.Point,QWhale.Editor.IHitTestInfo)">
            <summary>
            When implemented by a class, fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="position">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.GetHitTest(System.Int32,System.Int32,QWhale.Editor.IHitTestInfo)">
            <summary>
            When implemented by a class, fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.GetHitTestAtTextPoint(System.Drawing.Point,QWhale.Editor.IHitTestInfo)">
            <summary>
            When implemented by a class, fills hitTestInfo parameter by information about a part of control at specified text coordinate.
            </summary>
            <param name="position">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.GetHitTestAtTextPoint(System.Int32,System.Int32,QWhale.Editor.IHitTestInfo)">
            <summary>
            When implemented by a class, retrieves information about part of control at specified text coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of text position to check.</param>
            <param name="y">Specifies vertical coordinate of text position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.GetTextAtCursor">
            <summary>
            When implemented by a class, returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.Assign(QWhale.Editor.ISyntaxEdit)">
            <summary>
            When implemented by a class, assigns most releavant properties from another <c>ISyntaxEdit</c> object.
            </summary>
            <param name="source">Specifies source object.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayGotoLineDialog">
            <summary>
            When implemented by a class, initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayGotoLineDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplaySearchDialog">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to search for some text.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplaySearchDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to search for some text.
            </summary>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayReplaceDialog">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to search for text and replace it.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayReplaceDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to search for text and replace it.
            </summary>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayEditorSettingsDialog(QWhale.Editor.Dialogs.EditorSettingsTab,System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayEditorSettingsDialog(QWhale.Editor.Dialogs.EditorSettingsTab)">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.DisplayEditorSettingsDialog">
            <summary>
            When implemented by a class, initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ProcessKeyPress(System.Char)">
            <summary>
            When implemented by a class, processes key press
            </summary>
            <param name="keyChar">Tepresents key character to process.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ProcessKeyMsg(System.Windows.Forms.Message@)">
            <summary>
            When implemented by a class, processes a keyboard message.
            </summary>
            <param name="msg">A Message, passed by reference, that represents the window message to process.</param>
            <returns>True if the message was processed by the control; otherwise, false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ResetAcceptTabs">
            <summary>
            When implemented by a class, resets the <c>AcceptTabs</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ResetAcceptReturns">
            <summary>
            When implemented by a class, resets the <c>AcceptReturns</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ResetBorderStyle">
            <summary>
            When implemented by a class, resets the <c>BorderStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ResetBorderColor">
            <summary>
            When implemented by a class, resets the <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxEdit.ResetLineSpace">
            <summary>
            When implemented by a class, resets the <c>LineSpace</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.AcceptTabs">
            <summary>
            When implemented by a class, gets or set a boolean value that indicates whether TAB key should be accepted by Edit control as input key.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.AcceptReturns">
            <summary>
            When implemented by a class, gets or set a boolean value that indicates whether Enter key should be accepted by Edit control as input key.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.BorderStyle">
            <summary>
            When implemented by a class, gets or sets the border style for the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.BorderColor">
            <summary>
            When implemented by a class, gets or sets the border color for the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.LineSpace">
            <summary>
            When implemented by a class, gets or sets line space between individual lines in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.ClientRect">
            <summary>
            When implemented by a class, gets the rectangle that represents the client area of the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.ClientArea">
            <summary>
            When implemented by a class, gets the rectangle that represents the client area of the Edit control.
            Non-client areas area like rulers are exlcuded.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.ClientHeight">
            <summary>
            When implemented by a class, gets the width of the client area of the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.ClientWidth">
            <summary>
            When implemented by a class, gets the height of the client area of the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.CharsInWidth">
            <summary>
            When implemented by a class, returns number of characters painted with current font that will fit into control's client area.
            </summary>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.LinesInHeight">
            <summary>
            When implemented by a class, determines how many lines can fit into control's client area.
            </summary>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Transparent">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw its background.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.UseDefaultMenu">
            <summary>
            When implemented by a class, indicates whether edit control should use bultin popup menu.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Source">
            <summary>
            When implemented by a class, gets or sets an object that implements <c>ITextSource</c> interface containing an actual string data displayed by the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Lines">
            <summary>
            When implemented by a class, represents object that implements <c>ITextStrings</c> interface containing collection of strings determining control's content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.DisplayLines">
            <summary>
            When implemented by a class, represents the object that implements <c>IDisplayStrings</c> interface containing collection of lines to be drawn in the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Selection">
            <summary>
            When implemented by a class, represents an object that implements <c>ISelection</c> interface. This object represents various properties and methods to manipulate text selection, such as copy, paste and drag selected text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Gutter">
            <summary>
            When implemented by a class, represents object that implements <c>IGutter</c> interface containing methods and properties necessary to operate with gutter at the left size of the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.EditMargin">
            <summary>
            When implemented by a class, represents an object that implements <c>IMargin</c> interface and specifies appearance of vertical line drawn over the text and used to mark some limit, for example, of the maximum string length allowed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Painter">
            <summary>
            When implemented by a class, represents an object that implements <c>IPainter</c> interface used to draw control's text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.KeyList">
            <summary>
            When implemented by a class, represents object that implements <c>IKeyList</c> containing list of keys with attached actions, which executed by key pressure.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.LineStyles">
            <summary>
            When implemented by a class, represents an object that implements <c>IEditLineStyles</c> interface holding collection of <c>ILineStyle</c> objects each of them determines particular style of the line in the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Printing">
            <summary>
            When implemented by a class, represents an object that implements <c>IPrinting</c> interface allowing to perform various printing actions such as print, preview document, and setup print options.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.WhiteSpace">
            <summary>
            When implemented by a class, represents an object that implements <c>IWhiteSpace</c> interface. This object specifies appearance of white space characters, as well as End-of-line and End-of-file marks.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.LineSeparator">
            <summary>
            When implemented by a class, represents an object that implements <c>ILineSeparator</c> interface containing methods and properties necessary to separate lines and highlight current line within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Outlining">
            <summary>
            When implementing by a class, represents an object that implements <c>IOutlining</c> interface that specifies appearance and behaviour of outline sections within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Braces">
            <summary>
            When implemented by a class, represents an object that implements <c>IEditBraceMatching</c> interface allowing to change appearance of matching braces within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.HyperText">
            <summary>
            When implemented by a class, represents object that implements <c>IEditHyperText</c> interface allowing to customize appearance and behaviour of hypertext sections within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Spelling">
            <summary>
            When implemented by a class, represents object that implements <c>IEditSpelling</c> interface containing properties and methods to check control's content spelling and highlight mispelled words.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Scrolling">
            <summary>
            When implemented by a class, represents an object that implements <c>IScrolling</c> interface containing properties and methods that describe scrolling behaviour of the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Pages">
            <summary>
            When implemented by a class, represents an object that implements <c>IEditPage</c> interface containing properties and methods representing collection of particular pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.SyntaxPaint">
            <summary>
            When implemented by a class, represents an object that implements <c>IEditSyntaxPaint</c> interface containing properties and methods used to draw editor content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.EventHandlers">
            <summary>
            When implemented by a class, represents object that holds <c>EventHandlers</c> containing list of keys with attached actions.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.SyntaxSettings">
            <summary>
            When implemented by a class, represents key-properties settings of this Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Strings">
            <summary>
            When implemented by a class, represents <c>Lines</c> property in the form of array of strings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.Lexer">
            <summary>
            When implemented by a class, gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxEdit.SerializationInfo">
            <summary>
            Gets or sets an xml representation of ISyntaxEdit
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISyntaxEdit.SourceStateChanged">
            <summary>
            When implemented by a class, occurs when text Source's state is changed, for example when caret position moved, text edited, amount of lines changed, lexer changed, etc.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISyntaxEdit.ModifiedChanged">
            <summary>
            When implemented by a class, occurs when modified state is changed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISyntaxEdit.PaintBackground">
            <summary>
            When implemented by a class, occurs when Edit control should paint its background in transparent mode.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISyntaxEdit.PromptOnReplace">
            <summary>
            When implemented by a class, occurs when replace dialog prompts on replace action.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>SyntaxEdit</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxEdit</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShouldSerializeNavigateOptions">
            <summary>
            Indicates whether the <c>NavigateOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>NavigateOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShouldSerializeIndentOptions">
            <summary>
            Indicates whether the <c>IndentOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>IndentOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShouldSerializeReadOnly">
            <summary>
            Indicates whether the <c>ReadOnly</c> property should be persisted.
            </summary>
            <returns>True if <c>ReadOnly</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShouldSerializeCodeCompletionChars">
            <summary>
            Indicates whether the <c>CodeCompletionChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <c>BorderColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BorderColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShouldSerializeBorderStyle">
            <summary>
            Indicates whether the <c>BorderStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>BorderStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShouldSerializeSearchOptions">
            <summary>
            Indicates whether the <c>SearchOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>SearchOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShouldSerializeText">
            <summary>
            Indicates whether the <c>Text</c> property should be persisted.
            </summary>
            <returns>True if <c>Text</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.PreProcessMessage(System.Windows.Forms.Message@)">
            <summary>
            Preprocesses input messages within the message loop before they are dispatched.
            </summary>
            <param name="msg">A Message, passed by reference, that represents the message to process.</param>
            <returns>True if the message was processed by the Edit control; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ProcessKeyMsg(System.Windows.Forms.Message@)">
            <summary>
            Processes a keyboard message.
            </summary>
            <param name="msg">A Message, passed by reference, that represents the window message to process.</param>
            <returns>True if the message was processed by the control; otherwise, false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ScreenToText(System.Drawing.Point)">
            <summary>
            Converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="position">The screen coordinate Point to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ScreenToText(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <param name="lineEnd">Receives boolean value indicating if the caret is at the line end of the wrapped line.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.TextToScreen(System.Drawing.Point)">
            <summary>
            Converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>The Point representing screen coordinate</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.TextToScreen(System.Drawing.Point,System.Boolean)">
            <summary>
            Converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="position">Point coordinate to convert.</param>
            <param name="lineEnd">Boolean value indicating if the text position can be set to the end of the wrapped line.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ScreenToText(System.Int32,System.Int32)">
            <summary>
            Converts given screen coordinates to text coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing text coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.TextToScreen(System.Int32,System.Int32)">
            <summary>
            Converts given text coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Horizontal text coordinate to convert.</param>
            <param name="y">Vertical text coordinate to convert.</param>
            <returns>The Point representing screen coordinate.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ScreenToDisplay(System.Int32,System.Int32)">
            <summary>
            Converts given screen coordinates to display coordinates (index of line and character).
            </summary>
            <param name="x">Horizontal screen coordinate to convert.</param>
            <param name="y">Vertical screen coordinate to convert.</param>
            <returns>The Point representing display coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayToScreen(System.Int32,System.Int32)">
            <summary>
            Converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <returns>The Point representing screen coordinate</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayToScreen(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts given display coordinates, index of line and character, to screen coordinates.
            </summary>
            <param name="x">Index of character in the line.</param>
            <param name="y">Index of line.</param>
            <param name="average"></param>
            <returns>The Point representing screen coordinate.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks> 
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveCaretOnDrag">
            <summary>
            Moves caret to the position of drag cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MakeVisible(System.Drawing.Point)">
            <summary>
            Scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MakeVisible(System.Drawing.Point,System.Boolean)">
            <summary>
            Scrolls the control's content, if necessary, to ensure a specified text position is in view.
            </summary>
            <param name="position">Position in the text to make visible.</param>
            <param name="centerLine">Specifies whether given line must be centered within control's client area.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.UpdateView">
            <summary>
            Updates editor content, caret and pages area.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShowScrollHint(System.Int32)">
            <summary>
            Displays tooltip indicating destination line when scrolling.
            </summary>
            <param name="pos">Specifies vertical position (in display coordinates) to obtain hint info.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.HideScrollHint">
            <summary>
            Hides scroll hint window if necessary.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetCharsInWidth(System.Int32)">
            <summary>
            Returns number of characters painted with current font that will fit into specified Width.
            </summary>
            <param name="width">Width to fit charachers.</param>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetLinesInHeight(System.Int32)">
            <summary>
            Determines how many lines can fit into given Height.
            </summary>
            <param name="height">Height to fit lines.</param>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetHitTest(System.Drawing.Point,QWhale.Editor.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="position">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetHitTest(System.Int32,System.Int32,QWhale.Editor.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetHitTestAtTextPoint(System.Drawing.Point,QWhale.Editor.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of control at specified text coordinate.
            </summary>
            <param name="position">Specifies coordinate to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetHitTestAtTextPoint(System.Int32,System.Int32,QWhale.Editor.IHitTestInfo)">
            <summary>
            Retrieves information about part of control at specified text coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of text position to check.</param>
            <param name="y">Specifies vertical coordinate of text position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetTextAtCursor">
            <summary>
            Returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Assign(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Assigns most releavant properties from another <c>ISyntaxEdit</c> object.
            </summary>
            <param name="source">Specifies source object.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayGotoLineDialog">
            <summary>
            Initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayGotoLineDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs a dialog prompting you for index of the line you need to locate.
            </summary>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplaySearchDialog">
            <summary>
            Initializes and runs a dialog box allowing you to search for some text.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplaySearchDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs a dialog box allowing you to search for some text.
            </summary>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayReplaceDialog">
            <summary>
            Initializes and runs a dialog box allowing you to search for text and replace it.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayReplaceDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs a dialog box allowing you to search for text and replace it.
            </summary>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayEditorSettingsDialog(QWhale.Editor.Dialogs.EditorSettingsTab,System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayEditorSettingsDialog(QWhale.Editor.Dialogs.EditorSettingsTab)">
            <summary>
            Initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayEditorSettingsDialog">
            <summary>
            Initializes and runs a dialog box allowing you to change Edit control settings.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ProcessKeyPress(System.Char)">
            <summary>
            Processes key press
            </summary>
            <param name="keyChar">Tepresents key character to process.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetAcceptTabs">
            <summary>
            Resets the <c>AcceptTabs</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetAcceptReturns">
            <summary>
            Resets the <c>AcceptReturns</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetBorderStyle">
            <summary>
            Resets the <c>BorderStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetBorderColor">
            <summary>
            Resets the <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetLineSpace">
            <summary>
            Resets the <c>LineSpace</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Find(System.String)">
            <summary>
            Searches for given text within the control's contents.
            </summary>
            <param name="text">Text to find.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Find(System.String,QWhale.Editor.TextSource.SearchOptions)">
            <summary>
            Searches for given text within the control's contents with specified options.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Find(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches for given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Find(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Searches for all occurences of given text within the control's contents with specified options using specified regular expression.
            </summary>
            <param name="text">Text to find.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="ranges">Represents list of ranges determining search results.</param>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.FindNext">
            <summary>
            Searches for the next occurence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.FindPrevious">
            <summary>
            Searches for the previous occurence of the text specified by previous search.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.FindNextSelected">
            <summary>
            Searches for the next occurence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.FindPreviousSelected">
            <summary>
            Searches for the previous occurence of the selected text.
            </summary>
            <returns>True if search succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanFindNext">
            <summary>
            Indicates whether search engine can find next occurence of the text specified by previous search or it is only first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanFindPrevious">
            <summary>
            Indicates whether search engine can find previous occurence of the text specified to search or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanFindNextSelected">
            <summary>
            Indicates whether search engine can find next occurence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanFindPreviousSelected">
            <summary>
            Indicates whether search engine can find previous occurence of the selected text or it is the first attempt to search.
            </summary>
            <returns>False if it is the first attempt to search or no text selected; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Replace(System.String,System.String)">
            <summary>
            Searches for the first occurrence of given text within the text content and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Replace(System.String,System.String,QWhale.Editor.TextSource.SearchOptions)">
            <summary>
            Searches for first occurrence given text within the text content with specified options and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Replace(System.String,System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex)">
            <summary>
            Searches for first occurrence given text within the text content with specified options using specified regular expression and if succeed replaces it by specified string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ReplaceAll(System.String,System.String,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ReplaceAll(System.String,System.String,QWhale.Editor.TextSource.SearchOptions,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ReplaceAll(System.String,System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@)">
            <summary>
            Replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ReplaceAll(System.String,System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Int32@,System.Boolean@)">
            <summary>
            Replaces all occurrences of given text within class text content by specified replaceWith string.
            </summary>
            <param name="text">Text to find.</param>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Represents options to search text.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="count">Number of replaced occurrences.</param>
            <param name="abort">Indicates whether replace action aborted.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MarkAll(System.String,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MarkAll(System.String,QWhale.Editor.TextSource.SearchOptions,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MarkAll(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Boolean)">
            <summary>
            Marks all occurrences of specified string in the class text content by unnumbered bookmarks and moves to the last occurrence.
            </summary>
            <param name="text">Specifies text to mark.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="clearPrevious">Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.</param>
            <returns>Number of found occurrences.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.NeedReplaceCurrent">
            <summary>
            Indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <returns>True is some text is found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.NeedReplaceCurrent(System.Text.RegularExpressions.Match@)">
            <summary>
            Indicates whether search engine need to replace successfully found and selected text.
            </summary>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True is some text is found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ReplaceCurrent(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Match)">
            <summary>
            Replaces currently selected text.
            </summary>
            <param name="replaceWith">Text to replace.</param>
            <param name="options">Specifies parameters of search and replace.</param>
            <param name="match">Represents Match object if regular expression search successfull</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.StartIncrementalSearch">
            <summary>
            Enters control to the incremental search state.
            <seealso cref="M:QWhale.Editor.SyntaxEdit.FinishIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.StartIncrementalSearch(System.Boolean)">
            <summary>
            Enters control to the incremental search state.
            <seealso cref="M:QWhale.Editor.SyntaxEdit.FinishIncrementalSearch"/>
            </summary>
            <param name="backwardSearch">Indicates that search should be executed towards the beginning of text.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.FinishIncrementalSearch">
            <summary>
            Leaves control from the incremental search state.
            <seealso cref="M:QWhale.Editor.SyntaxEdit.StartIncrementalSearch"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.IncrementalSearch(System.String,System.Boolean)">
            <summary>
            Finds given text incrementally.
            </summary>
            <param name="key">Additional value to seach text.</param>
            <param name="deleteLast">Specifies whether search text should be altered by adding Key string.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetTextToSearchAtCursor">
            <summary>
            Returns word at the cursor position.
            </summary>
            <returns>Word at the cursor position.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanSearchSelection(System.String@)">
            <summary>
            When implemented by a class, returns whether search can be performed inside selection.
            </summary>
            <returns>True if selection is not empty; otherwise false</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShowNotFound(System.String)">
            <summary>
            Displays "searched text not found" message box.
            </summary>
            <param name="caption">Specifies caption of the message dialog.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Find(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            Searches for given text within the control's text content.
            </summary>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Notification(System.Object,System.EventArgs)">
            <summary>
            Updates control's content according to parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.OnStateChanged(System.Object,QWhale.Editor.TextSource.NotifyState)">
            <summary>
            Updates control's content according to the state of the source.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="state">Specifies changes of the control's content.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CreateCaret">
            <summary>
            Creates a new shape for the system caret and gets ownership of the caret.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DestroyCaret">
            <summary>
            Destroys the caret's current shape, frees the caret from the control, and removes the caret from the screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShowCaret(System.Int32,System.Int32)">
            <summary>
            Moves the caret to the specified coordinates.
            </summary>
            <param name="x">Specifies the new x-coordinate of the caret.</param>
            <param name="y">Specifies the new y-coordinate of the caret.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.UpdateCaret">
            <summary>
            When implemented by a class, ensures the caret is displayed in the current position.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetCaretSize(System.Drawing.Point)">
            <summary>
            Returns size of the caret's current shape at given position.
            </summary>
            <param name="position">Point at which caret size should be calculated.</param>
            <returns>Size of the caret.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisplayDragCaret">
            <summary>
            Displays dragging caret rather than regular caret.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.HideDragCaret">
            <summary>
            Hides dragging caret.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.KillFocus">
            <summary>
            Ensure the caret is not visible.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetKeepCaretOnLostFocus">
            <summary>
            Resets the <c>KeepCaretOnLostFocus</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetHideCaret">
            <summary>
            Resets the <c>HideCaret</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveCharLeft">
            <summary>
            Moves the current position one character to the left.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveCharRight">
            <summary>
            Moves the current position one character to the right.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveWordLeft">
            <summary>
            Moves the current position one word to the left.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveWordRight">
            <summary>
            Moves the current position one word to the right.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveLineUp">
            <summary>
            Moves the current position to the previous line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveLineDown">
            <summary>
            Moves the current position to the next line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveLineBegin">
            <summary>
            Moves the current position to the first character of current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveLineEnd">
            <summary>
            Moves the current position to the last character of current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveLineBeginCycled">
            <summary>
            Moves the current position to the first not whitespace character/first character of current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveLineEndCycled">
            <summary>
            Moves the current position to the last not whitespace character/last character of current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveFileBegin">
            <summary>
            Moves the current position to the first character of the first line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveFileEnd">
            <summary>
            Moves the current position to the last character of the last line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MovePageUp">
            <summary>
            Moves current position to the previous page.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MovePageDown">
            <summary>
            Moves current position to the next page.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveScreenTop">
            <summary>
            Moves the current position to the top of the screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveScreenBottom">
            <summary>
            Moves the current position to the bottom of the screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ScrollLineUp">
            <summary>
            Scrolls text content one line up.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ScrollLineDown">
            <summary>
            Scrolls text content one line down.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveToOpenBrace">
            <summary>
            Moves the current position to the previous open brace in the text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveToCloseBrace">
            <summary>
            Moves the current position to the next close brace in the text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveToBrace">
            <summary>
            Moves the current position to the next open or close brace in the text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ProcessTab(System.Drawing.Point)">
            <summary>
            Performs specific actions when Tab key is pressed.
            <returns>True if key was processed; otherwise false.</returns>
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ProcessShiftTab(System.Drawing.Point)">
            <summary>
            Performs specific actions when Shift + Tab key is pressed.
            <returns>True if key was processed; otherwise false.</returns>
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ProcessEnter">
            <summary>
            Performs specific actions when Enter key is pressed.
            <returns>True if key was processed; otherwise false.</returns>
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Navigate(System.Int32,System.Int32)">
            <summary>
            Moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveToChar(System.Int32)">
            <summary>
            Moves the current position to the specified character in current line.
            </summary>
            <param name="x">Index of character in current line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveToLine(System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.MoveToLine(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
            <param name="linesAbove">Number of lines to leave above cursor.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ValidatePosition(System.Drawing.Point@)">
            <summary>
            Validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.StorePosition(System.Drawing.Point)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.StorePosition(System.Drawing.Point,System.Boolean)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <param name="endPos">Specifies whether position represents end of range</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.RestorePosition(System.Int32)">
            <summary>
            Restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisablePositionUpdate">
            <summary>
            Prevents notification of changing of caret position until 
            calling <c>EnablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.EnablePositionUpdate">
            <summary>
            Re-enables notification of changing of caret position 
            that was turn of by calling <c>DisablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetNavigateOptions">
            <summary>
            Resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SetNavigateOptions(QWhale.Editor.TextSource.NavigateOptions)">
            <summary>
            Sets navigating options without validating position.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetReadOnly">
            <summary>
            Resets the <c>ReadOnly</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetOverWrite">
            <summary>
            Resets the <c>OverWrite</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetModified">
            <summary>
            Resets the <c>Modified</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetIndentOptions">
            <summary>
            Resets the <c>IndentOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetMaxLength">
            <summary>
            Resets the <c>MaxLength</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetSingleLineMode">
            <summary>
            Resets the <c>SingleLineMode</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.Insert(System.String)">
            <summary>
            Inserts the given string at the specified location.
            </summary>
            <param name="text">The text to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.InsertFromFile(System.String)">
            <summary>
            Inserts the file text content at the specified location.
            </summary>
            <param name="fileName">Name of file to load text from.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DeleteRight(System.Int32)">
            <summary>
            Deletes a specified number of characters to the right of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DeleteLeft(System.Int32)">
            <summary>
            Deletes a specified number of characters to the left of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.InsertBlock(System.String)">
            <summary>
            Inserts the given string at the specified location.
            </summary>
            <param name="text">String to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.InsertBlock(System.String[])">
            <summary>
            Inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.InsertBlock(QWhale.Editor.TextSource.ITextStrings)">
            <summary>
            Inserts the given string collection at the specified location.
            </summary>
            <param name="strings">Collection of strings to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.InsertBlock(System.String[],System.Boolean)">
            <summary>
            When implemented by a class, inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <param name="select">Specifies whether inserted block should be selected.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DeleteBlock(System.Drawing.Rectangle)">
            <summary>
            Deletes a specified block of characters.
            </summary>
            <param name="rect">Specifies coordinates of characters block to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.BreakLine">
            <summary>
            Breaks current line into two lines.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.UnBreakLine">
            <summary>
            Concatenates lines at current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.NewLine">
            <summary>
            Inserts a line break at the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.IndentLine">
            <summary>
            Inserts spaces to the start of the current line. 
            Number of spaces is calculated from ident options or <c>SyntaxParser</c> if assigned.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.NewLineAbove">
            <summary>
            Inserts a line break above the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.NewLineBelow">
            <summary>
            Inserts a line break below the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LineIsReadonly(System.Int32)">
            <summary>
            Determines whether the given line is readonly.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is readonly; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.PositionIsReadonly(System.Drawing.Point)">
            <summary>
            Determines whether the text at given position is readonly.
            </summary>
            <param name="position">Position in text coordinates.</param>
            <returns>True if the text can be edited at given position; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SetLineReadonly(System.Int32,System.Boolean)">
            <summary>
            Sets readonly state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QWhale.Editor.SyntaxEdit.BeginUpdate" -->
        <member name="M:QWhale.Editor.SyntaxEdit.EndUpdate">
            <summary>
            Re-enables outline editor updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.DisableUpdate">
            <summary>
            Prevents editor updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.EnableUpdate">
            <summary>
            Re-enables editor updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.UpdateWordWrap">
            <summary>
            Re-wraps all lines in the text.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            Re-wraps lines in the text within specific scope.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies last line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.GetWrapMargin">
            <summary>
            Returns position of the wrapping margin.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetWordWrap">
            <summary>
            Resets the <c>WordWrap</c> to the defalut value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResetWrapAtMargin">
            <summary>
            Resets the <c>WrapAtMargin</c> to the defalut value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves content to the given file in the specific format.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            Saves content to the given file in the specific format with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveStream(System.IO.TextWriter,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveStream(System.IO.Stream)">
            <summary>
            Saves content of the snippet to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves content to the specific stream in the specific format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            Saves content to the specific stream in the specific format and specific encoding.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadStream(System.IO.TextReader,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
            <param name="importer">Specifies importer to load content.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads content from the given file with specified importer.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShowCodeCompletionBox(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,QWhale.Syntax.CodeCompletionType)">
            <summary>
            Shows code completion popup window with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShowCodeCompletionBox(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,QWhale.Syntax.CodeCompletionType,System.Drawing.Point)">
            <summary>
            Shows code completion popup window with given Provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion popup window.</param>
            <param name="completionType">Specifies code completion type</param>
            <param name="position">Position to show code completion popup window.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShowCodeCompletionHint(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,QWhale.Syntax.Lexer.ILexer)">
            <summary>
            Displays <c>ICodeCompletionHint</c> with given provider at the current position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="lexer">Specifies lexer used to draw code completion hint.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ShowCodeCompletionHint(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,System.Drawing.Point,QWhale.Syntax.Lexer.ILexer)">
            <summary>
            Displays <c>ICodeCompletionHint</c> with given provider at the specified position.
            </summary>
            <param name="provider">Represents data for code completion hint.</param>
            <param name="position">Position to display the hint.</param>
            <param name="lexer">Specifies lexer used to draw code completion hint.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.IsValidText(System.Drawing.Point)">
            <summary>
            Indicates whether text at the specified position is valid (that is does not contain comments or stirng constants).
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if text is not plain; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CompleteWord">
            <summary>
            Displays a code completion window that displays members of the current class in the Editor's content in a form of the popup list box and locates single member, if possible.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CodeCompletion(QWhale.Syntax.CodeCompletionArgs)">
            <summary>
            Performs code completion for the specified text representing language element.
            </summary>
            <param name="e">A <c>CodeCompletionArgs</c> that contains data for codecompletion.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CodeCompletionWindowFocused(System.Windows.Forms.Control@)">
            <summary>
            Indicates whether <c>ICodeCompletionWindow</c> has focus.
            </summary>
            <param name="control">Returns control that has focus.</param>
            <returns>True if succeed; otherwise, false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ListMembers">
            <summary>
            Displays a code completion window that displays members of the current class in the Editor's content in a form of the popup list box.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QuickInfo">
            <summary>
            Displays a code completion window with simple tooltip information.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ParameterInfo">
            <summary>
            Displays a code completion window containing information for the current method or parameter in the Editor's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CodeSnippets">
            <summary>
            Displays a code completion window with list of available code snippets.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.PlayBackMacro">
            <summary>
            Repeats the stored command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.StartMacroRecording">
            <summary>
            Starts recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.StopMacroRecording">
            <summary>
            Stops recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.PauseMacroRecording">
            <summary>
            Suspends recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ResumeMacroRecording">
            <summary>
            Resumes recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.ToggleMacroRecording">
            <summary>
            Toggles recording the command sequence.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveMacros(System.IO.Stream)">
            <summary>
            Saves the macro records to the given stream in xml format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveMacros(System.IO.TextWriter)">
            <summary>
            Saves the macro records to the given stream in xml format.
            </summary>
            <param name="writer">The TextWriter object to write macros to stream.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SaveMacros(System.String)">
            <summary>
            Saves the macro records to the given file in xml format.
            </summary>
            <param name="fileName">Name of file to save macros.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadMacros(System.IO.Stream)">
            <summary>
            Loads the macro records fromt the given stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadMacros(System.IO.TextReader)">
            <summary>
            Loads the macro records fromt the given stream.
            </summary>
            <param name="reader">The TextReader object to read macros from stream.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.LoadMacros(System.String)">
            <summary>
            Loads the macro records fromt the given file.
            </summary>
            <param name="fileName">Name of file to load macros.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.RecordKeyData(QWhale.Editor.IMacroKeyData)">
            <summary>
            Adds keyData to the <c>MacroRecords</c> array.
            </summary>
            <param name="keyData">Specifies a keyboard command.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanSplitHorz">
            <summary>
            Indicates whether control can split its content horizontally.
            </summary>
            <returns>True if can split horizontally; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanSplitVert">
            <summary>
            Indicates whether control can split its content vertically.
            </summary>
            <returns>True if can split vertically; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanUnsplitHorz">
            <summary>
            Indicates whether control has horizontal split view.
            </summary>
            <returns>True if horizontal split view is visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.CanUnsplitVert">
            <summary>
            Indicates whether control has vertical split view.
            </summary>
            <returns>True if vertical split view is visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SplitViewHorz">
            <summary>
            Splits control content horizontally.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.SplitViewVert">
            <summary>
            Splits control content vertically.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.UnsplitViewHorz">
            <summary>
            Removes horizontal split view.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.UnsplitViewVert">
            <summary>
            Removes vertical split view.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.HasAutoCorrection(System.String,System.String@)">
            <summary>
            Checks whether specified word has correction. 
            </summary>
            <param name="word">Word that should be corrected.</param>
            <param name="correctWord">Receives a corrected word.</param>
            <returns>True if word has correction; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IUpdate#Update">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#CreateGraphics">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#Invalidate">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#Invalidate(System.Drawing.Rectangle)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#Invalidate(System.Drawing.Region)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#PointToClient(System.Drawing.Point)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#PointToScreen(System.Drawing.Point)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#Focus">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#FindForm">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#BringToFront">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#Invoke(System.Delegate)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_CanFocus">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Visible">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Visible(System.Boolean)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Location">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Location(System.Drawing.Point)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Left">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Left(System.Int32)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Top">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Top(System.Int32)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Width">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Width(System.Int32)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Height">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Height(System.Int32)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Bounds(System.Drawing.Rectangle)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_ClientRectangle">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Parent">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Parent(System.Windows.Forms.Control)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Enabled">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#set_Enabled(System.Boolean)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_IsHandleCreated">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#get_Created">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#add_Click(System.EventHandler)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxEdit.QWhale#Common#IControl#remove_Click(System.EventHandler)">
            <summary>
            Represents advanced multi-line Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Text">
            <summary>
            Gets or sets the string collection as a single string with the individual lines delimited by carriage returns.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.AllowDrop">
            <summary>
            Gets or sets a value indicating whether the control can accept data that the user drags onto it.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.DefaultMenu">
            <summary>
            Gets or sets default context menu for the editor control.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.SelectionChanged">
            <summary>
            Occurs when selection bounds are changed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.DrawHeader">
            <summary>
            Occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.JumpToUrl">
            <summary>
            Occurs when user attempts to jump to url.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.CheckHyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.GutterClick">
            <summary>
            Occurs when the gutter part of Edit control is clicked.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.GutterDblClick">
            <summary>
            Occurs when the gutter part of Edit control is double-clicked.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.DrawUserMargin">
            <summary>
            Occurs when user margin part of each line is drawing.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.WordSpell">
            <summary>
            Occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.VerticalScroll">
            <summary>
            Occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.HorizontalScroll">
            <summary>
            Occurs when control scrolls its content in horizonal direction. This can be caused by dragging horizonal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.ScrollButtonClick">
            <summary>
            Occurs when some scrolling button is clicked.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.UndoEvent">
            <summary>
            Occurs when undo/redo operation performed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Source">
            <summary>
            Gets or sets an object that implements <c>ITextSource</c> interface containing an actual string data displayed by the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Lines">
            <summary>
            Represents object that implements <c>ITextStrings</c> interface containing collection of strings determining control's content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.DisplayLines">
            <summary>
            Represents the object that implements <c>IDisplayStrings</c> interface containing collection of lines to be drawn in the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Selection">
            <summary>
            Represents an object that implements <c>ISelection</c> interface. This object represents various properties and methods to manipulate text selection, such as copy, paste and drag selected text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Gutter">
            <summary>
            Represents object that implements <c>IGutter</c> interface containing methods and properties necessary to operate with gutter at the left size of the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.EditMargin">
            <summary>
            Represents an object that implements <c>IMargin</c> interface and specifies appearance of vertical line drawn over the text and used to mark some limit, for example, of the maximum string length allowed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Painter">
            <summary>
            Represents an object that implements <c>IPainter</c> interface used to draw control's text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.KeyList">
            <summary>
            Represents object that implements <c>IKeyList</c> containing list of keys with attached actions, which executed by key pressure.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.LineStyles">
            <summary>
            Represents an object that implements <c>IEditLineStyles</c> interface holding collection of <c>IEditLineStyle</c> objects each of them determines particular style of the line in the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Printing">
            <summary>
            Represents an object that implements <c>IPrinting</c> interface allowing to perform various printing actions such as print, preview document, and setup print options.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.WhiteSpace">
            <summary>
            Represents an object that implements <c>IWhiteSpace</c> interface. This object specifies appearance of white space characters, as well as End-of-line and End-of-file marks.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.LineSeparator">
            <summary>
            Represents an object that implements <c>ILineSeparator</c> interface containing methods and properties necessary to separate lines and highlight current line within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Outlining">
            <summary>
            Represents an object that implements <c>IOutlining</c> interface that specifies appearance and behaviour of outline sections within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Braces">
            <summary>
            Represents an object that implements <c>IEditBraceMatching</c> interface allowing to change appearance of matching braces within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.HyperText">
            <summary>
            Represents object that implements <c>IEditHyperText</c> interface allowing to customize appearance and behaviour of hypertext sections within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Spelling">
            <summary>
            Represents object that implements <c>IEditSpelling</c> interface containing properties and methods to check control's content spelling and highlight mispelled words.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Scrolling">
            <summary>
            Represents an object that implements <c>IScrolling</c> interface containing properties and methods that describe scrolling behaviour of the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.SyntaxPaint">
            <summary>
            Represents an object that implements <c>IEditSyntaxPaint</c> interface containing properties and methods used to draw editor content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Pages">
            <summary>
            Represents an object that implements <c>IEditPage</c> interface containing properties and methods representing collection of particular pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.AcceptTabs">
            <summary>
            Gets or set a boolean value that indicates whether TAB key should be accepted by Edit control as input key.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.AcceptReturns">
            <summary>
            Gets or set a boolean value that indicates whether Enter key should be accepted by Edit control as input key.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.BorderStyle">
            <summary>
            Gets or sets the border style for the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.BorderColor">
            <summary>
            Gets or sets the border color for the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.LineSpace">
            <summary>
            When implemented by a class, gets or sets line space between individual lines in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.ClientWidth">
            <summary>
            Gets the width of the client area of the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.ClientHeight">
            <summary>
            Gets the width of the client area of the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.CharsInWidth">
            <summary>
            Returns number of characters painted with current font that will fit into control's client area.
            </summary>
            <returns>Number of characters that can fit in.</returns>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.LinesInHeight">
            <summary>
            Determines how many lines can fit into control's client area.
            </summary>
            <returns>Number of lines that can fit in.</returns>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.ClientRect">
            <summary>
            Gets the rectangle that represents the client area of the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.ClientArea">
            <summary>
            Gets the rectangle that represents the client area of the Edit control.
            Non-client areas area like rulers are exlcuded
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Transparent">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw its background.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.UseDefaultMenu">
            <summary>
            Indicates whether edit control should use bultin popup menu.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Strings">
            <summary>
            Represents <c>Lines</c> property in the form of array of strings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.EventHandlers">
            <summary>
            Represents object that holds <c>EventHandlers</c> containing list of keys with attached actions.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.SyntaxSettings">
            <summary>
            Represents key-properties settings of this Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>SyntaxEdit</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.SourceStateChanged">
            <summary>
            Occurs when text Source's state is changed, for example when caret position moved, text edited, amount of lines changed, lexer changed, etc.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.ModifiedChanged">
            <summary>
            Occurs when modified state is changed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.PaintBackground">
            <summary>
            Occurs when Edit control should paint its background in transparent mode.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.PromptOnReplace">
            <summary>
            Occurs when replace dialog prompts on replace action.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Lexer">
            <summary>
            Gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.CustomDraw">
            <summary>
            Occurs when control draws its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.InIncrementalSearch">
            <summary>
            Indicates whether control is in incremental search state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.IncrementalSearchString">
            <summary>
            Return text to search if class is in incremental search state; otherwise return empty string.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.SearchPos">
            <summary>
            Gets or sets a value that represents position of the last found text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.SearchOptions">
            <summary>
            Gets or sets a value that defines search and replace options.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.SearchLen">
            <summary>
            Represents length of the last found text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.FirstSearch">
            <summary>
            Gets or sets a value indicating whether control launches text search at first.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.SearchDialog">
            <summary>
            Gets or sets a dialog box allowing to search for the text or replace it.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.EditorSettingsDialog">
            <summary>
            Gets or sets a editor settings dialog box.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.GotoLineDialog">
            <summary>
            Gets or sets a dialog prompting for index of the line you need to locate.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.KeepCaretOnLostFocus">
            <summary>
            Keeps caret in visible state even Edit control lost focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.HideCaret">
            <summary>
            Gets or sets a value indicating whether the control should display caret when it has input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.NavigateOptions">
            <summary>
            Gets or sets navigating options.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Position">
            <summary>
            Gets or sets current position within the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.PrevPosition">
            <summary>
            Gets previous position within the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Overwrite">
            <summary>
            Gets or sets a value indicating whether the inserted text overwrites existing text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.Modified">
            <summary>
            Gets or sets a value indicating whether the control's text content is modified.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.SingleLineMode">
            <summary>
            Gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.IndentOptions">
            <summary>
            Gets or sets <c>QWhale.Editor.IndentOptions</c> for this class, allowing to customize behaior of Edit control when user presses Enter to insert new text line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.MaxLength">
            <summary>
            Specifies the maximum number of characters that can be entered into the edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.WordWrap">
            <summary>
            Gets or sets a value indicating whether control automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.WrapAtMargin">
            <summary>
            Gets or sets a value indicating whether control automatically wraps words at margin position.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.WrapMargin">
            <summary>
            Gets position of the wrapping margin.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.IsCodeCompletionWindowFocused">
            <summary>
            Indicates whether <c>ICodeCompletionWindow</c> has focus.
            </summary>
            <returns>True if succeed; otherwise, false.</returns>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.NeedCodeCompletion">
            <summary>
            Occurs when code completion window is to be displayed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.CodeCompletionBox">
            <summary>
            Represents object that specifies a popup window that contains code completion information presented in the form of list.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.CodeCompletionHint">
            <summary>
            Represents object that specifies a popup window that contains code completion information presented in the form of the tooltip.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.CodeCompletionChars">
            <summary>
            Represents a collection of characters that initializes a code completion procedure when typing in the editor.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.MacroRecording">
            <summary>
            Gets or sets a boolean value indicating whether Edit control should record sequence of keyboard commands. 
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.MacroSuspendend">
            <summary>
            Gets or sets a boolean value indicating whether recording is suspendend. 
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.MacroRecords">
            <summary>
            Represents an array containing keyboard commands.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.VertSplitEdit">
            <summary>
            Represents an vertical split view control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.HorzSplitEdit">
            <summary>
            Represents horizontal split view control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.VertSplitter">
            <summary>
            Represents a vertical Splitter control allowing to split Edit content vertically.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.HorzSplitter">
            <summary>
            Represents a horizontal Splitter control allowing to split Edit content horizontally.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.SplitHorz">
            <summary>
            Occurs when user splits Edit control horizontally.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.SplitVert">
            <summary>
            Occurs when user splits Edit control vertically.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.UnsplitHorz">
            <summary>
            Occurs when horizontal split view is removed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.UnsplitVert">
            <summary>
            Occurs when vertical split view is removed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.AutoCorrectDelimiters">
            <summary>
            Gets or sets an array of chars that used as word delimiters.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxEdit.AutoCorrection">
            <summary>
            Gets or sets a boolean value indicating whether to auto correct words being typed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxEdit.AutoCorrect">
            <summary>
            Occurs when control tries to auto correct word being typed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Selection">
            <summary>
            Represents class used to manage selected part of the Edit control's text content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ISelection">
            <summary>
            Contains properties and methods used to manage selected part of the Edit control's text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Assign(QWhale.Editor.ISelection)">
            <summary>
            When implemented by a class, copies the contents from another <c>ISelection</c> object.
            </summary>
            <param name="source">Specifies <c>ISelection</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SetSelection(QWhale.Editor.SelectionType,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionRect">New selected rectangle.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SetSelection(QWhale.Editor.SelectionType,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionStart">Left-top corner of the selected rectange.</param>
            <param name="selectionEnd">Right-bottom corner of the selected rectangle.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.UpdateSelStart(System.Drawing.Point)">
            <summary>
            When implemented by a class, updates selection start to the specified position.
            </summary>
            <param name="position">New selection start.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.UpdateSelRange(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, updates selection start and end to the specified position.
            </summary>
            <param name="start">New selection start.</param>
            <param name="end">New selection end.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.UpdateSelStart(System.Boolean)">
            <summary>
            When implemented by a class, updates selection start to the specified position.
            </summary>
            <param name="checkIfEmpty">Checks whether sepection is empty.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.UpdateSelection">
            <summary>
            When implemented by a class, invalidates selected region.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectCharLeft">
            <summary>
            When implemented by a class, increases selected text to one character at the left side of the selection region.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectCharLeft(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to one character at the left side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectCharRight">
            <summary>
            When implemented by a class, increases selected text to one character at the right side of the selection region.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectCharRight(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to one character at the right side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectWordLeft">
            <summary>
            When implemented by a class, increases selected text to the word located at the left side of the current position in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectWordLeft(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the word located at the left side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectWordRight">
            <summary>
            When implemented by a class, increases selected text to the word located at the right side of the current position in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectWordRight(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the word located at the right side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLineUp">
            <summary>
            When implemented by a class, increases selected text to the preceding line in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLineUp(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the preceding line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLineDown">
            <summary>
            When implemented by a class, increases selected text to the following line in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLineDown(QWhale.Editor.SelectionType)">
            <summary>
             When implemented by a class, increases selected text to the following line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectPageUp">
            <summary>
            When implemented by a class, increases selected text to the one page up in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectPageUp(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the one page up in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectPageDown">
            <summary>
            When implemented by a class, increases selected text to the one page down in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectPageDown(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the one page down in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectScreenTop">
            <summary>
            When implemented by a class, increases selected text to the begin of screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectScreenTop(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the begin of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectScreenBottom">
            <summary>
            When implemented by a class, increases selected text to the end of screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectScreenBottom(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to the end of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLineBegin">
            <summary>
            When implemented by a class, selects from current position to the beginning of current line in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLineBegin(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, selects from current position to the beginning of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLineEnd">
            <summary>
            When implemented by a class, selects from current position to the end of current line in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLineEnd(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, selects from current position to the end of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectFileBegin">
            <summary>
            When implemented by a class, increases selected text to beginning of the control's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectFileBegin(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to beginning of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectFileEnd">
            <summary>
            When implemented by a class, increases selected text to end of the control's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectFileEnd(QWhale.Editor.SelectionType)">
            <summary>
            When implemented by a class, increases selected text to end of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectLine">
            <summary>
            When implemented by a class, selects entire line at the current position in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectWord">
            <summary>
            When implemented by a class, selects word at the current position in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectAll">
            <summary>
            When implemented by a class, selects all lines in the control's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectToOpenBrace">
            <summary>
            When implemented by a class, increases selected text to the prev open brace.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectToCloseBrace">
            <summary>
            When implemented by a class, increases selected text to the next closing brace.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectToBrace">
            <summary>
            When implemented by a class, increases selected text to the next open or closing brace.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.CommentSelection">
            <summary>
            When implemented by a class, marks the selected text as a comment, using the correct comment syntax for the programming language.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.UncommentSelection">
            <summary>
            When implemented by a class, removes the comment syntax from the selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SmartFormat">
            <summary>
            When implemented by a class, formats selected text using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SmartFormat(System.Int32)">
            <summary>
            When implemented by a class, formats given line using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SmartFormat(System.Char)">
            <summary>
            When implemented by a class, formats given line using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="ch">Specifies Character being typed</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SmartIndent">
            <summary>
            When implemented by a class, positions the cursor to the line indentation level, obtained from parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c> option when user presses Enter.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SmartIndent(System.Char)">
            <summary>
            When implemented by a class, formats given current line using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="ch">Specifies character being pressed</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SmartFormatBlock(System.Boolean)">
            <summary>
            When implemented by a class, formats current syntax block using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="extended">Specifies that search should be extended outside current scope</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SmartFormatDocument">
            <summary>
            When implemented by a class, formats entire document using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Tabify">
            <summary>
            When implemented by a class, converts spaces to tabs in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.UnTabify">
            <summary>
            When implemented by a class, converts tabs to spaces in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Indent">
            <summary>
            When implemented by a class, indents the selected text by one indentation level, inserting Tab or spaces to the beginning of the line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.UnIndent">
            <summary>
            When implemented by a class, unindents the selected text by one indentation level, deleting Tab or spaces from the beginning of the line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.LowerCase">
            <summary>
            When implemented by a class, converts all selected characters to the lower-case.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.UpperCase">
            <summary>
            When implemented by a class, converts all selected characters to the upper-case.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Capitalize">
            <summary>
            When implemented by a class, changes first character of all words in selected text to upper-case and all another characters to lower-case.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.DeleteWhiteSpace">
            <summary>
            When implemented by a class, removes all space and tab characters from selected text. If no text selected - removes space and tab characters from current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ToggleOutlining">
            <summary>
            When implemented by a class, toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.CollapseToDefinitions">
            <summary>
            When implemented by a class, collapses and expandes some outline section to get a quick overall view of the Edit content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.SwapAnchor">
            <summary>
            When implemented by a class, change current position from beginning of selection rectangle to the end of selection rectangle or vice versa.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.CanCopy">
            <summary>
            When implemented by a class, indicates whether selected text can be copied to clipboard.
            </summary>
            <returns>True if the selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.CanCut">
            <summary>
            When implemented by a class, indicates whether selected text can be cut to the clipboard.
            </summary>
            <returns>True if the selection can be cut; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.CanPaste">
            <summary>
            When implemented by a class, indicates whether control can paste some text from the clipboard.
            </summary>
            <returns>True if the Clipboard has some text or unicode text;</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.Copy">
            <summary>
            When implemented by a class, copies <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Cut">
            <summary>
            When implemented by a class, cuts <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Paste">
            <summary>
            When implemented by a class, pastes content of the Clipboard to the Edit control, replacing selected text if needed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Delete">
            <summary>
            When implemented by a class, deletes selected text from the control.
            </summary>
            <returns>True if successfull</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.Clear">
            <summary>
            When implemented by a class, makes selection empty, without deleting its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Move(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.BeginUpdate">
            <summary>
            When implemented by a class, prevents the <c>ISelection</c> updating until the <c>EndUpdate</c> method is called.
            <seealso cref="M:QWhale.Editor.Selection.EndUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.EndUpdate">
            <summary>
            When implemented by a class, re-enables selection updating turned off by calling <c>BeginUpdate</c> method.
            <seealso cref="M:QWhale.Editor.Selection.BeginUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.DeleteLeft">
            <summary>
            When implemented by a class, deletes one character left to the cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.DeleteRight">
            <summary>
            When implemented by a class, deletes one character right to the cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.DeleteWordLeft">
            <summary>
            When implemented by a class, deletes one word left to the cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.DeleteWordRight">
            <summary>
            When implemented by a class, deletes one word right to the cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.DeleteLine">
            <summary>
            When implemented by a class, deletes current line if no text selected; otherwise deletes selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.CutLine">
            <summary>
            When implemented by a class, cuts current line to the clipboard if no text is selected; otherwise cuts selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.NewLine">
            <summary>
            When implemented by a class, inserts a line break at the current position of the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.NewLineAbove">
            <summary>
            When implemented by a class, inserts a line break above the current position of the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.NewLineBelow">
            <summary>
            When implemented by a class, inserts a line break below the current position of the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ProcessEscape">
            <summary>
            When implemented by a class, processes escape presure: method deselects selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ProcessTab">
            <summary>
            When implemented by a class, inserts new tab character or spaces if the selected text is empty; otherwise indents selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ProcessShiftTab">
            <summary>
            When implemented by a class, moves current position to the previous tab stop if the selected text is empty; otherwise unindents selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ToggleOverWrite">
            <summary>
            When implemented by a class, toggles the control's overwrite mode.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.InsertString(System.String)">
            <summary>
            When implemented by a class, inserts given text to the control's content deleting selected text if needed.
            </summary>
            <param name="s">Text to insert.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.CharTransponse">
            <summary>
            When implemented by a class, transposes character under the caret with the next character.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.WordTransponse">
            <summary>
            When implemented by a class, transposes word under the caret with the next word.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.LineTransponse">
            <summary>
            When implemented by a class, transposes line under the caret with the next line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.CanDrag(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether control can drag selected text.
            </summary>
            <param name="position">Specifies destination position of drag operation.</param>
            <returns>True if the control can drag selected text; otherwise false.</returns>
            <remarks>Control must not be in the read-only state to allow dragging selected text.</remarks>
        </member>
        <member name="M:QWhale.Editor.ISelection.DragTo(System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.ChangeBlock(QWhale.Editor.StringEvent)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.ChangeBlock(QWhale.Editor.TextUndoEvent,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selested region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.ChangeBlock(QWhale.Editor.TextUndoEvent)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.ChangeBlock(QWhale.Editor.StringEvent,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selested region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectionToTextPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given selection coordinate to the text coordinate.
            </summary>
            <param name="position">The selection coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in text coordinates.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.TextToSelectionPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given text coordinate to the selection coordinate.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in selection coordinates.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.IsPosInSelection(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether given position located within the selected region.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.IsPosInSelection(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether given position located within the selected region.
            </summary>
            <param name="x">Horizontal coordinate of the position to check.</param>
            <param name="y">Vertical coordinate of the position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.GetSelectionForLine(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, sets left and right parameter to the first and last selected characters within specified line.
            </summary>
            <param name="index">Index of line within Edit control content.</param>
            <param name="left">Receives index of the first selected character.</param>
            <param name="right">Receives index of the last selected character.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectedCount">
            <summary>
            When implemented by a class, returns amount of the lines being selected.
            </summary>
            <returns>Number of selected lines.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectedString(System.Int32)">
            <summary>
            When implemented by a class, returns selected part of string at specified position.
            </summary>
            <param name="index">Specifies index of the line.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:QWhale.Editor.ISelection.StartSelection">
            <summary>
            When implemented by a class, forces selection start.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.EndSelection">
            <summary>
            When implemented by a class, stops selection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.Invalidate">
            <summary>
            When implemented by a class, invalidates a selection region of the editor control and causes a paint message to be sent to the editor control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, responds on chaning position in the editor.
            </summary>
            <param name="x">X-part of position to change.</param>
            <param name="y">Y-part of position to change.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.OnSelectionChanged">
            <summary>
            When implemented by a class, raises <c>SelectionChanged</c> event.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.OnSelect(System.Object,System.EventArgs)">
            <summary>
            When implemented by a class, selects part of text source settings. Reserwed for internal use
            </summary>
            <param name="source">The source of the selection.</param>
            <param name="e">An <c>EventArgs</c> that contains the data.</param>
        </member>
        <member name="M:QWhale.Editor.ISelection.ScrollIfNeeded(System.Drawing.Point)">
            <summary>
            When implemented by a class, scrolls to specified position if needed.
            </summary>
            <param name="pt">Position to scroll.</param>
            <returns>True if scroll needed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.SelectionToScreen">
            <summary>
            When implemented by a class, represents selection region in a screen coordinates.
            </summary>
            <returns>Screen coordinate rectange corresponding to selection region.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.IsValidSelectionPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether specified position located at the top-left or right-bottom corners of selection area.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if specified position valid; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISelection.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ResetAllowedSelectionMode">
            <summary>
            When implemented by a class, resets the <c>AllowedSelectionMode</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ResetInActiveForeColor">
            <summary>
            When implemented by a class, resets the <c>InActiveForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ResetInActiveBackColor">
            <summary>
            When implemented by a class, resets the <c>InActiveBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISelection.ResetBorderColor">
            <summary>
            When implemented by a class, resets the <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.SelectedColorData">
            <summary>
            When implemented by a class, gets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.SelectionState">
            <summary>
            When implemented by a class, gets or sets a value indicates state of the selected text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.UpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.IsEmpty">
            <summary>
            When implemented by a class, indicates whether nothing is selected.
            </summary>
            <returns>True if empty; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.ISelection.SelectionStart">
            <summary>
            When implemented by a class, gets or sets the position of the first selected character while text considered as a single string.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.SelectionLength">
            <summary>
            When implemented by a class, gets or sets length of the <c>SelectedText</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.SelectionRect">
            <summary>
            When implemented by a class, gets or sets rectangular area indicating selected text of the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.SelectionType">
            <summary>
            When implemented by a class, gets or sets type of current selection.
            <seealso cref="T:QWhale.Editor.SelectionType"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.SelectedText">
            <summary>
            When implemented by a class, gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.Options">
            <summary>
            When implemented by a class, gets or sets options determining behaviour or the <c>ISelection</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.ForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of the <c>SelectedText</c> when owner control has input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.BackColor">
            <summary>
            When implemented by a class, gets or sets a background color of the <c>SelectedText</c> when owner control has input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.InActiveForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of the <c>SelectedText</c> when owner control does not have input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.BorderColor">
            <summary>
            When implemented by a class, gets or sets a color of the selection border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.InActiveBackColor">
            <summary>
            When implemented by a class, gets or sets a background color of the <c>SelectedText</c> when owner control does not have input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.AllowedSelectionMode">
            <summary>
            When implemented by a class, gets or sets types of selection allowed to Edit control content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISelection.SerializationInfo">
            <summary>
            Gets or sets an xml representation of ISelection  
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISelection.SelectionChanged">
            <summary>
            When implemented by a class, occurs when selection bounds are changed.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QWhale.Editor.Selection.IsPosInSelection(System.Int32,System.Int32,System.Boolean)" -->
        <member name="M:QWhale.Editor.Selection.#ctor">
            <summary>
            Initializes a new instance of the <c>Selection</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Selection</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.Finalize">
            <summary>
            Destroys the instance of the <c>Selection</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>FontColor</c> property should be persisted.
            </summary>
            <returns>True if <c>FontColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.ShouldSerializeInActiveBackColor">
            <summary>
            Indicates whether the <c>InActiveBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.ShouldSerializeInActiveForeColor">
            <summary>
            Indicates whether the <c>InActiveForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <c>BorderColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.ShouldSerializeAllowedSelectionMode">
            <summary>
            Indicates whether the <c>AllowedSelectionMode</c> property should be persisted.
            </summary>
            <returns>True if <c>AllowedSelectionMode</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.Assign(QWhale.Editor.ISelection)">
            <summary>
            Copies the contents from another <c>ISelection</c> object.
            </summary>
            <param name="source">Specifies <c>ISelection</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SetSelection(QWhale.Editor.SelectionType,System.Drawing.Rectangle)">
            <summary>
            Sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionRect">New selected rectangle.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.OnSelectionChanged">
            <summary>
            Raises <c>SelectionChanged</c> event.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.OnSelect(System.Object,System.EventArgs)">
            <summary>
            Selects part of text source settings. Reserwed for internal use
            </summary>
            <param name="source">The source of the selection.</param>
            <param name="e">An <c>EventArgs</c> that contains the data.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.UpdateSelStart(System.Drawing.Point)">
            <summary>
            Updates selection start to the specified position.
            </summary>
            <param name="position">New selection start.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.UpdateSelRange(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Updates selection start and end to the specified position.
            </summary>
            <param name="start">New selection start.</param>
            <param name="end">New selection end.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.UpdateSelStart(System.Boolean)">
            <summary>
            Updates selection start to the specified position.
            </summary>
            <param name="checkIfEmpty">Checks whether sepection is empty.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.StartSelection">
            <summary>
            Forces selection start.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.EndSelection">
            <summary>
            Stops selection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ScrollIfNeeded(System.Drawing.Point)">
            <summary>
            Scrolls to specified position if needed.
            </summary>
            <param name="pt">Position to scroll.</param>
            <returns>True if scroll needed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.IsValidSelectionPoint(System.Drawing.Point)">
            <summary>
            Indicates whether specified position located at the top-left or right-bottom corners of selection area.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if specified position valid; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.UpdateSelection">
            <summary>
            Invalidates selected region.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Responds on chaning position in the editor.
            </summary>
            <param name="x">X-part of position to change.</param>
            <param name="y">Y-part of position to change.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectionToScreen">
            <summary>
            Represents selection region in a screen coordinates.
            </summary>
            <returns>Screen coordinate rectange corresponding to selection region.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.Invalidate">
            <summary>
            Invalidates a selection region of the editor control and causes a paint message to be sent to the editor control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SetSelection(QWhale.Editor.SelectionType,System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Sets new selection region with specified selection type.
            </summary>
            <param name="selectionType">New selection type.</param>
            <param name="selectionStart">Left-top corner of the selected rectange.</param>
            <param name="selectionEnd">Right-bottom corner of the selected rectangle.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectCharLeft">
            <summary>
            Increases selected text to one character at the left side of the selection region.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectCharLeft(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to one character at the left side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectCharRight">
            <summary>
            Increases selected text to one character at the right side of the selection region.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectCharRight(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to one character at the right side of the selection region and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectWordLeft">
            <summary>
            Increases selected text to the word located at the left side of the current position in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectWordLeft(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to the word located at the left side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectWordRight">
            <summary>
            Increases selected text to the word located at the right side of the current position in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectWordRight(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to the word located at the right side of the current position in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLineUp">
            <summary>
            Increases selected text to the preceding line in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLineUp(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to the preceding line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLineDown">
            <summary>
            Increases selected text to the following line in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLineDown(QWhale.Editor.SelectionType)">
            <summary>
             Increases selected text to the following line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectPageUp">
            <summary>
            Increases selected text to the one page up in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectPageUp(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to the one page up in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectPageDown">
            <summary>
            Increases selected text to the one page down in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectPageDown(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to the one page down in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectScreenTop">
            <summary>
            Increases selected text to the begin of screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectScreenTop(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to the begin of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectScreenBottom">
            <summary>
            Increases selected text to the end of screen.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectScreenBottom(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to the end of the screen and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLineBegin">
            <summary>
            Selects from current position to the beginning of current line in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLineBegin(QWhale.Editor.SelectionType)">
            <summary>
            Selects from current position to the beginning of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLineEnd">
            <summary>
            Selects from current position to the end of current line in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLineEnd(QWhale.Editor.SelectionType)">
            <summary>
            Selects from current position to the end of current line in the control and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectFileBegin">
            <summary>
            Increases selected text to beginning of the control's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectFileBegin(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to beginning of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectFileEnd">
            <summary>
            Increases selected text to end of the control's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectFileEnd(QWhale.Editor.SelectionType)">
            <summary>
            Increases selected text to end of the control's content and sets a given selection type.
            </summary>
            <param name="selectionType">New type of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectLine">
            <summary>
            Selects entire line at the current position in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectWord">
            <summary>
            Selects word at the current position in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectAll">
            <summary>
            Selects all lines in the control's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectToOpenBrace">
            <summary>
            Increases selected text to the prev open brace.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectToCloseBrace">
            <summary>
            Increases selected text to the next closing brace.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectToBrace">
            <summary>
            Increases selected text to the next open or closing brace.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.CommentSelection">
            <summary>
            Marks the selected text as a comment, using the correct comment syntax for the programming language.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.UncommentSelection">
            <summary>
            Removes the comment syntax from the selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SmartFormat">
            <summary>
            Formats selected text using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SmartFormat(System.Int32)">
            <summary>
            Formats given line using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SmartFormat(System.Char)">
            <summary>
            Formats given line using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="ch">Specifies Character being typed</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SmartIndent">
            <summary>
            Positions the cursor to the line indentation level, obtained from parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c> option when user presses Enter.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SmartIndent(System.Char)">
            <summary>
            Formats given current line using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            <param name="ch">Specifies character being typed</param>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QWhale.Editor.Selection.SmartFormatBlock(System.Boolean)" -->
        <member name="M:QWhale.Editor.Selection.SmartFormatDocument">
            <summary>
            Formats entire document using indentation obtained from Syntax Parser supporting <c>QWhale.Syntax.SyntaxOptions.SmartIndent</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.Tabify">
            <summary>
            Converts spaces to tabs in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.UnTabify">
            <summary>
            Converts tabs to spaces in the current string within the selected area according to tab settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.Indent">
            <summary>
            Indents the selected text by one indentation level, inserting Tab or spaces to the beginning of the line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.UnIndent">
            <summary>
            Unindents the selected text by one indentation level, deleting Tab or spaces from the beginning of the line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.LowerCase">
            <summary>
            Converts all selected characters to the lower-case.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.UpperCase">
            <summary>
            Converts all selected characters to the upper-case.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.Capitalize">
            <summary>
            Changes first character of all words in selected text to upper-case and all another characters to lower-case.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.DeleteWhiteSpace">
            <summary>
            Removes all space and tab characters from selected text. If nothing is selected the method removes space and tab characters from the current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ToggleOutlining">
            <summary>
            Toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.CollapseToDefinitions">
            <summary>
            Collapses and expandes some outline section to get a quick overall view of the Edit content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.SwapAnchor">
            <summary>
            Change current position from beginning of selection rectangle to the end of selection rectangle or vice versa.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.CanCopy">
            <summary>
            Indicates whether selected text can be copied to clipboard.
            </summary>
            <returns>True if the selection is not empty; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.CanCut">
            <summary>
            Indicates whether selected text can be cut to the clipboard.
            </summary>
            <returns>True if the selection can be cut; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.CanPaste">
            <summary>
            Indicates whether control can paste some text from the clipboard.
            </summary>
            <returns>True if the Clipboard has some text or unicode text;</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.Copy">
            <summary>
            Copies <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.Cut">
            <summary>
            Cuts <c>SelectedText</c> to the Clipboard.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.Paste">
            <summary>
            Pastes content of the Clipboard to the Edit control, replacing selected text if needed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.Delete">
            <summary>
            Deletes selected text from the control.
            </summary>
            <returns>True if successfull</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.Clear">
            <summary>
            Makes selection empty, without deleting its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.Move(System.Drawing.Point,System.Boolean)">
            <summary>
            Moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.BeginUpdate">
            <summary>
            Prevents the <c>Selection</c> updating until the <c>EndUpdate</c> method is called.
            <seealso cref="M:QWhale.Editor.Selection.EndUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.EndUpdate">
            <summary>
            Re-enables selection updating turned off by calling <c>BeginUpdate</c> method.
            <seealso cref="M:QWhale.Editor.Selection.BeginUpdate"/>
            </summary>
            <returns>Number of update locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.DeleteLeft">
            <summary>
            Deletes one character left to the cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.DeleteRight">
            <summary>
            Deletes one character right to the cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.DeleteWordLeft">
            <summary>
            Deletes one word left to the cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.DeleteWordRight">
            <summary>
            Deletes one word right to the cursor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.DeleteLine">
            <summary>
            Deletes current line if no text selected; otherwise deletes selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.CutLine">
            <summary>
            Cuts current line to the clipboard if no text selected; otherwise cuts selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.NewLine">
            <summary>
            Inserts a line break at the current position of the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.NewLineAbove">
            <summary>
            Inserts a line break above the current position of the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.NewLineBelow">
            <summary>
            Inserts a line break below the current position of the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ProcessEscape">
            <summary>
            Processes escape presure: method deselects selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ProcessTab">
            <summary>
            Inserts new tab character or spaces if the selected text is empty; otherwise indents selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ProcessShiftTab">
            <summary>
            Moves current position to the previous tab stop if the selected text is empty; otherwise unindents selected text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ToggleOverWrite">
            <summary>
            Toggles the control's overwrite mode.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.InsertString(System.String)">
            <summary>
            Inserts given text to the control's content deleting selected text if needed.
            </summary>
            <param name="s">Text to insert.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.CharTransponse">
            <summary>
            Transposes character under the caret with the next character.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.WordTransponse">
            <summary>
            Transposes word under the caret with the next word.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.LineTransponse">
            <summary>
            Transposes line under the caret with the next line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.CanDrag(System.Drawing.Point)">
            <summary>
            Indicates whether control can drag selected text.
            </summary>
            <param name="position">Specifies destination position of drag operation.</param>
            <returns>True if the control can drag selected text; otherwise false.</returns>
            <remarks>Control must not be in the read-only state to allow dragging selected text.</remarks>
        </member>
        <member name="M:QWhale.Editor.Selection.DragTo(System.Drawing.Point,System.Boolean)">
            <summary>
            Moves or copies selected text to the specified position.
            </summary>
            <param name="position">Position to move or copy.</param>
            <param name="deleteOrigin">Indicates whether method should move or copy selected text.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.ChangeBlock(QWhale.Editor.StringEvent)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.ChangeBlock(QWhale.Editor.TextUndoEvent)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.ChangeBlock(QWhale.Editor.StringEvent,System.Boolean,System.Boolean)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selested region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.ChangeBlock(QWhale.Editor.TextUndoEvent,System.Boolean,System.Boolean)">
            <summary>
            Changes selected text by applying specified event to every line in the selected text.
            </summary>
            <param name="action">Specifies action to execute.</param>
            <param name="changeIfEmpty">Indicates that action should be performed for current line if selection is empty.</param>
            <param name="extendFirstLine">Specifies that action should applied to whole lines in the selested region rather than to the selected portion of the line.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectionToTextPoint(System.Drawing.Point)">
            <summary>
            Converts given selection coordinate to the text coordinate.
            </summary>
            <param name="position">The selection coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in text coordinates.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.TextToSelectionPoint(System.Drawing.Point)">
            <summary>
            Converts given text coordinate to the selection coordinate.
            </summary>
            <param name="position">The text coordinate Point to convert.</param>
            <returns>Point that represents the converted position, in selection coordinates.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.IsPosInSelection(System.Drawing.Point)">
            <summary>
            Indicates whether given position located within the selected region.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.IsPosInSelection(System.Int32,System.Int32)">
            <summary>
            Indicates whether given position located within the selected region.
            </summary>
            <param name="x">Horizontal coordinate of the position to check.</param>
            <param name="y">Vertical coordinate of the position to check.</param>
            <returns>True if position in selected region; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.GetSelectionForLine(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Sets left and right index of the first and last selected characters within specified line.
            </summary>
            <param name="index">Index of line within Edit control content.</param>
            <param name="left">Receives index of the first selected character.</param>
            <param name="right">Receives index of the last selected character.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectedCount">
            <summary>
            Returns amount of the lines being selected.
            </summary>
            <returns>Number of selected lines.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectedString(System.Int32)">
            <summary>
            Returns selected part of string at specified position.
            </summary>
            <param name="index">Specifies line index.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectCurrentWord">
            <summary>
            Tries to select word nearest to the current position in the control.
            </summary>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectNextWord">
            <summary>
            Select word next to the current word.
            </summary>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Selection.SetSelectedText(System.String,QWhale.Editor.SelectionType)">
            <summary>
            Replaces <c>SelectedText</c> by specified text.
            </summary>
            <param name="text">New value of <c>SelectedText</c>.</param>
            <param name="selType">New type of selection.</param>            
        </member>
        <member name="M:QWhale.Editor.Selection.SetSelectedText(System.String,QWhale.Editor.SelectionType,System.Boolean)">
            <summary>
            Replaces <c>SelectedText</c> by specified text.
            </summary>
            <param name="text">New value of <c>SelectedText</c>.</param>
            <param name="selType">New type of selection.</param>
            <param name="moveToEnd">Specifies whether cursor should move to the end of the selection.</param>
        </member>
        <member name="M:QWhale.Editor.Selection.SelectedData(System.Int32)">
            <summary>
            Returns selected part of color information at specified position.
            </summary>
            <param name="index">Specifies line index.</param>
            <returns>Selected part of specified string.</returns>
            <remarks>If selection is empty method returns null.</remarks>
        </member>
        <member name="M:QWhale.Editor.Selection.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ResetAllowedSelectionMode">
            <summary>
            Resets the <c>AllowedSelectionMode</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ResetInActiveForeColor">
            <summary>
            Resets the <c>InActiveForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ResetInActiveBackColor">
            <summary>
            Resets the <c>InActiveBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Selection.ResetBorderColor">
            <summary>
            Resets the <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.IsEmpty">
            <summary>
            Indicates whether nothing is selected.
            </summary>
            <returns>True if empty; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Selection.SelectionStart">
            <summary>
            Gets or sets the position of the first selected character while text considered as a single string.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.SelectionLength">
            <summary>
            Gets or sets length of the <c>SelectedText</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.SelectionRect">
            <summary>
            Gets or sets rectangular area indicating selected text of the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.SelectionType">
            <summary>
            Gets or sets type of current selection.
            <seealso cref="T:QWhale.Editor.SelectionType"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.SelectedText">
            <summary>
            Gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.Options">
            <summary>
            Gets or sets options determining behaviour or the <c>Selection</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.ForeColor">
            <summary>
            Gets or sets a foreground color of the <c>SelectedText</c> when owner control has input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.BackColor">
            <summary>
            Gets or sets a background color of the <c>SelectedText</c> when owner control has input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.InActiveForeColor">
            <summary>
            Gets or sets a foreground color of the <c>SelectedText</c> when owner control does not have input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.BorderColor">
            <summary>
            Gets or sets a color of the selection border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.InActiveBackColor">
            <summary>
            Gets or sets a background color of the <c>SelectedText</c> when owner control does not have input focus.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.AllowedSelectionMode">
            <summary>
            Gets or sets type of selection allowed to Edit control content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.SelectionState">
            <summary>
            Gets or sets a value indicates state of the selected text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.SelectedColorData">
            <summary>
            Gets or sets strings that corresponds to selected part of the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Selection.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>Selection</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Editor.Selection.SelectionChanged">
            <summary>
            Occurs when selection bounds are changed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.RulerEventArgs">
            <summary>
            Provides data for the <c>EditRuler.Change</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerEventArgs.Object">
            <summary>
            Source of the ruler event.
            </summary>
        </member>
        <member name="M:QWhale.Editor.RulerEventArgs.#ctor(System.Object)">
            <summary>
            Initializes a new instance of the <c>RulerEventArgs</c> class with specified parameters.
            </summary>
            <param name="obj">The source of the event.</param>
        </member>
        <member name="T:QWhale.Editor.OutlineEventArgs">
            <summary>
            Provides data for the <c>AutoCorrectEvent</c> handler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.OutlineEventArgs.#ctor(System.Int32)">
            <summary>
            Initialized OutlineEventArgs class with specified line index.
            </summary>
            <param name="line"></param>
        </member>
        <member name="F:QWhale.Editor.OutlineEventArgs.Line">
            <summary>
            Represents line to be collapsed or expanded.
            </summary>
        </member>
        <member name="F:QWhale.Editor.OutlineEventArgs.CanExpand">
            <summary>
            Indicates that outline section at given line can be expanded.
            </summary>
        </member>
        <member name="F:QWhale.Editor.OutlineEventArgs.CanCollapse">
            <summary>
            Indicates that outline section at given line can be collapsed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.OutlineEvent">
            <summary>
            Represents a method that will handle the <c>IOutlining.Expanding</c> and <c>IOutlining.Collapsing</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>AutoCorrectEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Editor.TextSource.NotifyState">
            <summary>
            Represents the last changes to the text stored in the text source.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.PositionChanged">
            <summary>
            Current position in the text was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.CountChanged">
            <summary>
            Amount of lines in the text was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.OverWriteChanged">
            <summary>
            Overwrite mode was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.ModifiedChanged">
            <summary>
            Modified state was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.SyntaxChanged">
            <summary>
            Syntax scheme or Lexer was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.ReadOnlyChanged">
            <summary>
            ReadOnly state was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.BlockChanged">
            <summary>
            Block of text was changed and needs invalidating.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.BookMarkChanged">
            <summary>
            Bookmark was set or removed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.IncrementalSearchChanged">
            <summary>
            Incremental search state was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.SearcRectChanged">
            <summary>
            Rectangle that holds last found text was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.Undo">
            <summary>
            Undo operation was performed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.Edit">
            <summary>
            Text was edited.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.Modified">
            <summary>
            Modified state was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.Outline">
            <summary>
            Outline section was collapsed or expanded.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.WordWrap">
            <summary>
            Lines were wrapped.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.GotoBookMark">
            <summary>
            Position of the text was changed due to moving to the bookmark.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.SelectBlock">
            <summary>
            Block of text was selected or unselected.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.FirstSearchChanged">
            <summary>
            <c>SyntaxEdit.FirstSearch</c> property was changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.CenterLine">
            <summary>
            <c>SyntaxEdit</c> should center current line if it's not in view
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.TextParsed">
            <summary>
            Text was completely parsed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.SmartFormat">
            <summary>
            Selection was formatted 
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.StringsChanged">
            <summary>
            Strings was changed programmaticaly
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.PageOptionsChanged">
            <summary>
            Page options was changed. 
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.ScrollingOptionsChanged">
            <summary>
            Scrolling options was changed. 
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.ScrollingOriginChanged">
            <summary>
            Window was scrolled. 
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.SelectionOptionsChanged">
            <summary>
            Selection options was changed. 
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.SelectionChanged">
            <summary>
            Selection options was changed. 
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NotifyState.SelectedTextChanged">
            <summary>
            Selected text was changed. 
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextNotify">
            <summary>
            Represents properties and methods to perform Text Source notification.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextNotify.BeginUpdate(QWhale.Editor.TextSource.UpdateReason)">
            <summary>
            When implemented by a class, prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <param name="reason">Reason of the source state updating.</param>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextNotify.LinesChanged(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextNotify.LinesChanged(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
            <param name="modified">Indicates that content of specified lines is modified.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextNotify.State">
            <summary>
            When implemented by a class, gets or sets last changes to the text stored in the text source.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextNotify.FirstChanged">
            <summary>
            When implemented by a class, represents index of the first changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextNotify.LastChanged">
            <summary>
            When implemented by a class, represents index of the last changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextNotify.SelectBlockRect">
            <summary>
            When implemented by a class, represents a rectangular block of selected text.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IBookMark">
            <summary>
            Represents properties and methods to store individual boomark within Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMark.Assign(QWhale.Editor.TextSource.IBookMark)">
            <summary>
            When implemented by a class, copies the contents of another <c>IBookMark</c> object.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBookMark.Line">
            <summary>
            When implemented by a class, gets Y-coordinate of the position (index of line) within the Edit control's text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBookMark.Pos">
            <summary>
            When implemented by a class, gets X-coordinate of the bookmark position (position of character in a line) within the control's text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBookMark.Index">
            <summary>
            When implemented by a class, gets an integer value that specifies ordinal number of the bookmark.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBookMark.Position">
            <summary>
            When implemented by a class, gets or sets position of the bookmark within the control's text. Y-Coordinate represents index of line and X-Coordinate - index of character in this line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBookMark.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>IBookMark</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.StringItem">
            <summary>
            Represents string-like object with extended properties.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.StringItem.SetTextStyle(System.Int16[]@,System.Int32,System.Int32,QWhale.Syntax.TextStyle)">
            <summary>
            Sets text style to text fragment.
            </summary>
            <param name="textData">Retrieves style inforamtion.</param>
            <param name="start">Specifies the first character in the string.</param>
            <param name="len">Specifies number of characters in the string.</param>
            <param name="style">Specifies style to set.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.StringItem.ClearTextStyle(System.Int16[]@,System.Int32,System.Int32,QWhale.Syntax.TextStyle)">
            <summary>
            Removes style information from specified part of string.
            </summary>
            <param name="textData">Retrieves style inforamtion.</param>
            <param name="start">Specifies the first character in string to remove.</param>
            <param name="len">Specifies number of characters in string to remove.</param>
            <param name="style">Specifies <c>TextStyle</c> to remove.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.StringItem.Split(System.String)">
            <summary>
            Converts specified text to string array.
            </summary>
            <param name="text">String to convert.</param>
            <returns>String array representation of given text.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.StringItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>StringItem</c> class with specified string.
            </summary>
            <param name="s">Specifies string content of this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.StringItem.SetTextStyle(System.Int32,System.Int32,QWhale.Syntax.TextStyle)">
            <summary>
            Sets style information to specified part of string.
            </summary>
            <param name="start">Specifies the first character in string to set.</param>
            <param name="len">Specifies number of characters in string to set.</param>
            <param name="style">Specifies <c>TextStyle</c> to set.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.StringItem.ClearTextStyle(System.Int32,System.Int32,QWhale.Syntax.TextStyle)">
            <summary>
            Removes style information from specified part of string.
            </summary>
            <param name="start">Specifies the first character in string to remove.</param>
            <param name="len">Specifies number of characters in string to remove.</param>
            <param name="style">Specifies <c>TextStyle</c> to remove.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.StringItem.TextStyleAt(System.Int32)">
            <summary>
            Retrieves style information from <c>IStringItem</c>.
            </summary>
            <param name="pos">Specifies position in <c>IStringItem</c> to obtain style information.</param>
            <returns><c>TextStyle</c> at specified position.</returns>
        </member>
        <member name="P:QWhale.Editor.TextSource.StringItem.String">
            <summary>
            Gets or sets string content of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.StringItem.TextData">
            <summary>
            Gets or sets information of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.StringItem.State">
            <summary>
            Gets or sets current state of the <c>IStringItem</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.StringItem.LexState">
            <summary>
            Gets or sets index of lexical state at item end.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.StringItem.PrevLexState">
            <summary>
            Gets or sets index of lexical state at item start.
            </summary>
        </member>
        <member name="T:QWhale.Editor.DrawStage">
            <summary>
            DrawState is used to specify a stage in the custom drawing process.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawStage.Before">
            <summary>
            After painting.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawStage.After">
            <summary>
            Before painting.
            </summary>
        </member>
        <member name="T:QWhale.Editor.DrawState">
            <summary>
            DrawState is used to specify a custom drawing state, including information about elements of the control currently drawn.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.Control">
            <summary>
            Entire control is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.Text">
            <summary>
            Text fragment is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.Selection">
            <summary>
            Text currently drawn is selected.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.WhiteSpace">
            <summary>
            WhiteSpace is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.LineHighlight">
            <summary>
            Line highlighter is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.LineSeparator">
            <summary>
            Line separator is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.LineBookMark">
            <summary>
            Line bookmark is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.Brace">
            <summary>
            Brace is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.BeyondEol">
            <summary>
            Space after end of line is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.BeyondEof">
            <summary>
            Space after end of file is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.Gutter">
            <summary>
            Gutter area is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.GutterImage">
            <summary>
            Gutter bookmark or other gutter image is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.BookMark">
            <summary>
            Bookmark is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.LineNumber">
            <summary>
            Line number are currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.OutlineArea">
            <summary>
            Outline area is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.OutlineImage">
            <summary>
            Outline image (plus/minus button) is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.OutlineButton">
            <summary>
            Outline button is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.LineModificator">
            <summary>
            Line modificator is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.Spelling">
            <summary>
            Mispelled wavy line is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.SyntaxError">
            <summary>
            Syntax error wavy line is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.Page">
            <summary>
            Edit page is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.PageHeader">
            <summary>
            Page header is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.PageBorder">
            <summary>
            Page border is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.LineStyle">
            <summary>
            Line Style is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.CodeSnippet">
            <summary>
            Code snippet is currently drawing.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawState.UserMargin">
            <summary>
            User margin is currently drawing.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ISyntaxPaint">
            <summary>
            Represents properties and methods, used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.PaintSyntax(QWhale.Common.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Point,System.Boolean)">
            <summary>
            When implemented by a class, perform syntax painting of the control on the graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies the first line of content to paint.</param>
            <param name="endLine">Specifies the last line of content to paint.</param>
            <param name="position">The Point value that specifies start position to draw content from.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="location">The Point value that specifies start position to draw page from.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, measures part of the string given at by its Index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32)">
            <summary>
            When implemented by a class, measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            When implemented by a class, measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.GetFontColor(System.Drawing.Color,QWhale.Syntax.TextStyle)">
            <summary>
            When implemented by a class, retrieves font color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.GetFontStyle(System.Drawing.FontStyle,QWhale.Syntax.TextStyle)">
            <summary>
            When implemented by a class, retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.GetLexStyle(System.Int32,QWhale.Syntax.TextStyle@)">
            <summary>
            When implemented by a class, retrieves lex state corrsponding to given parser style.
            </summary>
            <param name="style">Index of parser style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>LexStyle by its index</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.EqualStyles(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, indicates whehter given styles are equal.
            </summary>
            <param name="style1">First style to compare.</param>
            <param name="style2">Second style to compare.</param>
            <param name="useColors">Indicate whehter colors of the styles are assumed.</param>
            <returns>True if styles are equal; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.OnCustomDraw(QWhale.Common.IPainter,System.Drawing.Rectangle,QWhale.Editor.DrawStage,QWhale.Editor.DrawState,QWhale.Editor.IDrawInfo)">
            <summary>
            When implemented by a class, raises an <c>CustomDraw</c> event.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="stage">Specifies whether this method called before or after painting.</param>
            <param name="state">Specifies part of control to draw.</param>
            <param name="info">Full information about drawing text fragment.</param>
            <returns>True if user handles this event; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.ResetDisableColorPaint">
            <summary>
            When implemented by a class, resets the <c>DisableColorPaint</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ISyntaxPaint.ResetDisableSyntaxPaint">
            <summary>
            When implemented by a class, resets the <c>DisableSyntaxPaint</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxPaint.DisableColorPaint">
            <summary>
            When implemented by a class, gets or sets a value indicating whether control uses colors to paint its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxPaint.DisableSyntaxPaint">
            <summary>
            When implemented by a class, gets or sets a value indicating whether Edit control uses lexical colors/styles to paint its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ISyntaxPaint.Lexer">
            <summary>
            When implemented by a class, gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ISyntaxPaint.CustomDraw">
            <summary>
            When implemented by a class, occurs when control draws its content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IOutlining">
            <summary>
            Represents additional properties and methods that affects appearance and behaviour of outline sections within Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ICollapsable">
            <summary>
            Represents properties and methods to affects appearance and behaviour of outline sections within Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Outline(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text substituting collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section and with specific text substituting  collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies first line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            When implemented by a class, creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.UnOutline(System.Drawing.Point)">
            <summary>
            When implemented by a class, removes outlined section at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.UnOutline(System.Int32)">
            <summary>
            When implemented by a class, removes all outline sections containing the given line.
            </summary>
            <param name="index">Specifies line in the text.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.UnOutline">
            <summary>
            When implemented by a class, removes all outlined sections from outline collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.GetOutlineRange(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns outline section, which represents text substituting outlined section and level of outline nesting at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.GetOutlineRange(System.Int32)">
            <summary>
            When implemented by a class, returns outline section, which represents text substituting outlined section and level of outline nesting at the specific line.
            </summary>
            <param name="index">Index of line in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.IsExpanded(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the outlined text at the specified line is expanded.
            </summary>
            <param name="index">Index of the line to test.</param>
            <returns>True if expanded; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.IsCollapsed(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the outlined text at the specified line is collapsed.
            </summary>
            <param name="index">Index of the line to test.</param>
            <returns>True if collapsed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.IsVisible(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.IsVisible(System.Int32)">
            <summary>
            When implemented by a class, indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies index of line in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Collapse(System.Int32)">
            <summary>
            When implemented by a class, collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.Expand(System.Int32)">
            <summary>
            When implemented by a class, expands outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.EnsureExpanded(System.Int32)">
            <summary>
            When implemented by a class, makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies position of the line in the text.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.EnsureExpanded(System.Drawing.Point)">
            <summary>
            When implemented by a class, makes all outline sections containing specified position expanded.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.FullExpand">
            <summary>
            When implemented by a class, expands all outlining sections.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.FullExpand(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            When implemented by a class, expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.FullCollapse">
            <summary>
            When implemented by a class, collapses all outlining sections.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.FullCollapse(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            When implemented by a class, collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.ToggleOutlining">
            <summary>
            When implemented by a class, toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.ToggleOutlining(System.Collections.Generic.IList{QWhale.Common.IRange},QWhale.Syntax.IOutlineRange)">
            <summary>
            When implemented by a class, toggles expanded state for given <c>IOutlineRange</c> collection.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to toggle.</param>
            <param name="range"><c>IOutlineRange</c> object representing current outline section. The method expands or collapses ranges depending on collapsed state of the Range</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.CollapseToDefinitions">
            <summary>
            When implemented by a class, collapses and expandes some outline section to get a quick overall view of the content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.GetOutlineHint(QWhale.Syntax.IOutlineRange)">
            <summary>
            When implemented by a class, returns string that appears in the hint window when mouse pointer is over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object holding the hint.</param>
            <returns>Hint string.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Int32)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifles list to fill.</param>
            <param name="index">Specifies index of line in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Drawing.Point)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="position">Specifies position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Specifies start position in the text.</param>
            <param name="endPoint">Specifies end position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            When implemented by a class, fills list specified by ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.SetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            When implemented by a class, updates <c>IOutlineRange</c> collection from given list of ranges. 
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.SetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Boolean)">
            <summary>
            When implemented by a class, updates <c>IOutlineRange</c> collection from given list of ranges. 
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.CanExpand(System.Int32)">
            <summary>
            When implemented in a class, returns boolean value indicating that oultine section at given line can be expanded.
            </summary>
            <param name="line"></param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.CanCollapse(System.Int32)">
            <summary>
            When implemented in a class, returns boolean value indicating that oultine section at given line can be collapsed.
            </summary>
            <param name="line"></param>
            <returns>True if section can be collapsed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.ResetAllowOutlining">
            <summary>
            When implemented by a class, resets <c>AllowOutlining</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ICollapsable.ResetOutlineOptions">
            <summary>
            When implemented by a class, resets <c>OutlineOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ICollapsable.CollapsedCount">
            <summary>
            When implemented by a class, returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ICollapsable.AllowOutlining">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outlining enabled.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ICollapsable.OutlineOptions">
            <summary>
            When implemented by a class, gets or sets outlining options.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ICollapsable.Expanding">
            <summary>
            When implemented by a class, occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ICollapsable.Collapsing">
            <summary>
            When implemented by a class, occurs when user attempts collapse outline section.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IOutlining.Assign(QWhale.Editor.IOutlining)">
            <summary>
            When implemented by a class, copies the contents from another <c>IOutlining</c> object.
            </summary>
            <param name="source">Specifies <c>IOutlining</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IOutlining.OutlineText">
            <summary>
            When implemented by a class, tries to perform lexical analysis of entire text to create outline sections based on results of this analysis.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IOutlining.UnOutlineText">
            <summary>
            When implemented by a class, removes all outline section from outline collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IOutlining.ResetOutlineColor">
            <summary>
            When implemented by a class, resets the <c>OutlineColor</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IOutlining.OutlineColor">
            <summary>
            When implemented by a class, gets or sets color that is used to draw outline button.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IOutlining.UseRoundRect">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether outlinig butons should be drawn with rounded corners.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IOutlining.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IOutlining
            </summary>
        </member>
        <member name="P:QWhale.Editor.IOutlining.AllowOutlining">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outlining enabled.
            Added to provide a workaround for C++ CodeDOM parser
            </summary>
        </member>
        <member name="P:QWhale.Editor.IOutlining.OutlineOptions">
            <summary>
            When implemented by a class, gets or sets outlining options.
            Added to provide a workaround for C++ CodeDOM parser
            </summary>
        </member>
        <member name="T:QWhale.Editor.GutterOptions">
            <summary>
            Defines gutter appearance and behaviour displayed at the left size of the Edit control.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.GutterOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.GutterOptions.PaintLineNumbers">
            <summary>
            Specifies that numbers of lines should be drawn.
            </summary>
        </member>
        <member name="F:QWhale.Editor.GutterOptions.PaintLinesOnGutter">
            <summary>
            Specifies that numbers of lines should be drawn at the gutter area rather than beyond the gutter.
            </summary>
        </member>
        <member name="F:QWhale.Editor.GutterOptions.PaintLinesBeyondEof">
            <summary>
            Specifies that numbers of lines should be drawn beyond end of file.
            </summary>
        </member>
        <member name="F:QWhale.Editor.GutterOptions.PaintBookMarks">
            <summary>
            Specifies that bookmarks should be drawn.
            </summary>
        </member>
        <member name="F:QWhale.Editor.GutterOptions.PaintLineModificators">
            <summary>
            Specifies that line modificators (color stitch that indicates that the line content is modified, unmodified or saved) should be drawn.
            </summary>
        </member>
        <member name="F:QWhale.Editor.GutterOptions.PaintUserMargin">
            <summary>
            Specifies that user margin (allowing to draw additional information) should be drawn.
            </summary>
        </member>
        <member name="F:QWhale.Editor.GutterOptions.SelectLineOnClick">
            <summary>
            Specifies that entire line should be selected while user holds "Shift" key and left clicks mouse on gutter.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IGutter">
            <summary>
            Represents properties and methods to operate with gutter at the left side of the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.Assign(QWhale.Editor.IGutter)">
            <summary>
            When implemented by a class, copies the contents from another <c>IGutter</c> object.
            </summary>
            <param name="source">Specifies <c>IGutter</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IGutter.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle,System.Int32)">
            <summary>
            When implemented by a class, draws gutter on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of gutter to draw.</param>
            <param name="startLine">the first display line to draw</param>
        </member>
        <member name="M:QWhale.Editor.IGutter.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws gutter on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of gutter to draw.</param>
        </member>
        <member name="M:QWhale.Editor.IGutter.GetHitTest(System.Int32,System.Int32,QWhale.Editor.IHitTestInfo)">
            <summary>
            When implemented by a class, fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.IGutter.InvalidateLineNumberArea(System.Boolean)">
            <summary>
            When implemented by a class, invalidates line number area if it needs to be altered.
            <param name="updateWidth">Specifies whether line number width needs to be recalcuated.</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.OnClick(System.EventArgs)">
            <summary>
            When implemented by a class, raises the <c>Click</c> event.
            </summary>
            <param name="e">The EventArgs that contains data to this event.</param>
        </member>
        <member name="M:QWhale.Editor.IGutter.OnDoubleClick(System.EventArgs)">
            <summary>
            When implemented by a class, raises the <c>DoubleClick</c> event.
            </summary>
            <param name="e">The EventArgs that contains data to this event.</param>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetBrushColor">
            <summary>
            When implemented by a class, resets the <c>Width</c> to the default value.
            </summary>
            <summary>
            When implemented by a class, resets the <c>BrushColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetPenColor">
            <summary>
            When implemented by a class, resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetVisible">
            <summary>
            When implemented by a class, resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineNumbersStart">
            <summary>
            When implemented by a class, resets the <c>LineNumbersStart</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineNumbersLeftIndent">
            <summary>
            When implemented by a class, resets the <c>LineNumbersLeftIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineNumbersRightIndent">
            <summary>
            When implemented by a class, resets the <c>LineNumbersRightIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineNumbersForeColor">
            <summary>
            When implemented by a class, resets the <c>LineNumbersForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineNumbersBackColor">
            <summary>
            When implemented by a class, resets the <c>LineNumbersBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineNumbersAlignment">
            <summary>
            When implemented by a class, resets the <c>LineNumbersAlignment</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetOutliningLeftIndent">
            <summary>
            When implemented by a class, resets the <c>OutliningLeftIndentt</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetOutliningRightIndent">
            <summary>
            When implemented by a class, resets the <c>OutliningRightIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetBookMarkImageIndex">
            <summary>
            When implemented by a class, resets the <c>BookMarkImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetWrapImageIndex">
            <summary>
            When implemented by a class, resets the <c>WrapImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetDrawLineBookmarks">
            <summary>
            When implemented by a class, resets the <c>DrawLineBookmarks</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineBookmarksColor">
            <summary>
            When implemented by a class, resets the <c>LineBookmarksColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetShowBookmarkHints">
            <summary>
            When implemented by a class, resets the <c>ShowBookmarkHints</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineModificatorChangedColor">
            <summary>
            When implemented by a class, resets the <c>LineModificatorChangedColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetLineModificatorSavedColor">
            <summary>
            When implemented by a class, resets the <c>LineModificatorSavedColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetWidth">
            <summary>
            When implemented by a class, resets the <c>Width</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetUserMarginWidth">
            <summary>
            When implemented by a class, resets the <c>UserMarginWidth</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetUserMarginForeColor">
            <summary>
            When implemented by a class, resets the <c>UserMarginForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetUserMarginBackColor">
            <summary>
            When implemented by a class, resets the <c>UserMarginBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IGutter.ResetUserMarginText">
            <summary>
            When implemented by a class, resets the <c>UserMarginText</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.Width">
            <summary>
            When implemented by a class, gets or sets the width of the gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.DisplayWidth">
            <summary>
            When implemented by a class, gets display width of the gutter, including line numbers and outlining area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.DisplayArea">
            <summary>
            When implemented by a class, gets display area of the gutter, including line numbers and outlining area, 
            but not including line modificators if they're painted outside gutter
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.Brush">
            <summary>
            When implemented by a class, gets or sets a Brush object used to paint gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.Pen">
            <summary>
            When implemented by a class, gets or sets a Pen object used to paint gutter line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.BrushColor">
            <summary>
            When implemented by a class, gets or sets background color of the gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.PenColor">
            <summary>
            When implemented by a class, gets or sets color of the gutter line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the gutter area is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.Rect">
            <summary>
            When implemented by a class, gets the rectangle that represents gutter area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineNumbersStart">
            <summary>
            When implemented by a class, gets or sets index of the first line being painted on the gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineNumbersLeftIndent">
            <summary>
            When implemented by a class, gets or sets line numbers indentation from the left gutter border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineNumbersRightIndent">
            <summary>
            When implemented by a class, gets or sets line numbers indentation from the right gutter border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineNumbersForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the line numbers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineNumbersBackColor">
            <summary>
            When implemented by a class, gets or sets background color of the line numbers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineNumbersAlignment">
            <summary>
            When implemented by a class, gets or sets line numbers alignment information.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.OutliningLeftIndent">
            <summary>
            When implemented by a class, gets or sets outlining indentation from the left gutter border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.OutliningRightIndent">
            <summary>
            When implemented by a class, gets or sets outlining indentation from the right gutter border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.Options">
            <summary>
            When implemented by a class, gets or sets a <c>GutterOptions</c> that determine gutter appearance and behaviour.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.Images">
            <summary>
            When implemented by a class, gets or sets an ImageList object that contains collection of images for gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.BookMarkImageIndex">
            <summary>
            When implemented by a class, gets or sets a value that specifies index of item in the image collection used to paint bookmark.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.WrapImageIndex">
            <summary>
            When implemented by a class, gets or sets a value that specifies index of item in the image collection used to paint special mark indicating the wrapped line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.DrawLineBookmarks">
            <summary>
            When implemented by a class, gets or sets a value indicating whether Edit control should draw triangle at bookmark position inside line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineBookmarksColor">
            <summary>
            When implemented by a class, gets or sets a color of the line bookmarks.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.ShowBookmarkHints">
            <summary>
            When implemented by a class, gets or sets a value indicating whether Edit control should display text describing bookmark in form of tooltip window when mouse pointer is over the gutter bookmark.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineModificatorChangedColor">
            <summary>
            When implemented by a class, gets or sets a color of the line modificators(color stitch that indicates that the line content is unmodified, modified or saved) in the modified state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.LineModificatorSavedColor">
            <summary>
            When implemented by a class, gets or sets a color of the line modificators(color stitch that indicates that the line content is unmodified, modified or saved) in the saved state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.UserMarginWidth">
            <summary>
            When implemented by a class, gets or sets the width of the user margin area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.UserMarginForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color for the user margin.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.UserMarginBackColor">
            <summary>
            When implemented by a class, gets or sets background color of the user margin.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.UserMarginText">
            <summary>
            When implemented by a class, gets or sets text of the user margin.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.MaxLineNumberLength">
            <summary>
            When implemented by a class, gets or sets maximum count of numbers in the line number.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IGutter.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IGutter
            </summary>
        </member>
        <member name="E:QWhale.Editor.IGutter.Click">
            <summary>
            When implemented by a class, occurs when the <c>IGutter</c> clicked.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IGutter.DoubleClick">
            <summary>
            When implemented by a class, occurs when the <c>IGutter</c> double-clicked.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IGutter.DrawUserMargin">
            <summary>
            When implemented by a class, occurs when user margin part of each line is drawing.
            </summary>
        </member>
        <member name="T:QWhale.Editor.RulerUnits">
            <summary>
            Defines units for the ruler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerUnits.Milimeters">
            <summary>
            Specifies that ruler marks are measured in milimeters.
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerUnits.Inches">
            <summary>
            Specifies that ruler marks are measured in inches.
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerUnits.Pixels">
            <summary>
            Specifies that ruler marks are measured in pixels.
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerUnits.Characters">
            <summary>
            Specifies that ruler marks are measured in characters.
            </summary>
        </member>
        <member name="T:QWhale.Editor.RulerOptions">
            <summary>
            Defines Edit ruler behaviour.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerOptions.Discrete">
            <summary>
            Specifies that ruler indents chages its position in discrete steps. 
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerOptions.AllowDrag">
            <summary>
            Allows dragging ruler indentations.
            </summary>
        </member>
        <member name="F:QWhale.Editor.RulerOptions.DisplayDragLine">
            <summary>
            Specifies dotted line to be displayed while ruler indentation being dragged.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditRuler">
            <summary>
            Represents properties and methods of Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditRuler.Assign(QWhale.Editor.IEditRuler)">
            <summary>
            When implemented by a class, copies the contents of another <c>IEditRuler</c> object.
            </summary>
            <param name="source">Specifies <c>IEditRuler</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IEditRuler.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditRuler.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditRuler.ResetUnits">
            <summary>
            When implemented by a class, resets the <c>Units</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditRuler.ResetIndentBackColor">
            <summary>
            When implemented by a class, resets the <c>IndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditRuler.SendToBack">
            <summary>
            When implemented by a class, sends the control to the back of the z-order.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.IndentBackColor">
            <summary>
            When implemented by a class, gets or sets background color of indentation parts of the ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.Vertical">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether ruler has vertical or horizontal direction.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.PageStart">
            <summary>
            When implemented by a class, gets or sets beginning of the page part of the ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.PageWidth">
            <summary>
            When implemented by a class, gets or sets width, in pixels between left and right indentations indicating width of the page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.RulerStart">
            <summary>
            When implemented by a class, gets or sets position, in pixels, of left indentation specifying start of the page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.RulerWidth">
            <summary>
            When implemented by a class, gets or sets ruler width.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.MarkWidth">
            <summary>
            When implemented by a class, gets or sets default distance between adjacent marks.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.Units">
            <summary>
            When implemented by a class, gets or sets ruler measurement units.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.Options">
            <summary>
            When implemented by a class, gets or sets <c>RulerOptions</c> determining ruler behaviour.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.IsDragging">
            <summary>
            When implemented by a class, indicates whether some of ruler indentation is in dragging state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditRuler.Anchor">
            <summary>
            When implemented by a class, gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IEditRuler.Change">
            <summary>
            When implemented by a class, occurs when some of ruler indentations has changed its position due to the dragging operation.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditBraceMatching">
            <summary>
            Represents extended properties and methods to handle matching braces within the Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IBraceMatching">
            <summary>
            Represents properties and methods to handle matching braces within the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, locates closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            When implemented by a class, locates closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, locates open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            When implemented by a class, locates open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.HighlightBraces">
            <summary>
            When implemented by a class, highlights braces containing caret  position.
            <seealso cref="M:QWhale.Editor.TextSource.IBraceMatching.UnhighlightBraces"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.UnhighlightBraces">
            <summary>
            When implemented by a class, unhighlights braces containing caret position.
            <seealso cref="M:QWhale.Editor.TextSource.IBraceMatching.HighlightBraces"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            When implemented by a class, temporary highlights all text within the area specified by rects.
            <seealso cref="M:QWhale.Editor.TextSource.IBraceMatching.TempUnhighlightBraces"/>
            </summary>
            <param name="rects">Specifies the area to highlight the text.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.TempUnhighlightBraces">
            <summary>
            When implemented by a class, cancels text highlighting turned on using <c>TempHighlightBraces</c>
            <seealso cref="M:QWhale.Editor.TextSource.IBraceMatching.TempHighlightBraces(System.Drawing.Rectangle[])"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.ResetBracesOptions">
            <summary>
            When implemented by a class, resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.ResetOpenBraces">
            <summary>
            When implemented by a class, resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBraceMatching.ResetClosingBraces">
            <summary>
            When implemented by a class, resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBraceMatching.BracesOptions">
            <summary>
            When implemented by a class, gets or sets options specifying appearance and behaviour of matching braces within Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBraceMatching.OpenBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBraceMatching.ClosingBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditBraceMatching.Assign(QWhale.Editor.IEditBraceMatching)">
            <summary>
            When implemented by a class, copies the contents from another <c>IEditBraceMatching</c> object.
            </summary>
            <param name="source">Specifies <c>IEditBraceMatching</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IEditBraceMatching.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditBraceMatching.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditBraceMatching.ResetFontStyle">
            <summary>
            When implemented by a class, resets the <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditBraceMatching.ResetUseRoundRect">
            <summary>
            When implemented by a class, resets the <c>UseRoundRect</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditBraceMatching.ForeColor">
            <summary>
            When implemented by a class, gets or sets a value that represents foreground color to draw matching braces.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditBraceMatching.BackColor">
            <summary>
            When implemented by a class, gets or sets a value that represents background color to draw matching braces.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditBraceMatching.FontStyle">
            <summary>
            When implemented by a class, gets or sets a FontStyle value that is used to draw matching braces.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditBraceMatching.UseRoundRect">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw rectangle around matching braces.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditBraceMatching.BracesOptions">
            <summary>
            When implemented by a class, gets or sets options specifying appearance and behaviour of matching braces within Edit control.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="P:QWhale.Editor.IEditBraceMatching.OpenBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing an open brace.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="P:QWhale.Editor.IEditBraceMatching.ClosingBraces">
            <summary>
            When implemented by a class, gets or sets an array of characters each one representing a closing brace.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="P:QWhale.Editor.IEditBraceMatching.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IEditBraceMatching
            </summary>
        </member>
        <member name="T:QWhale.Editor.PromptReplaceEventArgs">
            <summary>
            Provides data for the <c>PromptOnReplaceEvent</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PromptReplaceEventArgs.Text">
            <summary>
            Represents the text to replace.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PromptReplaceEventArgs.Handled">
            <summary>
            Represents a value indicating whether prompt on replace event is handled, disabling use default prompt dialog. By default this value is false.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PromptReplaceEventArgs.DialogResult">
            <summary>
            Represents dialog result for the prompt.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PromptReplaceEventArgs.YesToAll">
            <summary>
            Represent a value indicating "yes" answer to all rest prompts, prevents following prompts.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PromptReplaceEventArgs.#ctor(System.String,System.Boolean,System.Windows.Forms.DialogResult,System.Boolean)">
            <summary>
            
            </summary>
            <param name="text">The text to replace.</param>
            <param name="handled">Specifies whether prompt on replace event already handled.</param>
            <param name="dialogResult">Specifies dialog result for the prompt.</param>
            <param name="yesToAll">Specifies "yes" answer for all rest prompts.</param>
        </member>
        <member name="T:QWhale.Editor.PromptOnReplaceEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.PromptOnReplace</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>PromptReplaceEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Editor.TextSource.InnerTextSource">
            <summary>
            Represents internal text source for Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.TextSource">
            <summary>
            Represents class that provides interface between edited text and Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextSource">
            <summary>
            Represents properties and methods that provide interface between edited text and Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IUndo">
            <summary>
            Represents properties and methods to perform undo/redo operation with the text. 
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.Undo">
            <summary>
            When implemented by a class, performs the last undo operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.Undo(QWhale.Editor.TextSource.IUndoData)">
            <summary>
            When implemented by a class, performs the single undo operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.Redo">
            <summary>
            When implemented by a class, performs the last redo operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.CanUndo">
            <summary>
            When implemented by a class, indicating whether the undo operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.CanRedo">
            <summary>
            When implemented by a class, indicating whether the redo operation can be performed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.ClearUndo">
            <summary>
            When implemented by a class, clears list of undo operations.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.ClearRedo">
            <summary>
            When implemented by a class, clears list of redo operations.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.DisableUndo">
            <summary>
            When implemented by a class, disables recording of undo/redo operations.
            <seealso cref="M:QWhale.Editor.TextSource.IUndo.EnableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.EnableUndo">
            <summary>
            When implemented by a class, re-enables recording of undo/redo operations, that was turn of by calling <c>DisableUndo</c> method.
            <seealso cref="M:QWhale.Editor.TextSource.IUndo.DisableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.BeginUndoUpdate">
            <summary>
            When implemented by a class, allows to consider number of undo redo operations as single operation, until calling <c>EndUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.EndUndoUpdate">
            <summary>
            When implemented by a class, ends undo block, that was started by <c>BeginUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.LineIsModified(System.Int32)">
            <summary>
            When implemented by a class, indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.LineIsModified(System.Int32,System.Boolean@)">
            <summary>
            When implemented by a class, indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <param name="saved">Receives boolean value that indicates whether line was not changed since last saving.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.ResetUndoOptions">
            <summary>
            When implemented by a class, resets the <c>UndoOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.ResetUndoLimit">
            <summary>
            When implemented by a class, resets the <c>UndoLimit</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IUndo.AddUndo(QWhale.Editor.TextSource.UndoOperation,System.Object)">
            <summary>
            When implemented by a class, stores undo operation in the appropriate list.
            </summary>
            <param name="operation">Operation to store.</param>
            <param name="data">Data to store.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndo.UndoOptions">
            <summary>
            When implemented by a class, gets or sets options for undo and redo operations.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndo.UndoLimit">
            <summary>
            When implemented by a class, gets or sets a value that limits number of undo operations.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndo.UndoUpdateCount">
            <summary>
            When implemented by a class, keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndo.UndoList">
            <summary>
            When implemented by a class, provides an indexed access to undo data.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndo.RedoList">
            <summary>
            When implemented by a class, provides an indexed access to redo data.
            </summary>
        </member>
        <member name="E:QWhale.Editor.TextSource.IUndo.UndoEvent">
            <summary>
            When implemented by a class, occurs when undo/redo operation performed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IHyperText">
            <summary>
            Represetns methods to operate with hypertext sections within the text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IHyperText.IsHyperText(System.String)">
            <summary>
            When implemented by a class, indicates whether given text represents hypertest.
            </summary>
            <param name="text">Text to test.</param>
            <returns>True if given text represents hypertext; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IHyperText.ResetHighlightHyperText">
            <summary>
            When implemented by a class, resets <c>HighlightUrls</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IHyperText.HighlightHyperText">
            <summary>
            When implemented by a class, gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IHyperText.UrlTable">
            <summary>
            When implemented by a class, represents hash table containing hyper-text characters
            </summary>
        </member>
        <member name="E:QWhale.Editor.TextSource.IHyperText.HyperText">
            <summary>
            When implemented by a class, occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ISpelling">
            <summary>
            Represents properties and methods allowing check spelling of the text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ISpelling.IsWordCorrect(System.String)">
            <summary>
            When implemented by a class, checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ISpelling.ResetCheckSpelling">
            <summary>
            When implemented by a class, resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ISpelling.ResetSpellDelimiters">
            <summary>
            When implemented by a class, resets the <c>SpellDelimiters</c> to the defalut value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ISpelling.CheckSpelling">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ISpelling.HasSpelling">
            <summary>
            When implemented by a class, gets boolean value indicating that editor has external spell checker assigned
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ISpelling.SpellTable">
            <summary>
            When implemented by a class, represents a hash table containing delimiters
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ISpelling.SpellDelimiters">
            <summary>
            When implemented by a class, gets or sets an array of characters used as delimiters between words in the text when performing spelling check.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ISpelling.SpellDelimiterString">
            <summary>
            When implemented by a class, gets or sets <c>SpellDelimiters</c> as a single string.
            </summary>
        </member>
        <member name="E:QWhale.Editor.TextSource.ISpelling.WordSpell">
            <summary>
            When implemented by a class, occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextParsing">
            <summary>
            Represents properties and methods to perform Text Source parsing.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.SetLastParsed(System.Int32)">
            <summary>
            When implemented by a class, updates the last parsed line and resets first changed line to it's default value.
            </summary>
            <param name="index">New value of the last parsed line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.ParseString(System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis of the specified string.
            </summary>
            <param name="index">Index of line to parse.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.ParseStrings(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis specified strings.
            </summary>
            <param name="first">Index of the first line to parse.</param>
            <param name="last">Index of the last line to parse.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.ParseToString(System.Int32)">
            <summary>
            When implemented by a class, perform lexical analysis of specified strings.
            </summary>
            <param name="index">Index of the last string to parse.</param>
            <remarks>Method parses string collection from last parsed string to the string specified by Index parameter.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedQuickInfoTips">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can obtain short description for syntax tokens within its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedParse">
            <summary>
            When implemented by a class, indicates whether syntax parsing can be performed for the text, or some of formatting text elements, such as urls or braces, should be highlighted.
            </summary>
            <returns>True if need to perform syntax parsing; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedFormatText">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can to format its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedOutlineText">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can outline its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedAutoComplete">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> should try to autocomplete statements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedReparseTextOnLineChange">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> should repace text when changing the current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedFormatTextOnLineChange">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> should format spaces and case when changing the current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedCodeCompletion">
            <summary>
            When implemented by a class, indicates whether <c>ITextSource</c> can provide code completion operation for its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.NeedCodeCompletionTabs(QWhale.Syntax.CodeCompletionType)">
            <summary>
            When implemented by a class, indicates code completion content can be filtered based on its prioerty.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.ProcessAutoComplete(System.String@)">
             <summary>
             When implemented by a class, inserts end-of-block code fragment if needed.
             </summary>
             <param name="code">code fragment to be inserted</param>
            <returns>true if end-of-block is inserted; otherwise false</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.FormatText">
            <summary>
            When implemented by a class, formats and outlines <c>TextSource</c> text using attached <c>Lexer</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextParsing.FormatText(System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, formats and outlines <c>TextSource</c> text using attached <c>Lexer</c>.
            <param name="immediate">Indicates if parsing should be performed without instantiating parser thread.</param>
            <param name="notify">Indicates if attached editors should be notified on reparsing</param>
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextParsing.Lexer">
            <summary>
            When implemented by a class, gets or sets object that can perform lexical analysis of the text source content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextParsing.ParserLine">
            <summary>
            When implemented in a class, gets the line currently parsed by the attached Lexer, when text source performs syntax parsing of the text.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextSnippets">
            <summary>
            Represents properties and methods to provide code snippet functionality.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSnippets.BeginUpdateSnippet">
            <summary>
            When implemented by a class, prevents the Edit control from updating snippets until the <c>EndUpdateSnippet</c> method is called.
            </summary>
            <returns>Number of snippet updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSnippets.EndUpdateSnippet">
            <summary>
            When implemented by a class, resumes updating snippets after updating is suspended by the <c>BeginUpdateSnippet</c> method.
            </summary>
            <returns>Number of snippet updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSnippets.HighlightCodeSnippets">
            <summary>
            When implemented by a class, highlights code snippets using appropriate style.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSnippets.UnhighlightCodeSnippets">
            <summary>
            When implemented by a class, removes highlighting from code snippets and clears snippet collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSnippets.GetCodeSnippetRangeAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, locates code snippet at specified position.
            </summary>
            <param name="position">Position to evaluate.</param>
            <returns><c>ICodeSnippetRange</c> at specified positon if succeed; otherwise null.</returns>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSnippets.CurrentSnippet">
            <summary>
            When implemented by a class, gets or sets current <c>ICodeSnippetRange</c> object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSnippets.CodeSnippets">
            <summary>
            When implemented by a class, gets or sets <c>ICodeSnippetRangeList</c> for Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextErrors">
            <summary>
            Represents properties and methods to handle syntax error collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextErrors.GetSyntaxErrorAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, gets syntax error at specified position.
            </summary>
            <param name="x">X-coordinate ot the position to evaluate.</param>
            <param name="y">Y-coordinate ot the position to evaluate.</param>
            <returns><c>ISyntaxError</c> object at specified position if succeed; otherwise null.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextErrors.HighlightSyntaxErrors">
            <summary>
            When implemented by a class, highlights syntax errors.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextErrors.UnhighlightSyntaxErrors">
            <summary>
            When implemented by a class, removes syntax errors highlighting.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextErrors.SyntaxErrors">
            <summary>
            When implemented by a class, represents a syntax errors collection.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextThread">
            <summary>
            Represents properties and methods allowing to execute actions in thread.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextThread.StartThread(QWhale.Editor.TextSource.ThreadProc,QWhale.Editor.TextSource.ThreadProc,QWhale.Editor.TextSource.ThreadProc,QWhale.Editor.TextSource.ThreadProc)">
            <summary>
            When implemented in a class, executes action in thread.
            </summary>
            <param name="action">Specifies action to execute in thread.</param>
            <param name="start">Specifies action to execute in thread.</param>
            <param name="end">Specifies action to execute when thread starts.</param>
            <param name="stop">Specifies action to execute when user aborts thread execution.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextThread.StopThread(QWhale.Editor.TextSource.ThreadProc,System.Boolean)">
            <summary>
            When implemented in a class, aborts executing action in thread.
            </summary>
            <param name="start">Specifies action to abort.</param>
            <param name="wait">Specifiles whether calling application should wait for background thread to finish execution.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSource.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSource.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            When implemented by a class, converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSource.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the index of character.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Index of character if the text considered as a single string.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSource.GetPositionFromCharIndex(System.Int32)">
            <summary>
            When implemented by a class, converts given character index to position as Point value.
            </summary>
            <param name="charIndex">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSource.CreateStringItem(System.String)">
            <summary>
            Create a new <c>IStrItem</c> object containing specified text.
            </summary>
            <param name="s">String that <c>IStrItem</c> contain.</param>
            <returns>Created <c>IStrItem</c> object.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextSource.Clear">
            <summary>
            When implemented by a class, clears content of the <c>TextSource</c>
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.FileName">
            <summary>
            When implemented by a class, gets or sets name of file that holds text source content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.Edits">
            <summary>
            When implemented by a class, represents a collection of <c>ISyntaxEdit</c> controls linked to the text source.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.Lines">
            <summary>
            When implemented by a class, represents the object that implements <c>ITextStrings</c> interface containing collection of strings determining text source content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.Text">
            <summary>
            When implemented by a class, gets or sets text source content as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.LineStyles">
            <summary>
            When implemented by a class, represents an object that implements <c>ILineStyles</c> interface hodling collection of line styles for this document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.BookMarks">
            <summary>
            When implemented by a class, represents an object that implements <c>IBookMarks</c> interface holding collection of <c>IBookMark</c> objects each determening particular bookmark within the text source.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.ActiveEdit">
            <summary>
            When implemented by a class, gets or sets an object that represent currently active (focused) <c>ISyntaxEdit</c> control linked to the text source.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.ThreadAction">
            <summary>
            When implemented by a class, returns method executed in thread when parsing.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextSource.SerializationInfo">
            <summary>
            Gets or sets an xml representation of ITextSource
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>TextSource</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.#ctor">
            <summary>
            Initializes a new instance of the <c>TextSource</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.GetCodeSnippetRangeAt(System.Drawing.Point)">
            <summary>
            Locates code snippet at specified position.
            </summary>
            <param name="position">Position to evaluate.</param>
            <returns><c>ICodeSnippetRange</c> at specified positon if succeed; otherwise null.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.HighlightCodeSnippets">
            <summary>
            Highlights code snippets using appropriate style.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.UnhighlightCodeSnippets">
            <summary>
            Removes highlighting from code snippets and clears snippet collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.BeginUpdateSnippet">
            <summary>
            Prevents the Edit control from updating snippets until the <c>EndUpdateSnippet</c> method is called.
            </summary>
            <returns>Number of snippet updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.EndUpdateSnippet">
            <summary>
            Resumes updating snippets after updating is suspended by the <c>BeginUpdateSnippet</c> method.
            </summary>
            <returns>Number of snippet updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.HighlightSyntaxErrors">
            <summary>
            Highlights syntax errors.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.UnhighlightSyntaxErrors">
            <summary>
            Removes syntax errors highlighting.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.GetSyntaxErrorAt(System.Int32,System.Int32)">
            <summary>
            Gets syntax error at specified position.
            </summary>
            <param name="x">X-coordinate ot the position to evaluate.</param>
            <param name="y">Y-coordinate ot the position to evaluate.</param>
            <returns><c>ISyntaxError</c> object at specified position if succeed; otherwise null.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetReadOnly">
            <summary>
            Resets the <c>ReadOnly</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetOverWrite">
            <summary>
            Resets the <c>OverWrite</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetModified">
            <summary>
            Resets the <c>Modified</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetIndentOptions">
            <summary>
            Resets the <c>IndentOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetMaxLength">
            <summary>
            Resets the <c>MaxLength</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetSingleLineMode">
            <summary>
            Resets the <c>SingleLineMode</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Insert(System.String)">
            <summary>
            Inserts the given string at the specified location.
            </summary>
            <param name="text">The text to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.InsertFromFile(System.String)">
            <summary>
            Inserts the file text content at the specified location.
            </summary>
            <param name="fileName">Name of file to load text from.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.DeleteRight(System.Int32)">
            <summary>
            Deletes a specified number of characters to the right of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.DeleteLeft(System.Int32)">
            <summary>
            Deletes a specified number of characters to the left of the active point.
            </summary>
            <param name="len">Specifies number of characters to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.InsertBlock(System.String)">
            <summary>
            Inserts the given string at the specified location.
            </summary>
            <param name="text">String to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.InsertBlock(System.String[])">
            <summary>
            Inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.InsertBlock(QWhale.Editor.TextSource.ITextStrings)">
            <summary>
            Inserts the given string collection at the specified location.
            </summary>
            <param name="strings">Collection of strings to insert.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.InsertBlock(System.String[],System.Boolean)">
            <summary>
            Inserts the given string array at the specified location.
            </summary>
            <param name="strings">String array to insert.</param>
            <param name="select">Specifies whether inserted block should be selected.</param>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.DeleteBlock(System.Int32)">
            <summary>
            Deletes a specified block of characters.
            </summary>
            <param name="len">Specifies length of block (number of characters) to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
            <remarks>The method deletes block of characters starting from the current position.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.DeleteBlock(System.Drawing.Rectangle)">
            <summary>
            Deletes a specified block of characters.
            </summary>
            <param name="rect">Specifies coordinates of characters block to delete.</param>
            <returns>True if method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.BreakLine">
            <summary>
            Breaks current line into two lines.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.UnBreakLine">
            <summary>
            Concatenates lines at current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NewLine">
            <summary>
            Inserts a line break at the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.IndentLine">
            <summary>
            Inserts spaces to the start of the current line. 
            Number of spaces is calculated from ident options or <c>SyntaxParser</c> if assigned.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NewLineAbove">
            <summary>
            Inserts a line break above the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NewLineBelow">
            <summary>
            Inserts a line break below the current position.
            </summary>
            <returns>True if the method succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LineIsReadonly(System.Int32)">
            <summary>
            Determines whether the given line is readonly.
            </summary>
            <param name="index">Line index.</param>
            <returns>True if the line at given index is readonly; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.PositionIsReadonly(System.Drawing.Point)">
            <summary>
            Determines whether the text at given position is readonly.
            </summary>
            <param name="position">Position in text coordinates.</param>
            <returns>True if the text can be edited at given position; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SetLineReadonly(System.Int32,System.Boolean)">
            <summary>
            Sets readonly state for the given line.
            </summary>
            <param name="index">Line index.</param>
            <param name="readOnly">Indicates readonly flag should be set or cleared.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Navigate(System.Int32,System.Int32)">
            <summary>
            Moves current position by the given offset value.
            </summary>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.MoveTo(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="x">Index of character in the line to move to.</param>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.MoveTo(System.Drawing.Point)">
            <summary>
            Moves the current position to the given position.
            </summary>
            <param name="position">New location of the current position.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.MoveToChar(System.Int32)">
            <summary>
            Moves the current position to the specified character in the current line.
            </summary>
            <param name="x">Index of character in the current line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.MoveToLine(System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.MoveToLine(System.Int32,System.Int32)">
            <summary>
            Moves the current position to the specified line.
            </summary>
            <param name="y">Index of line to move to.</param>
            <param name="linesAbove">Number of lines to leave above cursor.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ValidatePosition(System.Drawing.Point@)">
            <summary>
            Validates given position within control's text content.
            </summary>
            <param name="position">Position to validate.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.StorePosition(System.Drawing.Point)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.StorePosition(System.Drawing.Point,System.Boolean)">
            <summary>
            Stores given position to stored position list.
            </summary>
            <param name="position">Position to store.</param>
            <param name="endPos">Specifies whether position represents end of range</param>
            <returns>Index of stored position in list.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.RestorePosition(System.Int32)">
            <summary>
            Restores position from stored position list by given index.
            </summary>
            <param name="index">Index of position to restore.</param>
            <returns>Point value that represents stored position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.DisablePositionUpdate">
            <summary>
            Prevents notification of changing of caret position until 
            calling <c>EnablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.EnablePositionUpdate">
            <summary>
            Re-enables notification of changing of caret position 
            that was turn of by calling <c>DisablePositionUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetNavigateOptions">
            <summary>
            Resets the <c>NavigateOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SetNavigateOptions(QWhale.Editor.TextSource.NavigateOptions)">
            <summary>
            Sets navigating options without validating position.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.AddUndo(QWhale.Editor.TextSource.UndoOperation,System.Object)">
            <summary>
            Stores undo operation in the appropriate list.
            </summary>
            <param name="operation">Operation to store.</param>
            <param name="data">Data to store.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Undo">
            <summary>
            Performs the last undo operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Undo(QWhale.Editor.TextSource.IUndoData)">
            <summary>
            Performs the single undo operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Redo">
            <summary>
            Performs the last redo operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.CanUndo">
            <summary>
            Indicating whether the undo operation can be performed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.CanRedo">
            <summary>
            Indicating whether the redo operation can be performed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ClearUndo">
            <summary>
            Clears list of undo operations.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ClearRedo">
            <summary>
            Clears list of redo operations.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.DisableUndo">
            <summary>
            Disables recording of undo/redo operations.
            <seealso cref="M:QWhale.Editor.TextSource.TextSource.EnableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.EnableUndo">
            <summary>
            Re-enables recording of undo/redo operations, that was turn of by calling <c>DisableUndo</c> method.
            <seealso cref="M:QWhale.Editor.TextSource.TextSource.DisableUndo"/>
            </summary>
            <returns>Number of undo/redo operations locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.BeginUndoUpdate">
            <summary>
            Allows to consider number of undo redo operations as single operation, until calling <c>EndUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.EndUndoUpdate">
            <summary>
            Ends undo block, that was started by <c>BeginUndoUpdate</c> method.
            </summary>
            <returns>Number of undo updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LineIsModified(System.Int32)">
            <summary>
            Indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LineIsModified(System.Int32,System.Boolean@)">
            <summary>
            Indicates whether specified line already modified.
            </summary>
            <param name="index">Index of line to check.</param>
            <param name="saved">Receives boolean value that indicates whether line was not changed since last saving.</param>
            <returns>True is line modified; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetUndoOptions">
            <summary>
            Resets the <c>UndoOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetUndoLimit">
            <summary>
            Resets the <c>UndoLimit</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.AddNotifier(QWhale.Common.INotifier)">
            <summary>
            Adds new handler to respond for notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.RemoveNotifier(QWhale.Common.INotifier)">
            <summary>
            Exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Update">
            <summary>
            Updates an object state.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Notify">
            <summary>
            Notifies all notifiers about changing source state.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.BeginUpdate(QWhale.Editor.TextSource.UpdateReason)">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <param name="reason">Reason of the source state updating.</param>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LinesChanged(System.Int32,System.Int32)">
            <summary>
            Specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LinesChanged(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Specifies range of lines that was changed.
            </summary>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
            <param name="modified">Indicates that content of specified lines is modified.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Notification(System.Object,System.EventArgs)">
            <summary>
            Updates control's content according to parameters of notification.
            </summary>
            <param name="sender">The source of the notification.</param>
            <param name="e">An EventArgs that contains the event data.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadStream(System.IO.TextReader,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
            <param name="importer">Specifies importer to load content.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads content from the given file with specified importer.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves text content to the specific file with specific exporter.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Object to perform writing.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific exporter and encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Object to perform writing.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveStream(System.IO.TextWriter,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveStream(System.IO.Stream)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Object to perform writing.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Object to perform writing.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.IsHyperText(System.String)">
            <summary>
            Indicates whether given text represents hypertest.
            </summary>
            <param name="text">Text to test.</param>
            <returns>True if given text represents hypertext; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetHighlightHyperText">
            <summary>
            Resets <c>HighlightHyperText</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.IsWordCorrect(System.String)">
            <summary>
            Checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetCheckSpelling">
            <summary>
            Resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetSpellDelimiters">
            <summary>
            Resets the <c>SpellDelimiters</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.TempUnhighlightBraces(System.Boolean)">
            <summary>
            Unhighlights temporary braces areas.
            </summary>
            <param name="needUpdate">Specifies whether current brace pair should be updated.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.UnhighlightBraces(System.Boolean)">
            <summary>
            Unhighlights braces.
            </summary>
            <param name="needUpdate">Specifies whether current brace pair should be updated.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ShouldSerializeOpenBraces">
            <summary>
            Indicates whether the <c>OpenBraces</c> property should be persisted.
            </summary>
            <returns>True if <c>OpenBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ShouldSerializeClosingBraces">
            <summary>
            Indicates whether the <c>ClosingBraces</c> property should be persisted.
            </summary>
            <returns>True if <c>ClosingBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            Locates closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            Locates open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            Temporary highlights all text within the area specified by rects.
            <seealso cref="M:QWhale.Editor.TextSource.TextSource.TempUnhighlightBraces"/>
            </summary>
            <param name="rects">Specifies the area to highlight the text.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.TempUnhighlightBraces">
            <summary>
            Cancels text highlighting turned on using <c>TempHighlightBraces</c>
            <seealso cref="M:QWhale.Editor.TextSource.TextSource.TempHighlightBraces(System.Drawing.Rectangle[])"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.HighlightBraces">
            <summary>
            Highlights braces containing caret  position.
            <seealso cref="M:QWhale.Editor.TextSource.IBraceMatching.UnhighlightBraces"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.UnhighlightBraces">
            <summary>
            Unhighlights braces containing caret position.
            <seealso cref="M:QWhale.Editor.TextSource.IBraceMatching.HighlightBraces"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetBracesOptions">
            <summary>
            Resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetOpenBraces">
            <summary>
            Resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ResetClosingBraces">
            <summary>
            Resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.SetLastParsed(System.Int32)">
            <summary>
            Updates the last parsed line and resets first changed line to it's default value.
            </summary>
            <param name="index">New value of the last parsed line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ParseString(System.Int32)">
            <summary>
            Perform lexical analysis of the specified string.
            </summary>
            <param name="index">Index of line to parse.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ParseStrings(System.Int32,System.Int32)">
            <summary>
            Perform lexical analysis specified strings.
            </summary>
            <param name="first">Index of the first line to parse.</param>
            <param name="last">Index of the last line to parse.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ParseToString(System.Int32)">
            <summary>
            Perform lexical analysis of specified strings.
            </summary>
            <param name="index">Index of the last string to parse.</param>
            <remarks>Method parses string collection from the last parsed string to the string specified by Index parameter.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedParse">
            <summary>
            Indicates whether syntax parsing can be performed for the text, or some of formatting text elements, such as urls or braces, should be highlighted.
            </summary>
            <returns>True if need to perform syntax parsing; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ProcessAutoComplete(System.String@)">
             <summary>
             Inserts end-of-block code fragment if needed.
             </summary>
             <param name="code">code fragment to be inserted</param>
            <returns>true if end-of-block is inserted; otherwise false</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ShouldSerializeText">
            <summary>
            Indicates whether the <c>Text</c> property should be persisted.
            </summary>
            <returns>True if <c>Text</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ShouldSerializeLexer">
            <summary>
            Indicates whether the <c>Lexer</c> property should be persisted.
            </summary>
            <returns>True if <c>Lexer</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ShouldSerializeNavigateOptions">
            <summary>
            Indicates whether the <c>NavigateOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>NavigateOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ShouldSerializeUndoOptions">
            <summary>
            Indicates whether the <c>UndoOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>UndoOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.ShouldSerializeIndentOptions">
            <summary>
            Indicates whether the <c>IndentOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>IndentOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.FormatText(System.Boolean,System.Boolean)">
            <summary>
            Tries to format and outline <c>TextSource</c> text using attached <c>Lexer</c>.
            <param name="immediate">Indicates if parsing should be performed without instantiating parser thread.</param>
            <param name="notify">Indicates if attached editors should be notified on reparsing</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.FormatText">
            <summary>
            Tries to format and outline <c>TextSource</c> text using attached <c>Lexer</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedFormatText">
            <summary>
            Indicates whether <c>ITextSource</c> can to format its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedOutlineText">
            <summary>
            Indicates whether <c>ITextSource</c> can outline its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedReparseText">
            <summary>
            Indicates whether <c>ITextSource</c> can perform syntax analysis of its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedWorkInThread">
            <summary>
            Indicates whether <c>ITextSource</c> can perform syntax analysis in thread.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedAutoComplete">
            <summary>
            Indicates whether <c>ITextSource</c> should try to autocomplete statements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedReparseTextOnLineChange">
            <summary>
            Indicates whether <c>ITextSource</c> should repace text when changing the current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedFormatTextOnLineChange">
            <summary>
            Indicates whether <c>ITextSource</c> should format spaces and case when changing the current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedCodeCompletion">
            <summary>
            Indicates whether <c>ITextSource</c> can provide code completion operation for its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedCodeCompletionTabs(QWhale.Syntax.CodeCompletionType)">
            <summary>
            Indicates code completion content can be filtered based on its prioerty.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedSyntaxErrors">
            <summary>
            Indicates whether <c>ITextSource</c> can proceed syntax errors in its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.NeedQuickInfoTips">
            <summary>
            Indicates whether <c>ITextSource</c> can obtain short description for syntax tokens within its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.GetCharIndexFromPosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the index of character.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Index of character if the text considered as a single string.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.GetPositionFromCharIndex(System.Int32)">
            <summary>
            Converts given character index to position as Point value.
            </summary>
            <param name="charIndex">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.CreateStringItem(System.String)">
            <summary>
            Create a new <c>IStringItem</c> object containing specified text.
            </summary>
            <param name="s">String that <c>IStringItem</c> contain.</param>
            <returns>Created <c>IStringItem</c> object.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.Clear">
            <summary>
            Clears content of the <c>TextSource</c>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.StartThread(QWhale.Editor.TextSource.ThreadProc,QWhale.Editor.TextSource.ThreadProc,QWhale.Editor.TextSource.ThreadProc,QWhale.Editor.TextSource.ThreadProc)">
            <summary>
            Executes action in thread.
            </summary>
            <param name="action">Specifies action to execute in thread.</param>
            <param name="start">Specifies action to execute in thread.</param>
            <param name="end">Specifies action to execute when thread starts.</param>
            <param name="stop">Specifies action to execute when user aborts thread execution.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextSource.StopThread(QWhale.Editor.TextSource.ThreadProc,System.Boolean)">
            <summary>
            Aborts executing action in thread.
            </summary>
            <param name="start">Specifies action to abort.</param>
            <param name="wait">Specifiles whether calling application should wait for background thread to finish execution.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.CodeSnippets">
            <summary>
            When implemented by a class, gets or sets <c>ICodeSnippetRangeList</c> for Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.CurrentSnippet">
            <summary>
            Gets or sets current <c>ICodeSnippetRange</c> object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.SyntaxErrors">
            <summary>
            Represents a syntax errors collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.ReadOnly">
            <summary>
            Gets or sets a value indicating whether the control's content is read-only.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.Overwrite">
            <summary>
            Gets or sets a value indicating whether the inserted text overwrites existing text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.Modified">
            <summary>
            Gets or sets a value indicating whether the control's text content is modified.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.SingleLineMode">
            <summary>
            Gets or sets a value indicating whether the control accepts only one line of the text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.IndentOptions">
            <summary>
            Gets or sets <c>QWhale.Editor.TextSource.IndentOptions</c> for this class, allowing to customize behaior of Edit control when user presses Enter to insert new text line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.MaxLength">
            <summary>
            Specifies the maximum number of characters that can be entered into the edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.NavigateOptions">
            <summary>
            Gets or sets navigating options.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.PrevPosition">
            <summary>
            Gets previous position within the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.Position">
            <summary>
            Gets or sets current position within the control's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.UndoOptions">
            <summary>
            Gets or sets options for undo and redo operations.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.UndoLimit">
            <summary>
            Gets or sets a value that limits number of undo operations.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.UndoUpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.UndoList">
            <summary>
            Provides an indexed access to undo data.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.RedoList">
            <summary>
            Provides an indexed access to redo data.
            </summary>
        </member>
        <member name="E:QWhale.Editor.TextSource.TextSource.UndoEvent">
            <summary>
            Occurs when undo/redo operation performed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.SelectBlockRect">
            <summary>
            Represents a rectangular block of selected text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.State">
            <summary>
            Gets or sets last changes to the text stored in the text source.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.FirstChanged">
            <summary>
            Represents index of the first changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.LastChanged">
            <summary>
            Represents index of the last changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.HighlightHyperText">
            <summary>
            Gets or sets a value indicating whether hypertext in the text should be highlighted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.UrlTable">
            <summary>
            Represents hash table containing hyper-text characters
            </summary>
        </member>
        <member name="E:QWhale.Editor.TextSource.TextSource.HyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.SpellTable">
            <summary>
            Represents a hash table containing delimiters
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.CheckSpelling">
            <summary>
            Gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.SpellDelimiters">
            <summary>
            Gets or sets an array of chars used to separate words in a text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.SpellDelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.HasSpelling">
            <summary>
            Gets boolean value indicating that editor has external spell checker assigned
            </summary>
        </member>
        <member name="E:QWhale.Editor.TextSource.TextSource.WordSpell">
            <summary>
            Occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.BracesOptions">
            <summary>
            Gets or sets options specifying appearance and behaviour of matching braces within Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.OpenBraces">
            <summary>
            Gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.ClosingBraces">
            <summary>
            Gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.Strings">
            <summary>
            Gets or sets text source content in the form of string array.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.Lexer">
            <summary>
            Gets or sets object that can perform lexical analysis of the text source content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.ParserLine">
            <summary>
            Gets the line currently parsed by the attached Lexer, when text source performs syntax parsing of the text.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:QWhale.Editor.TextSource.TextSource.ThreadAction" -->
        <member name="P:QWhale.Editor.TextSource.TextSource.FileName">
            <summary>
            Gets or sets name of file that holds text source content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.Edits">
            <summary>
            Represents a collection of <c>ISyntaxEdit</c> controls linked to the text source.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.Lines">
            <summary>
            Represents the object that implements <c>ITextStrings</c> interface containing collection of strings determining text source content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.Text">
            <summary>
            Gets or sets text source content as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.LineStyles">
            <summary>
            Represents an object that implements <c>ILineStyles</c> interface hodling collection of line styles for this document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.BookMarks">
            <summary>
            Represents an object that implements <c>IBookMarks</c> interface holding collection of <c>IBookMark</c> objects each determining particular bookmark within the text source.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.ActiveEdit">
            <summary>
            Gets or sets an object that represent currently active (focused) <c>ISyntaxEdit</c> control linked to the text source.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextSource.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>TextSource</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.IInnerTextSource">
            <summary>
            Represents internal text source for Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.ICompletionEdit">
            <summary>
            Represents properties for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICompletionEdit.UpdateSize">
            <summary>
            When implemented by a class, updates size of this <c>ICompletionEdit</c> control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICompletionEdit.EditBox">
            <summary>
            When implemented by a class, represents a text box allowing to edit content of the <c>ICompletionEdit</c>control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICompletionEdit.Label">
            <summary>
            When implemented by a class, represents a label associated with the edit <c>ICompletionEdit</c>control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICompletionEdit.PathLabel">
            <summary>
            When implemented by a class, represents a path label associated with the edit <c>ICompletionEdit</c>control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CodeCompletionEdit">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.ICodeCompletionEdit">
            <summary>
            Represents properties and methods to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionEdit.EditField">
            <summary>
            When implemented by a class, gets or sets a value that indicates caption of the Edit label.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionEdit.EditPath">
            <summary>
            When implemented by a class, gets or sets a value that indicates path to the nested data.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionEdit.EditText">
            <summary>
            When implemented by a class, gets or sets a value that indicates text of the field being edited.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionEdit.Edit">
            <summary>
            When implemented by a class, represents a completion list box control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.#ctor(QWhale.Editor.ISyntaxEdit,QWhale.Editor.CodeCompletion.ICodeCompletionBox)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionEdit</c> class with specified parameters.
            </summary>
            <param name="owner">The <c>SyntaxEdit</c> control owning this new instance.</param>
            <param name="parent">Specifies parent of this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.ContainsControl(System.Windows.Forms.Control)">
            <summary>
            Retrieves a value indicating whether the popup window contains the specified control.
            </summary>
            <param name="control">The Control to evaluate.</param>
            <returns>True if the popup window contains the specified control; otherwise, false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.IsFocused">
            <summary>
            Indicates whether <c>CodeCompletionEdit</c> control has an input focus.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Editor#CodeCompletion#ICodeCompletionWindow#add_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Editor#CodeCompletion#ICodeCompletionWindow#remove_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_CanFocus">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Visible">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Visible(System.Boolean)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Location">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Location(System.Drawing.Point)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Left">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Left(System.Int32)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Top">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Top(System.Int32)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Width">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Width(System.Int32)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Height">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Height(System.Int32)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Bounds(System.Drawing.Rectangle)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_ClientRectangle">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Parent">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Parent(System.Windows.Forms.Control)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Enabled">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#set_Enabled(System.Boolean)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_IsHandleCreated">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#get_Created">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#add_Click(System.EventHandler)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionEdit.QWhale#Common#IControl#remove_Click(System.EventHandler)">
            <summary>
            Represents class that impements <c>ICodeCompletionEdit</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of edit with label.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionEdit.EditField">
            <summary>
            Gets or sets a value that indicates caption of the Edit label.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionEdit.EditPath">
            <summary>
            Gets or sets a value that indicates text of the field being edited.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionEdit.EditText">
            <summary>
            Gets or sets a value that indicates text of the field being edited.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionEdit.Edit">
            <summary>
            Represents a completion list box control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.IPersistentSettings">
            <summary>
            Represents methods to save/restore key properties of some object.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IPersistentSettings.Assign(QWhale.Editor.Dialogs.IPersistentSettings)">
            <summary>
            When implemented by a class, copies the content from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="T:QWhale.Editor.TextSource.BracesOptions">
            <summary>
            Defines braces behaviour.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.BracesOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.BracesOptions.Highlight">
            <summary>
            Specifies that matching braces should be highlighted.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.BracesOptions.HighlightBounds">
            <summary>
            Specifies that matching braces should be highlighted only if caret is positioned on the brace.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.BracesOptions.TempHighlight">
            <summary>
            Specifies that the highlighting will disapear after small delay.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IBookMarkEx">
            <summary>
            Represents a bookmark with extended possibilities.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBookMarkEx.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of this <c>IBookMarkEx</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBookMarkEx.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of this <c>IBookMarkEx</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IBookMarkEx.Url">
            <summary>
            When implemented by a class, gets or sets an Url address of this <c>IBookMarkEx</c>.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IWhiteSpace">
            <summary>
            Represents properties of "invisible" characters, such as spaces and tabs, in the control's text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWhiteSpace.Assign(QWhale.Editor.IWhiteSpace)">
            <summary>
            When implemented by a class, copies the contents from another <c>IWhiteSpace</c> object.
            </summary>
            <param name="source">Specifies <c>IWhiteSpace</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IWhiteSpace.ResetVisible">
            <summary>
            When implemented by a class, resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWhiteSpace.ResetTabSymbol">
            <summary>
            When implemented by a class, resets the <c>TabSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWhiteSpace.ResetSpaceSymbol">
            <summary>
            When implemented by a class, resets the <c>SpaceSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWhiteSpace.ResetEolSymbol">
            <summary>
            When implemented by a class, resets the <c>EolSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWhiteSpace.ResetEofSymbol">
            <summary>
            When implemented by a class, resets the <c>EofSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWhiteSpace.ResetWordWrapSymbol">
            <summary>
            When implemented by a class, resets the <c>WordWrapSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IWhiteSpace.ResetSymbolColor">
            <summary>
            When implemented by a class, resets the <c>SymbolColor</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether white space symbols are visible in the contol's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.TabSymbol">
            <summary>
            When implemented by a class, gets or sets character that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.SpaceSymbol">
            <summary>
            When implemented by a class, gets or sets character that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.LongSpaceSymbol">
            <summary>
            When implemented by a class, gets or sets character that introduces special symbol to paint instead of the long space character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.EolSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies end of line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.EofSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies end of file.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.WordWrapSymbol">
            <summary>
            When implemented by a class, gets or sets character that specifies wrapped line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.SpaceString">
            <summary>
            When implemented by a class, represents one character string that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.TabString">
            <summary>
            When implemented by a class, represents one character string that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.EolString">
            <summary>
            When implemented by a class, represents one character string that specifies end of line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.EofString">
            <summary>
            When implemented by a class, represents one character string that specifies end of file.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.WordWrapString">
            <summary>
            When implemented by a class, represents one character string that specifies wrapped file.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.SymbolColor">
            <summary>
            When implemented by a class, gets or sets color used to paint special symbols.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IWhiteSpace.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IWhiteSpace
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.ICodeCompletionColumn">
            <summary>
            Represents properties and methods to indentify individual column object within a code completion columns collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionColumn.ResetFontStyle">
            <summary>
            When implemented by a class, resets <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionColumn.ResetForeColor">
            <summary>
            When implemented by a class, resets <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionColumn.ResetVisible">
            <summary>
            When implemented by a class, resets <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionColumn.Name">
            <summary>
            When implemented by a class, gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionColumn.FontStyle">
            <summary>
            When implemented by a class, gets or sets font style of the column.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionColumn.ForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the column.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionColumn.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether a column is visible.
            </summary>
        </member>
        <member name="T:QWhale.Editor.UrlJumpEventArgs">
            <summary>
            Provides data for the <c>UrlJumpEvent</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.UrlJumpEventArgs.Text">
            <summary>
            Represents the Url address.
            </summary>
        </member>
        <member name="F:QWhale.Editor.UrlJumpEventArgs.Handled">
            <summary>
            Represents a value indicating whether jump to url event is handled, disabling opening default browser. By default this value is false.
            </summary>
        </member>
        <member name="M:QWhale.Editor.UrlJumpEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>UrlJumpEventArgs</c> class with specified parameters.
            </summary>
            <param name="text">The Url address.</param>
            <param name="handled">Specifies whether jump to url event already handled.</param>
        </member>
        <member name="T:QWhale.Editor.UrlJumpEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.JumpToUrl</c> or <c>HyperTextEx.JumpToUrl</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>UrlJumpEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Editor.DrawUserMarginEventArgs">
            <summary>
            Provides data for the <c>DrawUserMarginEvent</c> handler.
            </summary>
        </member>
        <member name="T:QWhale.Editor.DrawHeaderEventArgs">
            <summary>
            Provides data for the <c>DrawHeaderEvent</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawHeaderEventArgs.Tag">
            <summary>
            String containing formatting elements used to format <c>DrawHeaderEventArgs.Text</c>.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawHeaderEventArgs.Text">
            <summary>
            String to replace formatting tag.
            </summary>
        </member>
        <member name="F:QWhale.Editor.DrawHeaderEventArgs.Handled">
            <summary>
            Represents a value indicating whether draw header event is handled.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DrawHeaderEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>DrawHeaderEventArgs</c> class with specified parameters.
            </summary>
            <param name="tag">String containing formatting element.</param>
        </member>
        <member name="F:QWhale.Editor.DrawUserMarginEventArgs.Line">
            <summary>
            Line number being drawn.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DrawUserMarginEventArgs.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>DrawUserMarginEventArgs</c> class with specified parameters.
            </summary>
            <param name="tag">String containing formatting element.</param>
            <param name="line">Line number being drawn.</param>
        </member>
        <member name="T:QWhale.Editor.DrawUserMarginEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.DrawUserMargin</c>, <c>EditPages.DrawHeader</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>DrawUserMarginArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlSyntaxEditInfo">
            <summary>
            Contains information about <c>ISyntaxEdit</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxEditInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxEditInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ISyntaxEdit</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ShouldSerializeBorderStyle">
            <summary>
            Indicates whether the <c>BorderStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>BorderStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ShouldSerializeCodeCompletionChars">
            <summary>
            Indicates whether the <c>CodeCompletionChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ShouldSerializeSearchOptions">
            <summary>
            Indicates whether the <c>SearchOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>SearchOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ShouldSerializeDisabledForeColor">
            <summary>
            Indicates whether the <c>DisabledForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>DisabledForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ShouldSerializeDisabledBackColor">
            <summary>
            Indicates whether the <c>DisabledBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>DisabledBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ShouldSerializeReadonlyForeColor">
            <summary>
            Indicates whether the <c>ReadonlyForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ReadonlyForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ShouldSerializeReadonlyBackColor">
            <summary>
            Indicates whether the <c>ReadonlyBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ReadonlyBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ShouldSerializeColumnsIndentForeColor">
            <summary>
            Indicates whether the <c>ColumnsIndentForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ColumnsIndentForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.SearchOptions">
            <summary>
            Stores <c>ISyntaxEdit.SearchOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.CodeCompletionChars">
            <summary>
            Stores <c>ISyntaxEdit.CodeCompletionChars</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.AutoCorrection">
            <summary>
            Stores <c>ISyntaxEdit.AutoCorrection</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ReadonlyBackColor">
            <summary>
            Stores <c>ISyntaxEdit.ReadonlyBackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ReadonlyForeColor">
            <summary>
            Stores <c>ISyntaxEdit.ReadonlyForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.DisabledForeColor">
            <summary>
            Stores <c>ISyntaxEdit.DisabledForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.DisabledBackColor">
            <summary>
            Stores <c>ISyntaxEdit.DisabledBackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.SyntaxErrorsHints">
            <summary>
            Stores <c>IEditSyntaxPaint.SyntaxErrorsHints</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Transparent">
            <summary>
            Stores <c>ISyntaxEdit.Transparent</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.HideCaret">
            <summary>
            Stores <c>ISyntaxEdit.HideCaret</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.KeepCaretOnLostFocus">
            <summary>
            Stores <c>ISyntaxEdit.HideCaret</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.DisableColorPaint">
            <summary>
            Stores <c>ISyntaxEdit.DisableColorPaint</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.DisableSyntaxPaint">
            <summary>
            Stores <c>ISyntaxEdit.DisableSyntaxPaint</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.AcceptTabs">
            <summary>
            Stores <c>ISyntaxEdit.AcceptTabs</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.DrawColumnsIndent">
            <summary>
            Stores <c>ISyntaxEdit.DrawColumnsIndent</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.UseDefaultMenu">
            <summary>
            Stores <c>ISyntaxEdit.UseDefaultMenu</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ContextMenu">
            <summary>
            Stores <c>ISyntaxEdit.ContextMenu</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Font">
            <summary>
            Stores <c>ISyntaxEdit.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.BorderStyle">
            <summary>
            Stores <c>ISyntaxEdit.BorderStyle</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.ColumnsIndentForeColor">
            <summary>
            Stores color of the <c>ISyntaxEdit.ColumnsIndentForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.AcceptReturns">
            <summary>
            Stores <c>ISyntaxEdit.AcceptReturns</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Pages">
            <summary>
            Stores <c>ISyntaxEdit.Pages</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.DisplayStrings">
            <summary>
            Stores <c>ISyntaxEdit.DisplayLines</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Selection">
            <summary>
            Stores <c>ISyntaxEdit.Selection</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Gutter">
            <summary>
            Stores <c>ISyntaxEdit.Gutter</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Margin">
            <summary>
            Stores <c>ISyntaxEdit.Margin</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.LineStyles">
            <summary>
            Stores <c>ISyntaxEdit.LineStyles</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.LineSeparator">
            <summary>
            Stores <c>ISyntaxEdit.LineSeparator</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Printing">
            <summary>
            Stores <c>ISyntaxEdit.Printing</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.WhiteSpace">
            <summary>
            Stores <c>ISyntaxEdit.WhiteSpace</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.TextSource">
            <summary>
            Stores <c>ISyntaxEdit.Source</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Scrolling">
            <summary>
            Stores <c>ISyntaxEdit.Scrolling</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Outlining">
            <summary>
            Stores <c>ISyntaxEdit.Outlining</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.HyperText">
            <summary>
            Stores <c>ISyntaxEdit.HyperText</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Spelling">
            <summary>
            Stores <c>ISyntaxEdit.Spelling</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxEditInfo.Braces">
            <summary>
            Stores <c>ISyntaxEdit.Braces</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IFmtExport">
            <summary>
            Provides methods to save <c>IStringItem</c> elements.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IStringExport">
            <summary>
            Provides methods to save <c>IStringItem</c> elements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IStringExport.BeginWrite(System.IO.TextWriter,System.Object)">
            <summary>
            When implemented by a class, starts writing routine.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="userData">Data to be saved.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IStringExport.EndWrite">
            <summary>
            When implemented by a class, finalizes writing routine.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IStringExport.WriteLine(QWhale.Syntax.IStringItem)">
            <summary>
            When implemented by a class, saves a particular <c>IStringItem</c> object.
            </summary>
            <param name="item"><c>IStringItem</c> to save.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IStringExport.Write">
            <summary>
            When implemented by a class, saves entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CompletionListBox">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.#ctor">
            <summary>
            Initializes a new instance of the <c>CompletionListBox</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.GetIndex">
            <summary>
            Returns current index.
            </summary>
            <returns>Index of the currently selected item.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.GetIndex(System.Int32)">
            <summary>
            Returns current index.
            </summary>
            <param name="index">Default index value.</param>
            <returns>Index of the currently selected item.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.ResetContent(System.Int32)">
            <summary>
            Updates <c>CompletionListBox</c> content from its Provider.
            </summary>
            <param name="index">The integer value that specifies <c>SelectedIndex</c> property of the <c>CompletionListBox</c>.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.ResetContent">
            <summary>
            Updates <c>CompletionListBox</c> content from its Provider.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.GetColumn(System.Int32)">
            <summary>
            Returns a column by specifies index.
            </summary>
            <param name="index">Specifies index of the column to obtain.</param>
            <returns><c>ICodeCompletionColumn</c> object at specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.ClearColumns">
            <summary>
            Removes all columns from the <c>CompletionListBox</c> column collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.AddColumn">
            <summary>
            Adds a new column to the end of the <c>CompletionListBox</c> column collection.
            </summary>
            <returns><c>ICodeCompletionColumn</c> added.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column to the specified position of the <c>CompletionListBox</c> columns collection.
            </summary>
            <param name="index">Position of hte column to insert.</param>
            <returns><c>ICodeCompletionColumn</c> inserted.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionListBox.RemoveColumnAt(System.Int32)">
            <summary>
            Removes column at the specified position from the <c>CompletionListBox</c> column collection.
            </summary>
            <param name="index">Specifies index of the column to remove.</param>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.Columns">
            <summary>
            Represents <c>ICodeCompletionColumn</c> collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.Filtered">
            <summary>
            Gets or sets a boolean value that indicates whether <c>CompletionListBox</c> should filter its content using <c>Filer</c> property.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CompletionListBox.Filter"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.Filter">
            <summary>
            Gets or sets filter string to filter <c>CompletionListBox</c> content.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CompletionListBox.Filtered"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.Priority">
            <summary>
            Gets or sets priority filter to filter <c>CompletionListBox</c> content.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CompletionListBox.Filter"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.ColumnCount">
            <summary>
            Returns number of the columns in the listbox.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.Provider">
            <summary>
            Represents the object that provides data for code completion.
            <seealso cref="T:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.ItemWidth">
            <summary>
            Gets width of the widest item.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.Images">
            <summary>
            Represents an image list associated with this <c>CompletionListBox</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.NavKeys">
            <summary>
            Represents a key collection used to navigate within the <c>CompletionListBox</c> content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionListBox.UpdateSize">
            <summary>
            Occurs when size of the control is changed.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlEditLineStyleInfo">
            <summary>
            Contains information about <c>IEditLineStyle</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStyleInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStyleInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStyleInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlEditLineStyleInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStyleInfo.#ctor(QWhale.Editor.IEditLineStyle)">
            <summary>
            Initializes a new instance of the <c>XmlEditLineStyleInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IEditLineStyle</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStyleInfo.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>ForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStyleInfo.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStyleInfo.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStyleInfo.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditLineStyleInfo.Name">
            <summary>
            Stores <c>IEditLineStyle.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditLineStyleInfo.ImageIndex">
            <summary>
            Stores <c>IEditLineStyle.ImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditLineStyleInfo.Options">
            <summary>
            Stores <c>IEditLineStyle.Options</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditLineStyleInfo.ForeColor">
            <summary>
            Gets or sets string representation of <c>ForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditLineStyleInfo.BackColor">
            <summary>
            Gets or sets string representation of <c>BackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditLineStyleInfo.PenColor">
            <summary>
            Gets or sets string representation of <c>PenColor</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.FmtImport">
            <summary>
            Represents basic class to import Edit control's content from various formats.
            </summary>
            <remarks>Do not create instances of this class directly; use derived classes like <c>XmlImportet</c> and <c>RtfImporter</c>.</remarks>
        </member>
        <member name="T:QWhale.Editor.IFmtImport">
            <summary>
            Provides methods to load text content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IStringImport">
            <summary>
            Provides methods to load text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IStringImport.BeginRead(System.IO.TextReader,System.Object)">
            <summary>
            When implemented by a class, starts reading routine.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="userData">Data to be loaded.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IStringImport.EndRead">
            <summary>
            When implemented by a class, finalizes reading routine.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IStringImport.Read">
            <summary>
            When implemented by a class, loads entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.IFmtImport.DefaultStyle">
            <summary>
            When implemented by a class, gets or sets default font style of the text.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IFmtImport.ReadFormattedText">
            <summary>
            When implemented by a class, occurs when formatted text is read.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtImport.#ctor">
            <summary>
            Initializes a new instance of the <c>FmtImporter</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtImport.Finalize">
            <summary>
            Destroys the instance of the <c>HtmlImporter</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtImport.BeginRead(System.IO.TextReader,System.Object)">
            <summary>
            Starts reading routine.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="userData">Data to be loaded.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtImport.Read">
            <summary>
            Loads entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtImport.EndRead">
            <summary>
            Finalizes reading routine.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.FmtImport.DefaultStyle">
            <summary>
            Defines default font style of the text.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Serialization.FmtImport.ReadFormattedText">
            <summary>
            Occurs when formatted text is read.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:QWhale.Editor.Dialogs.IGotoLineDialog">
            <summary>
            Represents dialog box that allows moving to a specific line index within Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IGotoLineDialog.Execute(System.Object,System.Int32,System.Int32@)">
            <summary>
            When implemented by a class, displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IGotoLineDialog.Execute(System.Object,System.Int32,System.Int32@,System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="E:QWhale.Editor.Dialogs.IGotoLineDialog.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlMacroKeysDataInfo">
            <summary>
            Contains information about <c>IKeyListData</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeysDataInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeysDataInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeysDataInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlMacroKeysDataInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeysDataInfo.#ctor(QWhale.Editor.IMacroKeyList)">
            <summary>
            Initializes a new instance of the <c>XmlMacroKeysDataInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IRecordPlayBack</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeysDataInfo.ShouldSerializeMarcos">
            <summary>
            Indicates whether the <c>Marcos</c> property should be persisted.
            </summary>
            <returns>True if <c>Marcos</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMacroKeysDataInfo.Macros">
            <summary>
            Stores Macros property 
            </summary>
        </member>
        <member name="T:QWhale.Editor.MacroKeyList">
            <summary>
            Represents list of macro key or its combinations with attached actions.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IMacroKeyList">
            <summary>
            Represents list of macro key or its combinations with attached actions.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IMacroKeyList.LinkMacros(System.Object,QWhale.Editor.IEventHandlers)">
            <summary>
            When implemented by a class, links macro actions to the editor events.
            </summary>
            <param name="owner">Editor control contains macros.</param>
            <param name="keyHandlers">Collection of events.</param>
        </member>
        <member name="P:QWhale.Editor.IMacroKeyList.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>MacroKeyList</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:QWhale.Editor.MacroKeyList.LinkMacros(System.Object,QWhale.Editor.IEventHandlers)">
            <summary>
            Links macro actions to the editor events.
            </summary>
            <param name="owner">Editor control containing macros.</param>
            <param name="keyHandlers">Collection of events.</param>
        </member>
        <member name="P:QWhale.Editor.MacroKeyList.SerializationInfo">
            <summary>
             Gets or sets an xml representation of this <c>ColorTheme</c> object.
             </summary>
             <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.NavigateOptions">
            <summary>
            Defines specific options for navigation through the editor's content.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NavigateOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NavigateOptions.BeyondEol">
            <summary>
            Specifies that user can navigate beyond end of line.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NavigateOptions.BeyondEof">
            <summary>
            Specifies that user can navigate beyond end of file.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NavigateOptions.UpAtLineBegin">
            <summary>
            Specifies that the curet position should move to the previous line when user click Left key and caret locates at the line begin.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NavigateOptions.DownAtLineEnd">
            <summary>
            Specifies that the curet position should move to the next line when user click Right key at the end of the line.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NavigateOptions.MoveOnRightButton">
            <summary>
            Specifies that curent should moves to the mouse pointer when user clicks right mouse button.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.NavigateOptions.KeepCaret">
            <summary>
            Specifies that caret should not move when modifying lines programmaticaly.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.LineStyles">
            <summary>
            Represents properties and methods for a collection that binds line styles to individual lines within Edit control content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ILineStyles">
            <summary>
            Represents properties and methods for a collection that binds line styles to individual lines within Edit control content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.RemoveLineStyle(System.Int32)">
            <summary>
            When implemented by a class, removes the first line style at the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.ToggleLineStyle(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.ToggleLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.GetLineStyle(System.Int32)">
            <summary>
            When implemented by a class, finds the first element in the line style collection located at the specified text line.
            </summary>
            <param name="index">Index of the text line.</param>
            <returns>Index of the found line style if the search succeed; otherwise -1.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.GetLineStyles(System.Int32,System.Collections.Generic.IList{QWhale.Editor.TextSource.ILineStyle})">
            <summary>
            When implemented by a class, finds all linestyles in the <c>ILineStyles</c> collection located inside specified line.
            </summary>
            <param name="line">The index of the line to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the linestyles located within the specified range.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.SetLineStyle(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="index">Index of the text line.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.SetLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.SetLineStyle(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.SetLineStyle(QWhale.Common.IRange,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets given line style to the specified line.
            </summary>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.SetLineStyle(System.Drawing.Point,QWhale.Common.IRange,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.Assign(QWhale.Editor.TextSource.ILineStyles)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStyles</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all line styles within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ILineStyles.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, updates all line styles starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.#ctor">
            <summary>
            Initializes a new instance of the <c>LineStyles</c> class with default parameters.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.#ctor(QWhale.Editor.TextSource.ITextSource)">
            <summary>
            Initializes a new instance of the <c>LineStyles</c> class with specified owner.
            </summary>
            <param name="owner"><c>ITextSource</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.Assign(QWhale.Editor.TextSource.ILineStyles)">
            <summary>
            Copies the contents from another <c>ILineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>ILineStyles</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.SetLineStyle(System.Drawing.Point,QWhale.Common.IRange,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.GetLineStyle(System.Int32)">
            <summary>
            Finds the first element in the line style collection located at the specified text line.
            </summary>
            <param name="index">Index of the text line.</param>
            <returns>Index of the found line style if the search succeed; otherwise -1.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.GetLineStyles(System.Int32,System.Collections.Generic.IList{QWhale.Editor.TextSource.ILineStyle})">
            <summary>
            Finds all linestyles in the <c>LineStyles</c> collection located inside specified line.
            </summary>
            <param name="line">The index of the line to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the linestyles located within the specified range.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.SetLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.SetLineStyle(QWhale.Common.IRange,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="range">Range where line style is defined.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.SetLineStyle(System.Drawing.Point,System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="position">Position of the line style.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.SetLineStyle(System.Int32,System.Int32)">
            <summary>
            Sets given line style to the specified line.
            </summary>
            <param name="index">Index of the text line.</param>
            <param name="style">Index of the line style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.RemoveLineStyle(System.Int32)">
            <summary>
            Removes the first line style at the specified line.
            </summary>
            <param name="line">Index of the text line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.ToggleLineStyle(System.Int32,System.Int32)">
            <summary>
            Sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.ToggleLineStyle(System.Int32,System.Int32,System.Int32)">
            <summary>
            sets or removes line style at the specified line.
            </summary>
            <param name="line">Index of line to toggle line style.</param>
            <param name="priority">Priority of the line style. This parameter is usefull only for line styles having image indexes</param>
            <param name="style">Index of style.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all bookmarks within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyles.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates all bookmarks starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Editor.KeyPreviewEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionWindow.KeyPreviewEvent</c> handler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.KeyPreviewEventArgs.#ctor(System.Windows.Forms.Message)">
            <summary>
            Initializes a new instance of the <c>KeyPreviewEventArgs</c> class with specified parameters.
            </summary>
            <param name="m">Represents key message</param>
        </member>
        <member name="F:QWhale.Editor.KeyPreviewEventArgs.Message">
            <summary>
            Key message
            </summary>
        </member>
        <member name="F:QWhale.Editor.KeyPreviewEventArgs.Handled">
            <summary>
            Specifies whether painting is handled by an event, preventing further processing of the key message.
            </summary>
        </member>
        <member name="T:QWhale.Editor.KeyPreviewEvent">
            <summary>
            Represents a method that will handle the <c>ICodeCompletionWindow.KeyPreview</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>KeyPreviewEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlLineSeparatorInfo">
            <summary>
            Contains information about <c>ILineSeparator</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlLineSeparatorInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlLineSeparatorInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlLineSeparatorInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLineSeparatorInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlLineSeparatorInfo.ShouldSerializeHighlightBackColor">
            <summary>
            Indicates whether the <c>HighlightBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>HighlightBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlLineSeparatorInfo.ShouldSerializeHighlightForeColor">
            <summary>
            Indicates whether the <c>HighlightForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>HighlightForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlLineSeparatorInfo.ShouldSerializeLineColor">
            <summary>
            Indicates whether the <c>LineColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlLineSeparatorInfo.ShouldSerializeContentDividerColor">
            <summary>
            Indicates whether the <c>ContentDividerColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ContentDividerColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlLineSeparatorInfo.#ctor(QWhale.Editor.ILineSeparator)">
            <summary>
            Initializes a new instance of the <c>XmlLineSeparatorInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILineSeparator</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlLineSeparatorInfo.Options">
            <summary>
            Stores <c>ILineSeparator.Options</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlLineSeparatorInfo.HighlightBackColor">
            <summary>
            Stores <c>ILineSeparator.HighlightBackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlLineSeparatorInfo.HighlightForeColor">
            <summary>
            Stores <c>ILineSeparator.HighlightForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlLineSeparatorInfo.LineColor">
            <summary>
            Stores <c>ILineSeparator.LineColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlLineSeparatorInfo.ContentDividerColor">
            <summary>
            Stores <c>ILineSeparator.ContentDividerColor</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlOutliningInfo">
            <summary>
            Contains information about <c>IOutlining</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlOutliningInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlOutliningInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlOutliningInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlOutliningInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlOutliningInfo.#ctor(QWhale.Editor.IOutlining)">
            <summary>
            Initializes a new instance of the <c>XmlOutliningInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IOutlining</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlOutliningInfo.ShouldSerializeOutlineColor">
            <summary>
            Indicates whether the <c>OutlineColor</c> property should be persisted.
            </summary>
            <returns>True if <c>OutlineColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlOutliningInfo.ShouldSerializeOutlineOptions">
            <summary>
            Indicates whether the <c>OutlineOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>OutlineOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlOutliningInfo.AllowOutlining">
            <summary>
            Stores <c>IOutlining.AllowOutlining</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlOutliningInfo.UseRoundRect">
            <summary>
            Stores <c>IOutlining.AllowOutlining</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlOutliningInfo.OutlineOptions">
            <summary>
            Stores <c>IOutlining.OutlineOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlOutliningInfo.OutlineColor">
            <summary>
            Stores <c>IOutlining.OutlineColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlOutliningInfo.Ranges">
            <summary>
            Stores <c>IOutlining.Ranges</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlMarginInfo">
            <summary>
            Contains information about <c>IMargin</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMarginInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMarginInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMarginInfo.ShouldSerializePosition">
            <summary>
            Indicates whether the <c>Position</c> property should be persisted.
            </summary>
            <returns>True if <c>Position</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMarginInfo.ShouldSerializeColumnPositions">
            <summary>
            Indicates whether the <c>ColumnPositions</c> property should be persisted.
            </summary>
            <returns>True if <c>ColumnPositions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMarginInfo.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMarginInfo.ShouldSerializeColumnPenColor">
            <summary>
            Indicates whether the <c>ColumnPenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ColumnPenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMarginInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlMarginInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMarginInfo.#ctor(QWhale.Editor.IMargin)">
            <summary>
            Initializes a new instance of the <c>XmlMarginInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IMargin</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.AllowDrag">
            <summary>
            Stores <c>IMargin.AllowDrag</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.ShowHints">
            <summary>
            Stores <c>IMargin.ShowHints</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.ColumnPenColor">
            <summary>
            Stores color of the <c>IMargin.ColumnPen</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.ColumnsVisible">
            <summary>
            Stores <c>IMargin.ColumnsVisible</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.ColumnPositions">
            <summary>
            Stores <c>IMargin.ColumnPositions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.Position">
            <summary>
            Stores <c>IMargin.Position</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.PenColor">
            <summary>
            Stores color of the <c>IMargin.Pen</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.PenWidth">
            <summary>
            Stores width of the <c>IMargin.Pen</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMarginInfo.Visible">
            <summary>
            Stores <c>IMargin.Visible</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo">
            <summary>
            Contains information about <c>IBookMark</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlBookmarkInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.#ctor(QWhale.Editor.TextSource.IBookMark)">
            <summary>
            Initializes a new instance of the <c>XmlBookmarkInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IBookMark</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.Name">
            <summary>
            Stores <c>IBookMarkEx.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.Description">
            <summary>
            Stores <c>IBookMarkEx.Description</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.Url">
            <summary>
            Stores <c>IBookMarkEx.Url</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.Line">
            <summary>
            Stores <c>IBookMark.Line</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.Pos">
            <summary>
            Stores <c>IBookMark.Pos</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBookmarkInfo.Index">
            <summary>
            Stores <c>IBookMark.Index</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.RulerIndent">
            <summary>
            Represents an indentation part of ruler.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IRulerIndent">
            <summary>
            Represents properties and methods defines a ruler indentation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IRulerIndent.DrawIndent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            When implemented by a class, draws indentation part of ruler on the specified graphic surface.
            </summary>
            <param name="graph">The Graphics object to draw on.</param>
            <param name="rect">Rectangular area of ruler indentation to draw on.</param>
            <param name="vertical">Indicates whether indentation has vertical or horizontal direction.</param>
            <param name="indentBackColor">Specifies background color of this <c>RulerIndent</c>.</param>
            <param name="backColor">Specifies background color of <c>RulerIndent</c> slider.</param>
        </member>
        <member name="M:QWhale.Editor.IRulerIndent.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging operation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IRulerIndent.Indent">
            <summary>
            When implemented by a class, gets or sets size of this <c>RulerIndent</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IRulerIndent.Dragging">
            <summary>
            When implemented by a class, indicates whether <c>RulerIndent</c> is in dragging state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IRulerIndent.Orientation">
            <summary>
            When implemented by a class, gets or sets <c>RulerIndent</c> alignment.
            </summary>
        </member>
        <member name="M:QWhale.Editor.RulerIndent.#ctor">
            <summary>
            Initializes a new instance of the <c>RulerIndent</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.RulerIndent.#ctor(QWhale.Editor.IndentOrientation,System.Int32)">
            <summary>
            Initializes a new instance of the <c>RulerIndent</c> class with specified parameters.
            </summary>
            <param name="orientation">Specifies orientation of this new instance.</param>
            <param name="indent">Specifies size of this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.RulerIndent.CancelDragging">
            <summary>
            Cancels dragging operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.RulerIndent.DrawIndent(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws indentation part of ruler on the specified graphic surface.
            </summary>
            <param name="graph">The Graphics object to draw on.</param>
            <param name="rect">Rectangular area of ruler indentation to draw on.</param>
            <param name="vertical">Indicates whether indentation has vertical or horizontal direction.</param>
            <param name="indentBackColor">Specifies background color of this <c>RulerIndent</c>.</param>
            <param name="backColor">Specifies background color of <c>RulerIndent</c> slider.</param>
        </member>
        <member name="P:QWhale.Editor.RulerIndent.Indent">
            <summary>
            Gets or sets size of this <c>RulerIndent</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.RulerIndent.Dragging">
            <summary>
            Indicates whether <c>RulerIndent</c> is in dragging state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.RulerIndent.Orientation">
            <summary>
            Gets or sets <c>RulerIndent</c> alignment.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CodeCompletionHint">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.ICodeCompletionHint">
            <summary>
            Represents properties and methods to display a popup window that can contain Code Completion information presented in the form of tooltip window.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionHint.ResetAutoHide">
            <summary>
            When implemented by a class, resets the <c>AutoHide</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionHint.ResetAutoHidePause">
            <summary>
            When implemented by a class, resets the <c>AutoHidePause</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionHint.AutoHide">
            <summary>
            When implemented by a class, gets or sets a value that indicates whether <c>ICodeCompletionHint</c> should be closed after some period of time.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionHint.AutoHidePause">
            <summary>
            When implemented by a class, gets or sets a value that specifies delay, in miliseconds, between displaying and hiding popup hint.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionHint</c> class with specified owner.
            </summary>
            <param name="owner">The <c>SyntaxEdit object</c> owning this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.ResetContent">
            <summary>
            Updates <c>CodeCompletionHint</c> content from its Provider.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.ResetAutoHide">
            <summary>
            Resets the <c>AutoHide</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.ResetAutoHidePause">
            <summary>
            Resets the <c>AutoHidePause</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.PaintSyntax(QWhale.Common.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Point,System.Boolean)">
            <summary>
            Paints a specified part of the hint control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies first line to paint.</param>
            <param name="endLine">Specifies last line to paint.</param>
            <param name="position">The Point value that specifies start position to draw from.</param>
            <param name="rect">Rectangular area of <c>CodeCompletionHint</c> to draw.</param>
            <param name="location">The Point value that specifies start position to draw page from.</param>
            <param name="specialPaint">Reserved for internal use.</param>		
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws specific line in of the hint control to the graphic surface.
            </summary>
            <param name="index">Specifies index of line to draw.</param>
            <param name="position">The Point value that specifies start position to draw.</param>
            <param name="clipRect">Rectangular area of hint control to draw in.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.MeasureLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Measures part of the given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of the given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.GetFontColor(System.Drawing.Color,QWhale.Syntax.TextStyle)">
            <summary>
            Retrieves font color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="textStyle">Additional color flags.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.GetFontStyle(System.Drawing.FontStyle,QWhale.Syntax.TextStyle)">
            <summary>
            Retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.GetLexStyle(System.Int32,QWhale.Syntax.TextStyle@)">
            <summary>
            Retrieves lex state corrsponding to given parser style.
            </summary>
            <param name="style">Index of parser style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>LexStyle by its index</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.EqualStyles(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Indicates whehter given styles are equal.
            </summary>
            <param name="style1">First style to compare.</param>
            <param name="style2">Second style to compare.</param>
            <param name="useColors">Indicate whehter colors of the styles are assumed.</param>
            <returns>True if styles are equal; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.OnCustomDraw(QWhale.Common.IPainter,System.Drawing.Rectangle,QWhale.Editor.DrawStage,QWhale.Editor.DrawState,QWhale.Editor.IDrawInfo)">
            <summary>
            Calls <c>Hint.SyntaxPaint.OnCustomDraw</c> method that raises <c>CustomDraw</c> event.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of <c>CodeCompletionHint</c> to draw.</param>
            <param name="stage">Specifies whether this method called before or after painting.</param>
            <param name="state">Specifies part of control to draw.</param>
            <param name="info">Full information about drawing text fragment.</param>
            <returns>True if user handles this event; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.ResetDisableColorPaint">
            <summary>
            Resets the <c>DisableColorPaint</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.ResetDisableSyntaxPaint">
            <summary>
            Resets the <c>DisableSyntaxPaint</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Editor#CodeCompletion#ICodeCompletionWindow#add_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Editor#CodeCompletion#ICodeCompletionWindow#remove_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_CanFocus">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Visible">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Visible(System.Boolean)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Location">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Location(System.Drawing.Point)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Left">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Left(System.Int32)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Top">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Top(System.Int32)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Width">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Width(System.Int32)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Height">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Height(System.Int32)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Bounds(System.Drawing.Rectangle)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_ClientRectangle">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Parent">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Parent(System.Windows.Forms.Control)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Enabled">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#set_Enabled(System.Boolean)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_IsHandleCreated">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#get_Created">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#add_Click(System.EventHandler)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionHint.QWhale#Common#IControl#remove_Click(System.EventHandler)">
            <summary>
            Represents class that implements <c>ICodeCompletionHint</c> interface. This object to represent a popup window in a form of tooltip.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionHint.AutoHide">
            <summary>
            Gets or sets a value indicating whether <c>CodeCompletionHint</c> should be closed after some period of time.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CodeCompletionHint.AutoHidePause"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionHint.AutoHidePause">
            <summary>
            Gets or sets a value that specifies delay, in miliseconds, between displaying and hiding popup hint.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CodeCompletionHint.AutoHide"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionHint.DisableColorPaint">
            <summary>
            Gets or sets a value indicating whether hint control uses colors to paint its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionHint.DisableSyntaxPaint">
            <summary>
            Gets or sets a value indicating whether hint control uses lexical colors/styles to paint its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionHint.Lexer">
            <summary>
            Gets or sets object that can make lexical analysis for the hint control content.
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.CodeCompletionHint.CustomDraw">
            <summary>
            Occurs when hint draws its content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CodeCompletionColumns">
            <summary>
            Represents properties and methods to provide indexed access to <c>ICodeCompletionColumn</c>object.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.ICodeCompletionColumns">
            <summary>
            Represents properties and methods to provide indexed access to <c>ICodeCompletionColumn</c> object.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Gutter">
            <summary>
            Represents gutter at the left side of the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.#ctor">
            <summary>
            Initializes a new instance of the <c>Gutter</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Gutter</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.Gutter.Finalize">
            <summary>
            Destroys the instance of the <c>Gutter</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeBrushColor">
            <summary>
            Indicates whether the <c>BrushColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BrushColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeLineNumbersForeColor">
            <summary>
            Indicates whether the <c>LineNumbersForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeLineNumbersBackColor">
            <summary>
            Indicates whether the <c>LineNumbersBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeLineBookmarksColor">
            <summary>
            Indicates whether the <c>LineBookmarksColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineBookmarksColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeLineModificatorChangedColor">
            <summary>
            Indicates whether the <c>LineModificatorChangedColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineModificatorChangedColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeLineModificatorSavedColor">
            <summary>
            Indicates whether the <c>LineModificatorSavedColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineModificatorSavedColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeWidth">
            <summary>
            Indicates whether the <c>Width</c> property should be persisted.
            </summary>
            <returns>True if <c>Width</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeUserMarginWidth">
            <summary>
            Indicates whether the <c>UserMarginWidth</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginWidth</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeUserMarginForeColor">
            <summary>
            Indicates whether the <c>UserMarginForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeUserMarginBackColor">
            <summary>
            Indicates whether the <c>UserMarginBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeUserMarginText">
            <summary>
            Indicates whether the <c>UserMarginText</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginText</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeLineNumbersStart">
            <summary>
            Indicates whether the <c>LineNumbersStart</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersStart</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeLineNumbersLeftIndent">
            <summary>
            Indicates whether the <c>LineNumbersLeftIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersLeftIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeLineNumbersRightIndent">
            <summary>
            Indicates whether the <c>LineNumbersRightIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersRightIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeOutliningLeftIndent">
            <summary>
            Indicates whether the <c>OutliningLeftIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>OutliningLeftIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeOutliningRightIndent">
            <summary>
            Indicates whether the <c>OutliningRightIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>OutliningRightIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeBookMarkImageIndex">
            <summary>
            Indicates whether the <c>BookMarkImageIndex</c> property should be persisted.
            </summary>
            <returns>True if <c>BookMarkImageIndex</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeWrapImageIndex">
            <summary>
            Indicates whether the <c>WrapImageIndex</c> property should be persisted.
            </summary>
            <returns>True if <c>WrapImageIndex</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.BeginUpdate">
            <summary>
            Prevents gutter updating until calling <c>Gutter.EndUpdate</c> method.
            </summary>
            <returns>Number of gutter updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.EndUpdate">
            <summary>
            Re-enables gutter updating, that was turn of by calling <c>Gutter.BeginUpdate</c> method.
            </summary>
            <returns>Number of gutter updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.DisableUpdate">
            <summary>
            Prevents gutter updating until calling <c>Gutter.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.EnableUpdate">
            <summary>
            Re-enables gutter updating, that was turn of by calling <c>Gutter.BeginUpdate</c> method.
            </summary>
            <returns>Number of gutter updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.Update(System.Boolean)">
            <summary>
            Causes the edit control to invalidate it's content.
            </summary>
            <param name="needChange">Specifies whether <c>ISyntaxEdit</c> control should invalidate it's content.</param>
        </member>
        <member name="M:QWhale.Editor.Gutter.Update">
            <summary>
            Causes the edit control to invalidate it's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.IsMouseOnOutlineButton(System.Int32,System.Int32,QWhale.Syntax.IOutlineRange@)">
            <summary>
            Indicates whether mouse point is within the outline button area.
            </summary>
            <param name="x">X-coordinate of the mouse pointer.</param>
            <param name="y">Y-coordinate of the mouse pointer.</param>
            <param name="range">Retrieves <c>IOutlineRange</c> under mouse pointer.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Gutter.Assign(QWhale.Editor.IGutter)">
            <summary>
            Copies the contents from another <c>IGutter</c> object.
            </summary>
            <param name="source">Specifies <c>IGutter</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Gutter.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle,System.Int32)">
            <summary>
            Draws gutter on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of gutter to draw.</param>
            <param name="startLine">the first display line to draw</param>
        </member>
        <member name="M:QWhale.Editor.Gutter.GetHitTest(System.Int32,System.Int32,QWhale.Editor.IHitTestInfo)">
            <summary>
            Fills hitTestInfo parameter by information about a part of the control at specified coordinate.
            </summary>
            <param name="x">Specifies horizontal coordinate of position to check.</param>
            <param name="y">Specifies vertical coordinate of position to check.</param>
            <param name="hitTestInfo">Retrieves information about part of control.</param>
        </member>
        <member name="M:QWhale.Editor.Gutter.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws gutter on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of gutter to draw.</param>
        </member>
        <member name="M:QWhale.Editor.Gutter.OnClick(System.EventArgs)">
            <summary>
            Raises the <c>Click</c> event.
            </summary>
            <param name="e">The EventArgs that contains data to this event.</param>
        </member>
        <member name="M:QWhale.Editor.Gutter.OnDoubleClick(System.EventArgs)">
            <summary>
            Raises the <c>DoubleClick</c> event.
            </summary>
            <param name="e">The EventArgs that contains data to this event.</param>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetBrushColor">
            <summary>
            Resets the <c>BrushColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetPenColor">
            <summary>
            Resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineNumbersStart">
            <summary>
            Resets the <c>LineNumbersStart</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineNumbersLeftIndent">
            <summary>
            Resets the <c>LineNumbersLeftIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineNumbersRightIndent">
            <summary>
            Resets the <c>LineNumbersRightIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineNumbersForeColor">
            <summary>
            Resets the <c>LineNumbersForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineNumbersBackColor">
            <summary>
            Resets the <c>LineNumbersBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineNumbersAlignment">
            <summary>
            Resets the <c>LineNumbersAlignment</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetOutliningLeftIndent">
            <summary>
            Resets the <c>OutliningLeftIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetOutliningRightIndent">
            <summary>
            Resets the <c>OutliningRightIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetBookMarkImageIndex">
            <summary>
            Resets the <c>BookMarkImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetWrapImageIndex">
            <summary>
            Resets the <c>WrapImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetDrawLineBookmarks">
            <summary>
            Resets the <c>DrawLineBookmarks</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineBookmarksColor">
            <summary>
            Resets the <c>LineBookmarksColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetShowBookmarkHints">
            <summary>
            Resets the <c>ShowBookmarkHints</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineModificatorChangedColor">
            <summary>
            Resets the <c>LineModificatorChangedColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetLineModificatorSavedColor">
            <summary>
            Resets the <c>LineModificatorSavedColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetWidth">
            <summary>
            Resets the <c>Width</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetUserMarginWidth">
            <summary>
            Resets the <c>UserMarginWidth</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetUserMarginForeColor">
            <summary>
            Resets the <c>UserMarginForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetUserMarginBackColor">
            <summary>
            Resets the <c>UserMarginBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.ResetUserMarginText">
            <summary>
            Resets the <c>UserMarginText</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Gutter.InvalidateLineNumberArea(System.Boolean)">
            <summary>
            Invalidates line number area if it needs to be altered.
            <param name="updateWidth">Specifies whether line number width needs to be recalcuated.</param>
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>Gutter</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="P:QWhale.Editor.Gutter.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.Width">
            <summary>
            Gets or sets the width of the gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.Brush">
            <summary>
            Gets or sets a Brush object used to paint gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.Pen">
            <summary>
            Gets or sets a Pen object used to paint gutter line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.BrushColor">
            <summary>
            Gets or sets background color of the gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.PenColor">
            <summary>
            Gets or sets color of the gutter line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.Visible">
            <summary>
            Gets or sets a value indicating whether the gutter area is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.Rect">
            <summary>
            Gets the rectangle that represents gutter area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.DisplayWidth">
            <summary>
            Gets display width of the gutter, including line numbers and outlining area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.DisplayArea">
            <summary>
            Gets display width of the gutter, including line numbers and outlining area,
            but not including line modificators if they're painted outside gutter
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineNumbersStart">
            <summary>
            Gets or sets number of the first line being painted on the gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineNumbersLeftIndent">
            <summary>
            Gets or sets line numbers indentation from the left gutter border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineNumbersRightIndent">
            <summary>
            Gets or sets line numbers indentation from the right gutter border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineNumbersForeColor">
            <summary>
            Gets or sets foreground color for the line numbers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineNumbersBackColor">
            <summary>
            Gets or sets background color for the line numbers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineNumbersAlignment">
            <summary>
            Gets or sets line numbers alignment information.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.OutliningLeftIndent">
            <summary>
            Gets or sets outlining indentation from the left gutter border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.OutliningRightIndent">
            <summary>
            Gets or sets outlining indentation from the right gutter border.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.Options">
            <summary>
            Gets or sets a <c>GutterOptions</c> that determine gutter appearance and behaviour.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.Images">
            <summary>
            Gets or sets an ImageList object that contains collection of images for gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.BookMarkImageIndex">
            <summary>
            Gets or sets a value that specifies index of item in the image collection used to paint bookmark.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.WrapImageIndex">
            <summary>
            Gets or sets a value that specifies index of item in the image collection used to paint special mark indicating the wrapped line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.DrawLineBookmarks">
            <summary>
            Gets or sets a value indicating whether Edit control should draw triangle at bookmark position inside line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineBookmarksColor">
            <summary>
            Gets or sets a color of the line bookmarks.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.ShowBookmarkHints">
            <summary>
            Gets or sets a value indicating whether Edit control should display text describing bookmark in form of tooltip window when mouse pointer is over the gutter bookmark.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineModificatorChangedColor">
            <summary>
            Gets or sets a color of the line modificators(color stitch that indicates that the line content is unmodified, modified or saved) in the modified state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.LineModificatorSavedColor">
            <summary>
            Gets or sets a color of the line modificators(color stitch that indicates that the line content is unmodified, modified or saved) in the saved state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.UserMarginWidth">
            <summary>
            Gets or sets the width of the user margin area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.UserMarginForeColor">
            <summary>
            Gets or sets foreground color of the line numbers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.UserMarginBackColor">
            <summary>
            Gets or sets background color of the user margin.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.UserMarginText">
            <summary>
            Gets or sets text of the user margin.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Gutter.MaxLineNumberLength">
            <summary>
            Gets or sets maximum count of numbers in the line number.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Gutter.Click">
            <summary>
            Occurs when the <c>Gutter</c> clicked.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Gutter.DoubleClick">
            <summary>
            Occurs when the <c>Gutter</c> double-clicked.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Gutter.DrawUserMargin">
            <summary>
            Occurs when user margin part of each line is drawing.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.IPrintOptionsDialog">
            <summary>
            Represents properties and methods to manipulate print settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IPrintOptionsDialog.ShowDialog">
            <summary>
            When implemented by a class, runs a print options dialog box.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IPrintOptionsDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, runs a print options dialog box.
            </summary>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IPrintOptionsDialog.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IPrintOptionsDialog.ResetAllowedOptions">
            <summary>
            When implemented by a class, resets the <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IPrintOptionsDialog.Options">
            <summary>
            When implemented by a class, gets or sets a collection of flags determining print behavior.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IPrintOptionsDialog.AllowedOptions">
            <summary>
            When implemented by a class, gets or sets print options that can be changed by user.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IPrintOptionsDialog.FileName">
            <summary>
            When implemented by a class, gets or sets name of file to be printed.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Dialogs.IPrintOptionsDialog.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.DlgSearch">
            <summary>
            Represents a windows form used to provide seacrh and replace dialog.
            </summary>
        </member>
        <member name="F:QWhale.Editor.Dialogs.DlgSearch.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSearch.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSearch.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSearch.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgSearch</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSearch.Init">
            <summary>
            Resets <c>DlgSeacrh</c> to the start of search.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgSearch.Search">
            <summary>
            Gets or sets <c>ISearch</c> interface owning the dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgSearch.Options">
            <summary>
            Gets or sets options that defines search and replace behavior.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgSearch.SelectionEnabled">
            <summary>
            Gets or sets a boolean value that indicates whether search can be executed through selected text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgSearch.IsReplace">
            <summary>
            Gets or sets a boolean value that indicates whether search or replace dialog should be executed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgSearch.OptionsVisible">
            <summary>
            Indicates whether options group box should be visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgSearch.ClearBookmarks">
            <summary>
            Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.UndoEventArgs">
            <summary>
            Provides data for the event that occurs when the undo/redo operation performed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoEventArgs.UndoData">
            <summary>
            Represents the data of the undo/redo operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoEventArgs.#ctor(QWhale.Editor.TextSource.IUndoData)">
            <summary>
            Initializes a new instance of the <c>UndoEventArgs</c> class with specified parameters.
            </summary>
            /// <param name="uData">Data of the undo operation.</param>
        </member>
        <member name="T:QWhale.Editor.TextSource.UndoEvent">
            <summary>
            Represents a method that will handle the <c>IUndo.Undo</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>UndoEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Editor.TextSource.HyperTextEventArgs">
            <summary>
            Provides data for the <c>HyperTextEvent</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.HyperTextEventArgs.Text">
            <summary>
            Contains string to check.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.HyperTextEventArgs.IsHyperText">
            <summary>
            Returns value indicating whether <c>HyperTextEventArgs.Text</c> represents hypertext.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.HyperTextEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>HyperTextEventArgs</c> class with specified Text and HyperText values.
            </summary>
            <param name="text">Specifies text to check.</param>
            <param name="isHyperText">Indicates whether given text represents hypertext.</param>
        </member>
        <member name="T:QWhale.Editor.TextSource.HyperTextEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.CheckHyperText</c>, <c>TextSource.CheckHyperText</c> or <c>HyperTextEx.CheckHyperText</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>HyperTextEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Editor.TextSource.BookMarks">
            <summary>
            Represents a collection of the <c>BookMark</c> objects.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IBookMarks">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>IBookMark</c> object.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.Assign(QWhale.Editor.TextSource.IBookMarks)">
            <summary>
            When implemented by a class, copies the contents from another <c>IBookMarks</c> object.
            </summary>
            <param name="source">Specifies <c>IBookMarks</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.GetBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the first item in the bookmark collection located within the specified text line.
            </summary>
            <param name="line">Index of the text line.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.GetBookMark(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            When implemented by a class, finds the first item in the bookmark collection located within the specified scope.
            </summary>
            <param name="startPoint">The Point value that specifies start position to search.</param>
            <param name="endPoint">The Point value that specifies end position to search.</param>
            <returns>Index of the found bookmark.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.GetBookMarks(System.Drawing.Point,System.Drawing.Point,System.Collections.Generic.IList{QWhale.Editor.TextSource.IBookMark})">
            <summary>
            When implemented by a class, finds all items in the bookmark collection located within the specified scope.
            </summary>
            <param name="startPoint">The Point value that specifies start position to search.</param>
            <param name="endPoint">The Point value that specifies end position to search.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified scope.</param>
            <returns>Index of the located bookmarks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.FindBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index property within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark Index.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.FindBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index in a specific line within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark Index.</param>
            <param name="line">Specifies line Index.</param>
            <returns><c>index of bookmark within BookMarks collection</c> object found.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.FindBookMark(System.String)">
            <summary>
            When implemented by a class, finds the bookmark with specified Name property within bookmark collection.
            </summary>
            <param name="name">Specifies bookmark name.</param>
            <returns><c>IBookMark</c> object found.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.SetBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, sets the bookmark with specified index to the position specifed by Line parameter.
            </summary>
            <param name="line">The integer value that specifies index of the text line.</param>
            <param name="bookMark">The integer value that specifies bookmark index.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.SetBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, sets the bookmark with specified index to the specified position.
            </summary>
            <param name="position">Specifies position of the bookmark.</param>
            <param name="bookMark">The integer value that specifies index of the bookmark.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.SetBookMark(QWhale.Editor.TextSource.IBookMark)">
            <summary>
            When implemented by a class, sets bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to set.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            When implemented by a class, sets the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies <c>BookMark</c> url.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.FindBookMark(System.Int32,System.Drawing.Point@)">
            <summary>
            When implemented by a class, finds the bookmark with specified Index property within bookmark collection.
            </summary>
            <param name="bookMark">Specifies bookmark index.</param>
            <param name="position">Receives position(index of character and line) of the found bookmark.</param>
            <returns>True if the bookmark successfully found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ToggleBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the specified line.
            </summary>
            <param name="line">Index of line to toggle.</param>
            <param name="bookMark">Specifies Index property of the bookmark to toggle.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ToggleBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the specified position.
            </summary>
            <param name="position">Specifies position of the bookmark (index of character and current line).</param>
            <param name="bookMark">Specifies Index property of the bookmark to toggle.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ToggleBookMark(QWhale.Editor.TextSource.IBookMark)">
            <summary>
            When implemented by a class, toggles (sets or removes) specified bookmark.
            </summary>
            <param name="bookMark">Specifies bookmark to toggle.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            When implemented by a class, toggles (sets or removes) the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the bookmark to toggle.</param>
            <param name="bookMark">Specifies <c>BookMark</c> index.</param>
            <param name="name">Specifies <c>BookMark</c> name.</param>
            <param name="description">Specifies <c>BookMark</c> description.</param>
            <param name="url">Specifies <c>BookMark</c> url.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ToggleBookMark(System.Int32)">
            <summary>
            When implemented by a class, toggles (sets or removes) bookmark with specified Index property at the current line.
            </summary>
            <param name="bookMark"></param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ToggleBookMark">
            <summary>
            When implemented by a class, toggles (sets or removes) an unnumbered bookmark on the current line in the control's text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ClearBookMark(System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark by given index and removes its from bookmark collection.
            </summary>
            <param name="bookMark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ClearBookMark(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds the bookmark by given index in a given line and removes its from bookmark collection.
            </summary>
            <param name="line">Index of line in lines collection.</param>
            <param name="bookmark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ClearBookMarks(System.Int32)">
            <summary>
            When implemented by a class, removes all bookmarks from the specified line.
            </summary>
            <param name="line">The integer value that specifies index of the text line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ClearAllBookMarks">
            <summary>
            When implemented by a class, removes all items from the bookmark collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.ClearAllUnnumberedBookmarks">
            <summary>
            When implemented by a class, removes all unnumbered bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.NextBookMark">
            <summary>
            When implemented by a class, returns the minimal possible value of the bookmark's Index property of the new bookmark.
            </summary>
            <returns>Bookmark index.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.GotoBookMark(System.Int32)">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the specified bookmark.
            </summary>
            <param name="bookMark">Specifies Index property of the bookmark.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.GotoNextBookMark">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the next unnumbered bookmark.
            </summary>
            <remarks>If the currently selected bookmark is the last bookmark within the bookmarks collection the method moves to the first bookmark.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.GotoPrevBookMark">
            <summary>
            When implemented by a class, moves Edit control's caret to the location of the previous unnumbered bookmark.
            </summary>
            <remarks>If the currently selected bookmark is the first bookmark within the bookmarks collection the method moves to the last bookmark.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all bookmarks within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.IBookMarks.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, updates all bookmarks starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.#ctor">
            <summary>
            Initializes a new instance of the <c>BookMarks</c>class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.#ctor(QWhale.Editor.TextSource.ITextSource)">
            <summary>
            Initializes a new instance of the <c>BookMarks</c> class with specified owner.
            </summary>
            <param name="owner">Class implementing <c>ITextSource</c> interface that owns the collection.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.Assign(QWhale.Editor.TextSource.IBookMarks)">
            <summary>
            Copies the contents of the another <c>BookMarks</c> collection to the bookmark collection.
            </summary>
            <param name="source">Specifies bookmark collection to copy content from. Call <c>Assign</c> to replace contents of one <c>IBookMarks</c> instance to another. The <c>Assign</c> method deletes all items from the destination collection then adds a copy of each item in the source bookmark collection.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.GetBookMark(System.Int32)">
            <summary>
            Finds the first bookmark in the <c>BookMarks</c> collection located within the specified text line.
            </summary>
            <param name="line">The integer value that specifies index of the text line where to find bookmark.</param>
            <returns>Bookmark index if the bookmarks was found; otherwise -1.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.GetBookMark(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Finds the first bookmark in the <c>BookMarks</c> collection that locates within the specified range.
            </summary>
            <param name="startPoint">The Point value that specifies start position to find.</param>
            <param name="endPoint">The Point value that specifies end position to to find.</param>
            <returns>Bookmark index if the bookmarks was found; otherwise -1.</returns>
            <remarks>The X-coordinates of the startPoint and endPoint structures represents the position within the text line. The Y-coordinates represents the index of the text line.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.GetBookMarks(System.Drawing.Point,System.Drawing.Point,System.Collections.Generic.IList{QWhale.Editor.TextSource.IBookMark})">
            <summary>
            Finds all bookmarks in the <c>BookMarks</c> collection located within the specified range.
            </summary>
            <param name="startPoint">The Point value that specifies start position to find.</param>
            <param name="endPoint">The Point value that specifies end position to find.</param>
            <param name="list">Represents the collection of the bookmarks located within the specified range.</param>
            <returns>The number of the bookmarks located within the specified range.</returns>
            <remarks>The X-coordinates of the startPoint and endPoint structures represents the position within the text line. The Y-coordinates represents the index of the text line.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.FindBookMark(System.Int32)">
            <summary>
            Locates the bookmark with specified <c>Index</c>.
            </summary>
            <param name="bookMark">The integer value that specifies index of the bookmark to find.</param>
            <returns>IBookmark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.FindBookMark(System.Int32,System.Int32)">
            <summary>
            Locates the bookmark with specified index within the specified line.
            </summary>
            <param name="bookMark">The integer value that specifies <c>Index</c> of the bookmark to find.</param>
            <param name="line">The integer value that specifies index of the text line in where to locate bookmark.</param>
            <returns>The boormark ordinal index within a bookmarks collection if found; otherwize - 1.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.FindBookMark(System.String)">
            <summary>
            Locates the bookmark with specified <c>Name</c>.
            </summary>
            <param name="name">The string value that specifies <c>Name</c> of the bookmark to find.</param>
            <returns>IBookmark object if the bookmarks was found; otherwise null.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.SetBookMark(System.Int32,System.Int32)">
            <summary>
            Sets the bookmark with specified index to the position specifed by line parameter.
            </summary>
            <param name="line">The integer value that specifies index of the text line where to set bookmark.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.SetBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            Sets the bookmark with specified index to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.SetBookMark(QWhale.Editor.TextSource.IBookMark)">
            <summary>
            Sets the bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to set.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.SetBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            Sets the bookmark with specified index, name, description and url to the position specified by Point parameter.
            </summary>
            <param name="position">Specifies position of the <c>BookMark</c>.</param>
            <param name="bookMark">The integer value that specifies <c>BookMark</c> index.</param>
            <param name="name">The string value that specifies <c>BookMark</c> name.</param>
            <param name="description">The string value that specifies <c>BookMark</c> description.</param>
            <param name="url">The string value that specifies <c>BookMark</c> url.</param>
            <remarks>If the <c>Bookmark</c> with the same index already exists in the collection, the method removes it before inserting new <c>BookMark</c> to the <c>BookMarks</c> collection.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.FindBookMark(System.Int32,System.Drawing.Point@)">
            <summary>
            Locates the bookmark with specified <c>Index</c>.
            </summary>
            <param name="bookMark">The integer value that specifies index of the bookmark to find.</param>
            <param name="position">The out Point value to receive <c>Line</c> and <c>Pos</c> properties of the found bookmark.</param>
            <returns>True if the bookmark isfound; otherwise false.</returns>
            <remarks>If the search is not successfull the Point parameter obtain empty value.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ToggleBookMark(System.Int32,System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="line">Index of line where to toggle bookmark.</param>
            <param name="bookMark">The integer value that specifies index of the bookmark to toggle.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="bookMark">The integer value specifying index of the bookmark to toggle.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ToggleBookMark(QWhale.Editor.TextSource.IBookMark)">
            <summary>
            Sets or removes bookmark specified by bookMark parameter.
            </summary>
            <param name="bookMark">Specifies bookmark to toggle.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ToggleBookMark(System.Drawing.Point,System.Int32,System.String,System.String,System.String)">
            <summary>
            Sets or removes bookmark with specified index at the specified line.
            </summary>
            <param name="position">The Point value that specifies position of the bookmark (index of char and current line).</param>
            <param name="bookMark">The integer value that specifies index of the bookmark to toggle.</param>
            <param name="name">The string value that specifies name of the bookmark to toggle.</param>
            <param name="description">The string value that specifies description of the bookmark to toggle.</param>
            <param name="url">The string value that specifies url of the bookmark to toggle.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ToggleBookMark(System.Int32)">
            <summary>
            Sets or removes bookmark with specified index at the current line.
            </summary>
            <param name="bookMark">The integer value that specifies index of the bookmark to toggle.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ToggleBookMark">
            <summary>
            Sets or removes an unnumbered bookmark on the current line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ClearBookMark(System.Int32)">
            <summary>
            Finds the bookmark with specified index and removes it from bookmarks collection.
            <seealso cref="M:QWhale.Editor.TextSource.BookMarks.ClearBookMarkByIndex(System.Int32)"/>
            </summary>
            <param name="bookMark">The integer value that specifies bookmark index.</param>
            <remarks>If the bookmark is not found the method does nothing.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ClearBookMark(System.Int32,System.Int32)">
            <summary>
            Finds the bookmark by given index in a given line and removes its from bookmark collection.
            </summary>
            <param name="line">Index of line in lines collection.</param>
            <param name="bookmark">Index of the bookmark in the bookmark collection.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ClearBookMarkByIndex(System.Int32)">
            <summary>
            Removes the bookmark from bookmarks collection at the specified index. Updates state of the <c>TextSource</c> owning this collection.
            </summary>
            <param name="index">The integer value that specifies the zero-based index of bookmark in a bookmarks collection to remove.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.Clear">
            <summary>
            Removes all bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ClearBookMarks(System.Int32)">
            <summary>
            Removes all bookmarks from the specified line.
            </summary>
            <param name="line">The integer value that specifies index of the text line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ClearAllBookMarks">
            <summary>
            Removes all bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.ClearAllUnnumberedBookmarks">
            <summary>
            Removes all unnumbered bookmarks from the bookmarks collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.NextBookMark">
            <summary>
            Returns the minimal possible value of the bookmark <c>Index</c> property of the new bookmark.
            </summary>
            <returns>Bookmark index.</returns>
            <remarks>If the bookmarks collection is empy method returns 0.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.GotoBookMark(System.Int32)">
            <summary>
            Moves caret to the location of the bookmark in the text source.
            </summary>
            <param name="bookMark">The integer value that specifies bookmark <c>Index</c> property of the bookmark to locate.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.GotoNextBookMark">
            <summary>
            Moves to the location of the next unnumbered bookmark in the text source.
            </summary>
            <remarks>If the currently selected bookmark is the last bookmark within the bookmarks collection the method moves to the first bookmark.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.GotoPrevBookMark">
            <summary>
            Moves caret to the location of the previous unnumbered bookmark in the text source.
            </summary>
            <remarks>If the currently selected bookmark is the first bookmark within the bookmarks collection the method moves to the last bookmark.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all bookmarks within specified rectangle.
            </summary>
            <param name="rect">Specifies rectangle to check.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarks.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates all bookmarks starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Editor.SelectionState">
            <summary>
            Defines state of the selected text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionState.Drag">
            <summary>
            Specifies that selected text is dragged.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionState.Select">
            <summary>
            Specifies that some text part is selected.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionState.SelectWord">
            <summary>
            Specifies that Edit control tries to select words instead of single characters.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionState.SelectLine">
            <summary>
            Specifies that Edit control tries to select lines instead of single characters.
            </summary>
        </member>
        <member name="T:QWhale.Editor.AllowedSelectionMode">
            <summary>
            Defines which types of selection is allowed.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            <seealso cref="T:QWhale.Editor.SelectionType"/>
            </summary>
        </member>
        <member name="F:QWhale.Editor.AllowedSelectionMode.None">
            <summary>
            Specifies that no selection type is allowed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.AllowedSelectionMode.Stream">
            <summary>
            Specifies that only stream selection type is allowed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.AllowedSelectionMode.Block">
            <summary>
            Specifies that only block selection type is allowed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.SelectionOptions">
            <summary>
            Defines appearance and behaviour of selected text.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.DisableSelection">
            <summary>
            Disables to select any text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.DisableDragging">
            <summary>
            Disables dragging the selected text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.SelectBeyondEol">
            <summary>
            Specifies that selection is drawn beyond end of line.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.UseColors">
            <summary>
            Specifies that selection should paint preserving colors of the text fragments.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.HideSelection">
            <summary>
            Specifies that selected text should be draw as unselected text when control lost focus.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.SelectLineOnDblClick">
            <summary>
            Specifies that whole line should be selected instead of single word when user double clicks on some text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.DeselectOnCopy">
            <summary>
            Specifies that selection should be unselected when selected text copies to the Clipboard.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.PersistentBlocks">
            <summary>
            Specifies that selected text should be retained even when the cursor is moved, until a new block is selected.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.OverwriteBlocks">
            <summary>
            Specifies that selected text should be replaced of text with whatever is typed next.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.SmartFormat">
            <summary>
            Specifies that selected text should be formatted according to syntax rules when pasting.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.WordSelect">
            <summary>
            Specifies that Edit control should select words instead of single characters.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.DrawBorder">
            <summary>
            Specifies that Edit control should draw border around selection.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.SelectLineOnTripleClick">
            <summary>
            Specifies that whole line should be selected when user triple clicks on some text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.DeselectOnDblClick">
            <summary>
            Specifies that selection should be cleared by dblclick.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.ConvertToSpacesOnPaste">
            <summary>
            Specifies that selection should convert all tabs to spaces in the text being pasted when Lines.UseSpaces is on.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.RtfClipboard">
            <summary>
            Specifies that selection should copy it's content clipboard in rtf format.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.ClearOnDrag">
            <summary>
            Specifies that selection should be deleted when dragging from external source.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.CopyLineWhenEmpty">
            <summary>
            Specifies that copy and cut operation should process entire line when selection is empty.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.DisableCodeSnippetOnTab">
            <summary>
            Specifies that Edit control should not try to find and insert code snippet when tab key is pressed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.ExtendedBlockMode">
            <summary>
            Specifies that text entered in block selection mode affects all selected lines.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionOptions.SelectWordOnCtrlClick">
            <summary>
            Specifies that word should be selected when user  clicks on some text holding Ctrl Key.
            </summary>
        </member>
        <member name="T:QWhale.Editor.SelectionType">
            <summary>
            Defines type of the selection.
            <seealso cref="T:QWhale.Editor.AllowedSelectionMode"/>
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionType.None">
            <summary>
            Specifies that no text is selected.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionType.Stream">
            <summary>
            Specifies that selected text consists of consecutive characters.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SelectionType.Block">
            <summary>
            Specifies that selected text represents square block.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditHyperText">
            <summary>
            Represetns extended properties and methods to operate hypertext section within the text.
            <seealso cref="T:QWhale.Editor.TextSource.IHyperText"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditHyperText.Assign(QWhale.Editor.IEditHyperText)">
            <summary>
            When implemented by a class, copies the contents from another <c>IEditHyperText</c> object.
            </summary>
            <param name="source">Specifies <c>IEditHyperText</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IEditHyperText.UrlJump(System.String)">
            <summary>
            When implemented by a class, tries to launch default browser to process specified url.
            </summary>
            <param name="text">Specifies name of a document or application file to jump to.</param>
        </member>
        <member name="M:QWhale.Editor.IEditHyperText.ResetUrlStyle">
            <summary>
            When implemented by a class, resets the <c>UrlStyle</c> to the default value.
            </summary>
            <remarks>Use JumpToUrl to suppress launching default browser.</remarks>
        </member>
        <member name="M:QWhale.Editor.IEditHyperText.ResetUrlColor">
            <summary>
            When implemented by a class, resets the <c>UrlColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditHyperText.ResetShowHints">
            <summary>
            When implemented by a class, resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditHyperText.IsUrlAtPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditHyperText.IsUrlAtPoint(System.Int32,System.Int32,System.String@)">
            <summary>
            When implemented by a class, indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <param name="url">Receives text representation of url under text point.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditHyperText.IsUrlAtTextPoint(System.Int32,System.Int32,System.String@)">
            <summary>
            When implemented by a class, indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check in text coordinates.</param>
            <param name="y">The Y-constituent of Point value to check in text coordinates.</param>
            <param name="url">Receives text representation of url under text point.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.IEditHyperText.ShowHints">
            <summary>
            When implementing by a class, gets or sets value indicating whether default hint for hypertext section needs displaying when user moves mouse over the hypertext.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditHyperText.UrlStyle">
            <summary>
            When implemented by a class, gets or sets font style of highlighted urls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditHyperText.UrlColor">
            <summary>
            When implemented by a class, gets or sets a value that represents color of highlighted urls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditHyperText.HighlightHyperText">
            <summary>
            When implemented by a class, gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="P:QWhale.Editor.IEditHyperText.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IHyperText
            </summary>
        </member>
        <member name="E:QWhale.Editor.IEditHyperText.JumpToUrl">
            <summary>
            When implemented by a class, occurs when user attempts to jump to url.
            </summary>
        </member>
        <member name="T:QWhale.Editor.KeyData">
            <summary>
            Represents data for a particular record in the Hashtable that contains keys with attached actions.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IKeyData">
            <summary>
            Represents properties and methods describing some data attached to the particular key.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IKeyData.EventName">
            <summary>
            When implemented by a class, represents a name of the action 
            </summary>
        </member>
        <member name="P:QWhale.Editor.IKeyData.Keys">
            <summary>
            When implemented by a class, represents a key to which some action is attached.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IKeyData.Param">
            <summary>
            When implemented by a class, represents an object passed as a parameter to the extended action.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IKeyData.State">
            <summary>
            When implemented by a class, represents a state of the Edit control before key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IKeyData.LeaveState">
            <summary>
            When implemented by a class, represents a state of the Edit control after key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IKeyData.ActionEx">
            <summary>
            When implemented by a class, represents extended action that executes when the key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IKeyData.Action">
            <summary>
            When implemented by a class, represents an action that executes when the key is pressed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.KeyData.#ctor">
            <summary>
            Initializes a new instance of the <c>KeyListData</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.KeyData.#ctor(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent,QWhale.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>KeyListData</c> class with specified parameters.
            </summary>
            <param name="keys">Specifies key data of this new instance.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="actionEx">Extended action that executes when the key is pressed.</param>
            <param name="state">State of the Edit control before key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.KeyData.ToString">
            <summary>
            Converts <c>KeyListData</c> content to string.
            </summary>
            <returns>String that represents this <c>KeyListData</c>.</returns>
        </member>
        <member name="P:QWhale.Editor.KeyData.Keys">
            <summary>
            Key to which some action is attached.
            </summary>
        </member>
        <member name="P:QWhale.Editor.KeyData.Param">
            <summary>
            Object passed as a parameter to the extended action.
            </summary>
        </member>
        <member name="P:QWhale.Editor.KeyData.State">
            <summary>
            State of the Edit control before key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.KeyData.LeaveState">
            <summary>
            State of the Edit control after key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.KeyData.Action">
            <summary>
            Action that executes when the key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.KeyData.ActionEx">
            <summary>
            Extended action that executes when the key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.KeyData.EventName">
            <summary>
            String representation of the action 
            </summary>
        </member>
        <member name="T:QWhale.Editor.CreatePrintEditEventArgs">
            <summary>
            Provides data for the <c>CreatePrintEdit</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CreatePrintEditEventArgs.PrintEdit">
            <summary>
            Edit control that is created to be printed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CreatePrintEditEvent">
            <summary>
            Represents a method that will handle the <c>Printing.CreatePrintEdit</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>CreatePrintEditEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlSelectionInfo">
            <summary>
            Contains information about <c>ISelection</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSelectionInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.#ctor(QWhale.Editor.ISelection)">
            <summary>
            Initializes a new instance of the <c>XmlSelectionInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Selection</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>FontColor</c> property should be persisted.
            </summary>
            <returns>True if <c>FontColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.ShouldSerializeInActiveBackColor">
            <summary>
            Indicates whether the <c>InActiveBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.ShouldSerializeInActiveForeColor">
            <summary>
            Indicates whether the <c>InActiveForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <c>BorderColor</c> property should be persisted.
            </summary>
            <returns>True if <c>InActiveForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.ShouldSerializeAllowedSelectionMode">
            <summary>
            Indicates whether the <c>AllowedSelectionMode</c> property should be persisted.
            </summary>
            <returns>True if <c>AllowedSelectionMode</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSelectionInfo.ShouldSerializeSelectionRect">
            <summary>
            Indicates whether the <c>SelectionRect</c> property should be persisted.
            </summary>
            <returns>True if <c>SelectionRect</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.SelectionRect">
            <summary>
            Stores <c>ISelection.SelectionRect</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.SelectionType">
            <summary>
            Stores <c>ISelection.SelectionType</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.Options">
            <summary>
            Stores <c>ISelection.Options</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.AllowedSelectionMode">
            <summary>
            Stores <c>ISelection.AllowedSelectionMode</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.ForeColor">
            <summary>
            Stores <c>ISelection.ForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.BackColor">
            <summary>
            Stores <c>ISelection.BackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.InActiveForeColor">
            <summary>
            Stores <c>ISelection.InActiveForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.InActiveBackColor">
            <summary>
            Stores <c>ISelection.InActiveBackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSelectionInfo.BorderColor">
            <summary>
            Stores <c>ISelection.BorderColor</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlEditLineStylesInfo">
            <summary>
            Contains information about <c>IEditLineStyles</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStylesInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStylesInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStylesInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlEditLineStylesInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStylesInfo.#ctor(QWhale.Editor.IEditLineStyles)">
            <summary>
            Initializes a new instance of the <c>XmlEditLineStylesInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IEditLineStyles</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditLineStylesInfo.ShouldSerializeStyles">
            <summary>
            Indicates whether the <c>Styles</c> property should be persisted.
            </summary>
            <returns>True if <c>Styles</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditLineStylesInfo.Styles">
            <summary>
            Stores <c>IEditLineStyle</c> collection from <c>IEditLineStyles</c> object.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlGutterInfo">
            <summary>
            Contains information about <c>IGutter</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeLineNumbersForeColor">
            <summary>
            Indicates whether the <c>LineNumbersForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeLineNumbersBackColor">
            <summary>
            Indicates whether the <c>LineNumbersBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeLineBookmarksColor">
            <summary>
            Indicates whether the <c>LineBookmarksColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineBookmarksColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeLineModificatorChangedColor">
            <summary>
            Indicates whether the <c>LineModificatorChangedColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineModificatorChangedColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeLineModificatorSavedColor">
            <summary>
            Indicates whether the <c>LineModificatorSavedColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineModificatorSavedColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeWidth">
            <summary>
            Indicates whether the <c>Width</c> property should be persisted.
            </summary>
            <returns>True if <c>Width</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeUserMarginWidth">
            <summary>
            Indicates whether the <c>UserMarginWidth</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginWidth</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeUserMarginForeColor">
            <summary>
            Indicates whether the <c>UserMarginForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeUserMarginBackColor">
            <summary>
            Indicates whether the <c>UserMarginBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeUserMarginText">
            <summary>
            Indicates whether the <c>UserMarginText</c> property should be persisted.
            </summary>
            <returns>True if <c>UserMarginText</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeLineNumbersStart">
            <summary>
            Indicates whether the <c>LineNumbersStart</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersStart</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeLineNumbersLeftIndent">
            <summary>
            Indicates whether the <c>LineNumbersLeftIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersLeftIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeLineNumbersRightIndent">
            <summary>
            Indicates whether the <c>LineNumbersRightIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>LineNumbersRightIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeOutliningLeftIndent">
            <summary>
            Indicates whether the <c>OutliningLeftIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>OutliningLeftIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeOutliningRightIndent">
            <summary>
            Indicates whether the <c>OutliningRightIndent</c> property should be persisted.
            </summary>
            <returns>True if <c>OutliningRightIndent</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeBookMarkImageIndex">
            <summary>
            Indicates whether the <c>BookMarkImageIndex</c> property should be persisted.
            </summary>
            <returns>True if <c>BookMarkImageIndex</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeWrapImageIndex">
            <summary>
            Indicates whether the <c>WrapImageIndex</c> property should be persisted.
            </summary>
            <returns>True if <c>WrapImageIndex</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlGutterInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlGutterInfo.#ctor(QWhale.Editor.IGutter)">
            <summary>
            Initializes a new instance of the <c>XmlGutterInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IGutter</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.Width">
            <summary>
            Stores <c>IGutter.Width</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.BackColor">
            <summary>
            Stores color of the <c>IGutter.Brush</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.PenColor">
            <summary>
            Stores color of the <c>IGutter.Pen</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.PenWidth">
            <summary>
            Stores width of the <c>IGutter.Pen</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.Visible">
            <summary>
            Stores <c>IGutter.Visible</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineNumbersStart">
            <summary>
            Stores <c>IGutter.LineNumbersStart</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineNumbersLeftIndent">
            <summary>
            Stores <c>IGutter.LineNumbersLeftIndent</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineNumbersRightIndent">
            <summary>
            Stores <c>IGutter.LineNumbersRightIndent</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineNumbersForeColor">
            <summary>
            Stores <c>IGutter.LineNumbersForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineNumbersBackColor">
            <summary>
            Stores <c>IGutter.LineNumbersBackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineNumbersAlignment">
            <summary>
            Stores <c>IGutter.LineNumbersAlignment</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.Options">
            <summary>
            Stores <c>IGutter.Options</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.BookMarkImageIndex">
            <summary>
            Stores <c>IGutter.BookMarkImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.WrapImageIndex">
            <summary>
            Stores <c>IGutter.WrapImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.DrawLineBookmarks">
            <summary>
            Stores <c>IGutter.DrawLineBookmarks</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.ShowBookmarkHints">
            <summary>
            Stores <c>IGutter.ShowBookmarkHints</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineBookmarksColor">
            <summary>
            Stores <c>IGutter.LineBookmarksColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineModificatorChangedColor">
            <summary>
            Stores <c>IGutter.LineModificatorChangedColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.LineModificatorSavedColor">
            <summary>
            Stores <c>IGutter.LineModificatorSavedColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.UserMarginForeColor">
            <summary>
            Stores <c>IGutter.UserMarginForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.UserMarginBackColor">
            <summary>
            Stores <c>IGutter.UserMarginForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.UserMarginText">
            <summary>
            Stores <c>IGutter.UserMarginText</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.UserMarginWidth">
            <summary>
            Stores <c>IGutter.UserMarginWidth</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.OutliningLeftIndent">
            <summary>
            Stores <c>IGutter.OutliningLeftIndent</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlGutterInfo.OutliningRightIndent">
            <summary>
            Stores <c>IGutter.OutliningRightIndent</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlEditPageInfo">
            <summary>
            Contains information about <c>IEditPage</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlEditPageInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.#ctor(QWhale.Editor.IEditPage)">
            <summary>
            Initializes a new instance of the <c>XmlEditPageInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IEditPage</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.ShouldSerializeLandscape">
            <summary>
            Indicates whether the <c>Landscape</c> property should be persisted.
            </summary>
            <returns>True if <c>Landscape</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.ShouldSerializeMargins">
            <summary>
            Indicates whether the <c>Margins</c> property should be persisted.
            </summary>
            <returns>True if <c>Margins</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.ShouldSerializePageKind">
            <summary>
            Indicates whether the <c>PageKind</c> property should be persisted.
            </summary>
            <returns>True if <c>PageKind</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.ShouldSerializePageSize">
            <summary>
            Indicates whether the <c>PageSize</c> property should be persisted.
            </summary>
            <returns>True if <c>PageSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.ShouldSerializeHorzOffset">
            <summary>
            Indicates whether the <c>HorzOffset</c> property should be persisted.
            </summary>
            <returns>True if <c>HorzOffset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPageInfo.ShouldSerializeVertOffset">
            <summary>
            Indicates whether the <c>VertOffset</c> property should be persisted.
            </summary>
            <returns>True if <c>VertOffset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.Header">
            <summary>
            Stores <c>IEditPage.Header</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.Footer">
            <summary>
            Stores <c>IEditPage.Footer</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.HorzOffset">
            <summary>
            Stores <c>IEditPage.HorzOffset</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.VertOffset">
            <summary>
            Stores <c>IEditPage.VertOffset</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.Margins">
            <summary>
            Stores <c>IEditPage.Margins</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.PageSize">
            <summary>
            Stores <c>IEditPage.PageSize</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.PageKind">
            <summary>
            Stores <c>IEditPage.PageKind</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.Landscape">
            <summary>
            Stores <c>IEditPage.Landscape</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPageInfo.PaintNumber">
            <summary>
            Stores <c>IEditPage.PaintNumber</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlDisplayStringsInfo">
            <summary>
            Contains information about <c>IDisplayStrings</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlDisplayStringsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlDisplayStringsInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlDisplayStringsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlDisplayStringsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlDisplayStringsInfo.#ctor(QWhale.Editor.IDisplayStrings)">
            <summary>
            Initializes a new instance of the <c>XmlDisplayStringsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IDisplayStrings</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlDisplayStringsInfo.WordWrap">
            <summary>
            Stores <c>IDisplayStrings.WordWrap</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlDisplayStringsInfo.WrapAtMargin">
            <summary>
            Stores <c>IDisplayStrings.WrapAtMargin</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlColorThemesInfo">
            <summary>
            Contains information about <c>IColorTheme</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemesInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemesInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemesInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlColorThemesInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemesInfo.#ctor(QWhale.Editor.Dialogs.IColorThemes)">
            <summary>
            Initializes a new instance of the <c>XmlColorThemesInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IColorThemes</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemesInfo.ShouldSerializeColorTheme">
            <summary>
            Indicates whether the <c>ColorTheme</c> property should be persisted.
            </summary>
            <returns>True if <c>ColorTheme</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemesInfo.ColorThemes">
            <summary>
            Stores <c>IColorThemes.ColorThemes</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemesInfo.ActiveThemeIndex">
            <summary>
            Stores <c>IColorThemes.ActiveThemeIndex</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.EditorSettingsTab">
            <summary>
            Defines list of tabs for editor settings dialog.
            </summary>
        </member>
        <member name="F:QWhale.Editor.Dialogs.EditorSettingsTab.None">
            <summary>
            No tab.
            </summary>
        </member>
        <member name="F:QWhale.Editor.Dialogs.EditorSettingsTab.General">
            <summary>
            General tab.
            </summary>
        </member>
        <member name="F:QWhale.Editor.Dialogs.EditorSettingsTab.Additional">
            <summary>
            Additional settings tab.
            </summary>
        </member>
        <member name="F:QWhale.Editor.Dialogs.EditorSettingsTab.FontsAndColors">
            <summary>
            Fonts and Colors tab.
            </summary>
        </member>
        <member name="F:QWhale.Editor.Dialogs.EditorSettingsTab.Keymapping">
            <summary>
            Keymapping tab.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.IEditorSettingsDialog">
            <summary>
            Represents properties and methods to change editor settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IEditorSettingsDialog.ShowDialog">
            <summary>
            When implemented by a class, runs a print options dialog box.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IEditorSettingsDialog.ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, runs a print options dialog box.
            </summary>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IEditorSettingsDialog.Execute(QWhale.Editor.Dialogs.EditorSettingsTab)">
            <summary>
            When implemented by a class, initializes and runs a editor settings dialog box.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.IEditorSettingsDialog.Execute(QWhale.Editor.Dialogs.EditorSettingsTab,System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs a editor settings dialog box.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IEditorSettingsDialog.SyntaxSettings">
            <summary>
            When implemented by a class, gets or sets object that implements <c>ISyntaxSettings</c> for this dialog.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Dialogs.IEditorSettingsDialog.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.UndoData">
            <summary>
            Represents data for a single undo operation.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.IUndoData">
            <summary>
            Represents data for a single undo operation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndoData.Operation">
            <summary>
            When implemented by a class, represents the type of the undo operation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndoData.Reason">
            <summary>
            When implemented by a class, represents the reason of the undo operation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndoData.UpdateCount">
            <summary>
            When implemented by a class, keeps track of nested undo operations.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndoData.UndoFlag">
            <summary>
            Reserwed for internal use.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndoData.Data">
            <summary>
            When implemented by a class, represents the object associated with this <c>IUndoData</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.IUndoData.Position">
            <summary>
            When implemented by a class, represents the position of the undoable operation within the text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.UndoData.#ctor(QWhale.Editor.TextSource.UndoOperation,System.Object)">
            <summary>
            Initializes a new instance of the <c>UndoData</c> class with specified parameters.
            </summary>
            <param name="operation">Specifies type of the operation that can be undone.</param>
            <param name="data">The object stored within the <c>UndoData</c>.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.UndoData.Operation">
            <summary>
            Represents the type of the undo operation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.UndoData.Reason">
            <summary>
            Represents the reason of the undo operation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.UndoData.UpdateCount">
            <summary>
            Number of undo operations that can be executed as single block.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.UndoData.UndoFlag">
            <summary>
            Reserwed for internal use.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.UndoData.Data">
            <summary>
            Represents the object associated with this <c>UndoData</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.UndoData.Position">
            <summary>
            Represents the position of the undoable operation within the text.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.HyperText">
            <summary>
            This class is designed to recognize whether some text represents hypertext.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.HyperText.IsEmailString(System.String)">
            <summary>
            Indicates whether given text is e-mail address.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is e-mail address; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.HyperText.IsWWWString(System.String)">
            <summary>
            Indicates whether given text is internet address within the World Wide Web.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is internet address; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.HyperText.IsHttpString(System.String)">
            <summary>
            Indicates whether given text is internet address used Hypertext Transfer Protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is internet address; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.HyperText.IsFtpString(System.String)">
            <summary>
            Indicates whether given text is address string for File Transfer Protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is Ftp address; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.HyperText.IsGopherString(System.String)">
            <summary>
            Indicates whether given text is internet address string for the Gopher protocol.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is Gopher address; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.HyperText.IsFileString(System.String)">
            <summary>
            Indicates whether given text is address string for the local file on the disk.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is local file address; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.HyperText.IsHyperText(System.String)">
            <summary>
            Indicates whether given text is hypertext.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is hypertext; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Editor.TextSource.WordSpellEventArgs">
            <summary>
            Provides data for the <c>WordSpellEvent</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.WordSpellEventArgs.Text">
            <summary>
            Represents string to check.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.WordSpellEventArgs.Correct">
            <summary>
            Represents a value indicating whether <c>WordSpellEventArgs.Text</c> has correct spelling.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.WordSpellEventArgs.ColorStyle">
            <summary>
            Represents index of lexical style in <c>LexStyles</c> collection for <c>WordSpellEventArgs.Text</c>. 
            This allows to skip checking spelling for keywords, numbers or identifiers.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.WordSpellEventArgs.#ctor(System.String,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <c>WordSpellEventArgs</c> class with specified parameters.
            </summary>
            <param name="text">Text to check.</param>
            <param name="correct">Specifies whether text spelling is correct.</param>
            <param name="colorStyle">Color style for text to check-up.</param>
        </member>
        <member name="T:QWhale.Editor.TextSource.WordSpellEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.WordSpell</c>, <c>TextSource.WordSpell</c> or <c>Spelling.WordSpell</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>WordSpellEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Editor.IEditSpelling">
            <summary>
            Represents properties and methods to allowing to visually highlight mispelled words in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditSpelling.Assign(QWhale.Editor.IEditSpelling)">
            <summary>
            When implemented by a class, copies the contents from another <c>IEditSpelling</c> object.
            </summary>
            <param name="source">Specifies <c>IEditSpelling</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IEditSpelling.ResetSpellColor">
            <summary>
            When implemented by a class, resets the <c>SpellColor</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSpelling.SpellColor">
            <summary>
            When implemented by a class, gets or sets a value representing color to draw wavy underlines under mispelled words.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSpelling.CheckSpelling">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
            Added to provide a workaround for C++ CodeDOM parser
        </member>
        <member name="P:QWhale.Editor.IEditSpelling.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IEditSpelling
            </summary>
        </member>
        <member name="T:QWhale.Editor.IScrollingButton">
            <summary>
            Represents properties specifying appearance and behaviour of button displayed on the scroll bar.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IScrollingButton.Assign(QWhale.Editor.IScrollingButton)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrollingButton</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButton</c> to assign.</param>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.Images">
            <summary>
            When implemented by a class, gets or sets the ImageList for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether this <c>IScrollingButton</c> is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.BorderStyle">
            <summary>
            When implemented by a class, gets or sets the border style for this <c>IScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.GroupIndex">
            <summary>
            When implemented by a class, gets or sets a value allows buttons to work together as a group.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.Checked">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether button appears pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.AllowCheck">
            <summary>
            When implemented by a class, gets or sets a value indicating whehter button should automatically appear pressed in and not pressed in when clicked.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.Scrolling">
            <summary>
            When implemented by a class, gets or sets <c>IScrolling</c> contains this button.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.Button">
            <summary>
            When implemented by a class, represents windowed control that appears as a button.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrollingButton.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>IScrollingButton</c> object.
            </summary>
        </member>
        <member name="T:QWhale.Editor.NotifyEventArgs">
            <summary>
            Provides data for the <c>NotifyEvent</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.NotifyEventArgs.State">
            <summary>
            Represents the reason of change.
            </summary>
        </member>
        <member name="F:QWhale.Editor.NotifyEventArgs.FirstChanged">
            <summary>
            Represents index of the first changed line in the text portion of the control.
            </summary>
        </member>
        <member name="F:QWhale.Editor.NotifyEventArgs.LastChanged">
            <summary>
            Represents index of the last changed line in the text portion of the control.
            </summary>
        </member>
        <member name="F:QWhale.Editor.NotifyEventArgs.Update">
            <summary>
            Indicates whether <c>ISyntaxEdit</c> control should update its scroll bars and caret position.
            </summary>
        </member>
        <member name="M:QWhale.Editor.NotifyEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <c>NotifyEventArgs</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.NotifyEventArgs.#ctor(QWhale.Editor.TextSource.NotifyState,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>NotifyEventArgs</c> class with specified parameters.
            </summary>
            <param name="state">State of the new instance.</param>
            <param name="first">First changed line of new instance.</param>
            <param name="last">Last changed line of new instance.</param>
            <param name="update">Specifies Update field of the instance.</param>
        </member>
        <member name="T:QWhale.Editor.NotifyEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.SourceStateChanged</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>NotifyEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Editor.LineSeparator">
            <summary>
            Represents properties and methods used to separate lines and highlight current line within the Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ILineSeparator">
            <summary>
            Represents properties and methods used to separate lines and highlight current line within the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.Assign(QWhale.Editor.ILineSeparator)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineSeparator</c> object.
            </summary>
            <param name="source">Specifies <c>ILineSeparator</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.NeedHighlight">
            <summary>
            When implemented by a class, indicates whether Edit control owning the <c>ILineSeparator</c> need to highlight the current line.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.NeedHide">
            <summary>
            When implemented by a class, indicates whether Edit control owning the <c>ILineSeparator</c> needs to hide highlighting of the current line when loosing input focus.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.ResetHighlightForeColor">
            <summary>
            When implemented by a class, resets the <c>HighlightForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.ResetHighlightBackColor">
            <summary>
            When implemented by a class, resets the <c>HighlightBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.ResetLineColor">
            <summary>
            When implemented by a class, resets the <c>LineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.ResetContentDividerColor">
            <summary>
            When implemented by a class, resets the <c>ContentDividerColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.TempHighlightLine(System.Int32)">
            <summary>
            When implemented by a class, temporary highlights specifies line until Edit control state changed.
            </summary>
            <param name="index">Index of line to highlight.</param>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.TempUnhighlightLine">
            <summary>
            Removes highlightning from temporary highlighted line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.NeedHighlightLine(System.Int32)">
            <summary>
            When implemented by a class, gets boolean value indicating that given line should be highlighted.
            <param name="index">Specifies line index.</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.ILineSeparator.NeedHighlightDisplayLine(System.Int32)">
            <summary>
            Gets boolean value indicating that given line should be highlighted.
            <param name="index">Specifies line index in display coordinates.</param>
            </summary>
        </member>
        <member name="P:QWhale.Editor.ILineSeparator.Options">
            <summary>
            When implemented by a class, gets or sets a set of flags customizing appearance and behaviour of the <c>ILineSeparator</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ILineSeparator.HighlightBackColor">
            <summary>
            When implemented by a class, gets or sets a background color of highlighted line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ILineSeparator.HighlightForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of highlighted line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ILineSeparator.LineColor">
            <summary>
            When implemented by a class, gets or sets color of horizontal lines between particular lines in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ILineSeparator.ContentDividerColor">
            <summary>
            When implemented by a class, gets or sets color of horizontal lines between text sections in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ILineSeparator.SerializationInfo">
            <summary>
            Gets or sets an xml representation of ILineSeparator
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.#ctor">
            <summary>
            Initializes a new instance of the <c>LineSeparator</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>LineSeparator</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ShouldSerializeHighlightBackColor">
            <summary>
            Indicates whether the <c>HighlightBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>HighlightBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ShouldSerializeHighlightForeColor">
            <summary>
            Indicates whether the <c>HighlightForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>HighlightForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ShouldSerializeLineColor">
            <summary>
            Indicates whether the <c>LineColor</c> property should be persisted.
            </summary>
            <returns>True if <c>LineColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ShouldSerializeContentDividerColor">
            <summary>
            Indicates whether the <c>ContentDividerColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ContentDividerColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.BeginUpdate">
            <summary>
            Prevents LineSeparator updating until calling <c>LineSeparator.EndUpdate</c> method.
            </summary>
            <returns>Number of LineSeparator updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>LineSeparator.BeginUpdate</c> method.
            </summary>
            <returns>Number of LineSeparator updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.DisableUpdate">
            <summary>
            Prevents LineSeparator updating until calling <c>LineSeparator.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.EnableUpdate">
            <summary>
            Re-enables LineSeparator updating, that was turn of by calling <c>LineSeparator.BeginUpdate</c> method.
            </summary>
            <returns>Number of LineSeparator updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.Update">
            <summary>
            Invalidates editor if needed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.Assign(QWhale.Editor.ILineSeparator)">
            <summary>
            Copies the contents from another <c>ILineSeparator</c> object.
            </summary>
            <param name="source">Specifies <c>ILineSeparator</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.NeedHighlightLine(System.Int32)">
            <summary>
            Gets boolean value indicating that given line should be highlighted.
            <param name="index">Specifies line index.</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.NeedHighlightDisplayLine(System.Int32)">
            <summary>
            Gets boolean value indicating that given line should be highlighted.
            <param name="index">Specifies line index in display coordinates.</param>
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.NeedHighlight">
            <summary>
            Indicates whether Edit control owning the <c>LineSeparator</c> need to highlight the current line.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.NeedHide">
            <summary>
            Indicates whether Edit control owning the <c>LineSeparator</c> needs to hide highlighting of the current line when loosing input focus.
            </summary>
            <returns>True if need; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ResetHighlightForeColor">
            <summary>
            Resets the <c>HighlightForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ResetHighlightBackColor">
            <summary>
            Resets the <c>HighlightBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ResetLineColor">
            <summary>
            Resets the <c>LineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.ResetContentDividerColor">
            <summary>
            Resets the <c>ContentDividerColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.TempHighlightLine(System.Int32)">
            <summary>
            Temporary highlights specifies line until Edit control state changed.
            </summary>
            <param name="index">Index of line to highlight.</param>
        </member>
        <member name="M:QWhale.Editor.LineSeparator.TempUnhighlightLine">
            <summary>
            Removes highlightning from temporary highlighted line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.LineSeparator.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.LineSeparator.Options">
            <summary>
            Gets or sets a set of flags customizing appearance and behaviour of the <c>LineSeparator</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.LineSeparator.HighlightBackColor">
            <summary>
            Gets or sets a background color of highlighted line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.LineSeparator.HighlightForeColor">
            <summary>
            Gets or sets a foreground color of highlighted line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.LineSeparator.LineColor">
            <summary>
            Gets or sets color of horizontal lines between particular lines in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.LineSeparator.ContentDividerColor">
            <summary>
            Gets or sets color of horizontal lines between particular sections (for example, methods) in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.LineSeparator.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>LineSeparator</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo">
            <summary>
            Contains information about <c>ITextSource</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlTextSourceInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.#ctor(QWhale.Editor.TextSource.ITextSource)">
            <summary>
            Initializes a new instance of the <c>XmlTextSourceInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ITextSource</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ShouldSerializeOpenBraces">
            <summary>
            Indicates whether the <c>OpenBraces</c> property should be persisted.
            </summary>
            <returns>True if <c>OpenBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ShouldSerializeClosingBraces">
            <summary>
            Indicates whether the <c>ClosingBraces</c> property should be persisted.
            </summary>
            <returns>True if <c>ClosingBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ShouldSerializeNavigateOptions">
            <summary>
            Indicates whether the <c>NavigateOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>NavigateOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ShouldSerializeUndoOptions">
            <summary>
            Indicates whether the <c>UndoOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>UndoOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ShouldSerializeIndentOptions">
            <summary>
            Indicates whether the <c>IndentOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>IndentOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ShouldSerializePosition">
            <summary>
            Indicates whether the <c>Position</c> property should be persisted.
            </summary>
            <returns>True if <c>Position</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ShouldSerializeLineStyles">
            <summary>
            Indicates whether the <c>LineStyles</c> property should be persisted.
            </summary>
            <returns>True if <c>LineStyles</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ShouldSerializeBookMarks">
            <summary>
            Indicates whether the <c>BookMarks</c> property should be persisted.
            </summary>
            <returns>True if <c>BookMarks</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.BracesOptions">
            <summary>
            Stores <c>ITextSource.BracesOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.MaxLength">
            <summary>
            Stores <c>ITextSource.MaxLength</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.SingleLineMode">
            <summary>
            Stores <c>ITextSource.SingleLineMode</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.FileName">
            <summary>
            Stores <c>ITextSource.FileName</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.Position">
            <summary>
            Stores <c>ITextSource.Position</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.BookMarks">
            <summary>
            Stores <c>ITextSource.BookMarks</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.LineStyles">
            <summary>
            Stores <c>ITextSource.LineStyles</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.OpenBraces">
            <summary>
            Stores <c>ITextSource.OpenBraces</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ClosingBraces">
            <summary>
            Stores <c>ITextSource.ClosingBraces</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.NavigateOptions">
            <summary>
            Stores <c>ITextSource.NavigateOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.ReadOnly">
            <summary>
            Stores <c>ITextSource.ReadOnly</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.OverWrite">
            <summary>
            Stores <c>ITextSource.OverWrite</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.IndentOptions">
            <summary>
            Stores <c>ITextSource.IndentOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.UndoOptions">
            <summary>
            Stores <c>ITextSource.UndoOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.UndoLimit">
            <summary>
            Stores <c>ITextSource.UndoLimit</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.HighlightHyperText">
            <summary>
            Stores <c>ITextSource.HighlightUrls</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.CheckSpelling">
            <summary>
            Stores <c>ITextSource.CheckSpelling</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.Lexer">
            <summary>
            Stores <c>ITextSource.Lexer</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlTextSourceInfo.TextStrings">
            <summary>
            Stores <c>ITextSource.Lines</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.Serialization.XmlBracesInfo">
            <summary>
            Contains information about <c>IEditBraceMatching</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlBracesInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>ForeColor</c> should be persisted.
            </summary>
            <returns>True if <c>ForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.ShouldSerializeFontStyle">
            <summary>
            Indicates whether the <c>Style</c> property should be persisted.
            </summary>
            <returns>True if <c>Style</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.ShouldSerializeOpenBraces">
            <summary>
            Indicates whether the <c>OpenBraces</c> should be persisted.
            </summary>
            <returns>True if <c>OpenBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.ShouldSerializeClosingBraces">
            <summary>
            Indicates whether the ClosingBraces property should be persisted.
            </summary>
            <returns>True if ClosingBraces differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.#ctor(QWhale.Editor.IEditBraceMatching)">
            <summary>
            Initializes a new instance of the <c>XmlBracesInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IEditBraceMatching</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.OpenBraces">
            <summary>
            Stores <c>IEditBraceMatching.OpenBraces</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.ClosingBraces">
            <summary>
            Stores <c>IEditBraceMatching.ClosingBraces</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.BracesOptions">
            <summary>
            Stores <c>IEditBraceMatching.BracesOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.ForeColor">
            <summary>
            Stores <c>IEditBraceMatching.ForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.BackColor">
            <summary>
            Stores <c>IEditBraceMatching.BackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.FontStyle">
            <summary>
            Stores style of the <c>IEditBraceMatching.Style</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlBracesInfo.UseRoundRect">
            <summary>
            Stores style of the <c>IEditBraceMatching.UseRoundRect</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.CodeSnippetRanges">
            <summary>
            Represents collection containing list of code snippet literals.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ICodeSnippetRanges">
            <summary>
            Represents methods to provide an indexed access to individual <c>ICodeSnippetRange</c> object.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.NeedClear(System.Int32)">
            <summary>
            When implemented by a class, obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="y">Line being changed.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.NeedClear(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="rect">Rectangle specifying block being deleted.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, changes positions of any code snippet located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="preserveBounds">Specifies whether snippet bounds should be preserved.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all snippets from the snippet collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove snippets.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.GetFirstSnippet">
            <summary>
            When implemented by a class, finds first snippet in snippet collection with nonemtpy id.
            </summary>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.GetNextSnippet(System.Int32)">
            <summary>
            When implemented by a class, finds next snippet in snippet collection with diferent id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.GetPrevSnippet(System.Int32)">
            <summary>
            When implemented by a class, finds previous snippet in snippet collection with diferent id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.IsFirstSnippet(QWhale.Editor.TextSource.ICodeSnippetRange)">
            <summary>
            When implemented by a class, checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="range">Specified the code snippet</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.IsFirstSnippet(System.Int32)">
            <summary>
            When implemented by a class, checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="index">Specified index of the snippet.</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.FindSnippet(System.Drawing.Point,System.Boolean,System.Int32@)">
            <summary>
            When implemented by a class, locates code snippet at specified position.
            </summary>
            <param name="position">Position to locate code snippet.</param>
            <param name="exact">Specifies whether search should be precise.</param>
            <param name="index">Receives index of code snippet in the snippets collection.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ICodeSnippetRanges.Sort">
            <summary>
            When implemented by a class, sorts the snippet list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetList</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.NeedClear(System.Int32)">
            <summary>
            Obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="y">Line being changed.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.NeedClear(System.Drawing.Rectangle)">
            <summary>
            Obtains boolean value indicating whether all snippets need removing from the list.
            </summary>
            <param name="rect">Rectangle specifying block being deleted.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes positions of any code snippet located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="preserveBounds">Specifies whether snippet bounds should be preserved.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all snippets from the snippet collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove snippets.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.GetFirstSnippet">
            <summary>
            Finds first snippet in snippet collection with nonemtpy id.
            </summary>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.GetNextSnippet(System.Int32)">
            <summary>
            Finds next snippet in snippet collection with diferent id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.GetPrevSnippet(System.Int32)">
            <summary>
            Finds previous snippet in snippet collection with diferent id.
            </summary>
            <param name="index">Specified index of snippet to search from.</param>
            <returns>Index of found snippet.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.IsFirstSnippet(QWhale.Editor.TextSource.ICodeSnippetRange)">
            <summary>
            Checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="range">Specified the code snippet</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.IsFirstSnippet(System.Int32)">
            <summary>
            Checks whether code snippet represents first snippet in subset of snippets that have the same ids.
            </summary>
            <param name="index">Specified index of the snippet.</param>
            <returns>Returns True if snippet represents the first snippet with unique id.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.FindSnippet(System.Drawing.Point,System.Boolean,System.Int32@)">
            <summary>
            Locates code snippet at specified position.
            </summary>
            <param name="position">Position to locate code snippet.</param>
            <param name="exact">Specifies whether search should be precise.</param>
            <param name="index">Receives index of code snippet in the snippets collection.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRanges.Sort">
            <summary>
            Sorts the snippet list.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CompletionEdit">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.#ctor">
            <summary>
            Initializes a new instance of the <c>CompletionEdit</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.UpdateSize">
            <summary>
            Updates size of this <c>ICompletionEdit</c> control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.Dispose(System.Boolean)">
            <summary>
            Destroys the instance of the <c>CompletionEdit</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#CreateGraphics">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#Invalidate">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#Invalidate(System.Drawing.Rectangle)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#Invalidate(System.Drawing.Region)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#PointToClient(System.Drawing.Point)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#PointToScreen(System.Drawing.Point)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#Focus">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#FindForm">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#BringToFront">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#Invoke(System.Delegate)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_CanFocus">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Visible">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Visible(System.Boolean)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Location">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Location(System.Drawing.Point)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Left">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Left(System.Int32)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Top">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Top(System.Int32)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Width">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Width(System.Int32)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Height">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Height(System.Int32)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Bounds(System.Drawing.Rectangle)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_ClientRectangle">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Parent">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Parent(System.Windows.Forms.Control)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Enabled">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#set_Enabled(System.Boolean)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_IsHandleCreated">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#get_Created">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#add_Click(System.EventHandler)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionEdit.QWhale#Common#IControl#remove_Click(System.EventHandler)">
            <summary>
            Represents a completion list box control. This class inherited from <c>ListBox</c> class and provides similar functionality for code completion requirements.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionEdit.EditBox">
            <summary>
            Represents a text box allowing to edit content of the <c>CompletionEdit</c>control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionEdit.Label">
            <summary>
            Represents a label associated with the edit <c>CompletionEdit</c>control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionEdit.PathLabel">
            <summary>
            Represents a path label associated with the edit <c>CompletionEdit</c>control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.HtmlExport">
            <summary>
            Represents class that can export Edit control's content to HTML format.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.FmtExport">
            <summary>
            Provides methods to save <c>IStringItem</c> elements.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtExport.WriteLine(QWhale.Syntax.IStringItem)">
            <summary>
            Saves a particular <c>IStringItem</c> object.
            </summary>
            <param name="item"><c>IStringItem</c> to save.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtExport.BeginWrite(System.IO.TextWriter,System.Object)">
            <summary>
            Starts writing routine.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="userData">Data to be saved.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtExport.EndWrite">
            <summary>
            Finalizes writing routine.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.FmtExport.Write">
            <summary>
            Saves entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.HtmlExport.#ctor">
            <summary>
            Initializes a new instance of the <c>HtmlExport</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.HtmlExport.BeginWrite(System.IO.TextWriter,System.Object)">
            <summary>
            Starts writing routine.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="userData">Data to be saved.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.HtmlExport.EndWrite">
            <summary>
            Finalizes writing routine.
            </summary>
        </member>
        <member name="T:QWhale.Editor.EditPage">
            <summary>
            Represents a particular page within Edit control content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditPage">
            <summary>
            Represents properties and methods to describe and manipulate with a particular page within Edit control content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPage.Assign(QWhale.Editor.IEditPage)">
            <summary>
            When implemented by a class, copies the contents of another <c>IEditPage</c> object.
            </summary>
            <param name="source">Specifies <c>IEditPage</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPage.Invalidate">
            <summary>
            When implemented by a class, invalidates the page.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPage.Paint(QWhale.Common.IPainter)">
            <summary>
            When implemented by a class, draws <c>IEditPage</c> object on specified graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPage.Update(System.Int32,System.Int32,System.Drawing.Point)">
            <summary>
            When implemented by a class, updates <c>IEditPage</c> state in accordance with specified parameters.
            </summary>
            <param name="startLine">New page's start line.</param>
            <param name="endLine">New page's end line.</param>
            <param name="origin">New page's origin.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPage.GetBounds(System.Boolean)">
            <summary>
            When implemented by a class, retrieves a bounds of the <c>IEditPage</c>.
            </summary>
            <param name="includeSpace">Specifies whether to include whitespace area.</param>
            <returns>Rectangle that bounded this <c>IEditPage</c>.</returns>
        </member>
        <member name="P:QWhale.Editor.IEditPage.WhiteSpaceTopRect">
            <summary>
            When implemented by a class, represents a whitespace area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.WhiteSpaceBottomRect">
            <summary>
            When implemented by a class, represents a whitespace area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.PageSize">
            <summary>
            When implemented by a class, gets or sets size (width and height) of this <c>IEditPage</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.Margins">
            <summary>
            When implemented by a class, gets or sets margins specifying offsets of editing area of this <c>IEditPage</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.PageKind">
            <summary>
            When implemented by a class, gets or sets kind of the page specifying standart paper size.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.PageRect">
            <summary>
            When implemented by a class, gets page's rectangle.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.Landscape">
            <summary>
            When implemented by a class, gets or sets boolean value that indicates the page orientation (landscape or portrait).
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.HorzOffset">
            <summary>
            When implemented by a class, gets or sets a horizontal indentation between pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.VertOffset">
            <summary>
            When implemented by a class, gets or sets a vertical indentation between pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.IsFirstPage">
            <summary>
            When implemented by a class, indicates whether this page is the first page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.IsLastPage">
            <summary>
            When implemented by a class, indicates whether this page is the last page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.PrevPage">
            <summary>
            When implemented by a class, represents a previous <c>IEditPage</c> within the Edit control pages collection.
            </summary>
            <remarks>Returns null if the page represents the first page.</remarks>
        </member>
        <member name="P:QWhale.Editor.IEditPage.NextPage">
            <summary>
            When implemented by a class, represents a next <c>IEditPage</c> within the Edit control pages collection.
            </summary>
            <remarks>Returns null if the page represents the last page.</remarks>
        </member>
        <member name="P:QWhale.Editor.IEditPage.Header">
            <summary>
            When implemented by a class, represents <c>IPageHeader</c> specifying page header.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.Footer">
            <summary>
            When implemented by a class, represents <c>IPageHeader</c> specifying page footer.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.Origin">
            <summary>
            When implemented by a class, represents page's absolute screen coordinate of the page within Edit control. 
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.BoundsRect">
            <summary>
            When implemented by a class, represents a bounding area of the page within the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.ClientRect">
            <summary>
            When implemented by a class, represents a client(editing) area of the page within Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.StartLine">
            <summary>
            When implemented by a class, represents starting line of the page within Edit control content in display coordinates.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.EndLine">
            <summary>
            When implemented by a class, represents ending line of the page within Edit control content in display coordinates.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.LeftIndent">
            <summary>
            When implemented by a class, gets or sets page's left indentation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.RightIndent">
            <summary>
            When implemented by a class, gets or sets page's right indentation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.TopIndent">
            <summary>
            When implemented by a class, gets or sets page's top indentation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.BottomIndent">
            <summary>
            When implemented by a class, gets or sets page's bottom indentation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.Index">
            <summary>
            When implemented by a class, represents ordinal number of page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.PaintNumber">
            <summary>
            When implemented by a class, get or sets a boolean value that indicates whether control should paint it's number at the bottom of page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.UsePrinterSettings">
            <summary>
            When implemented by a class, get or sets a boolean value that indicates whether control should use printer settings for calcuating page size, margin and orientation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.DisplayWidth">
            <summary>
            When implemented by a class, returns displayed page width.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.Pages">
            <summary>
            When implemented by a class, gets or sets pages collection that owns this page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPage.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IEditPage
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPage.#ctor(QWhale.Editor.IEditPages,QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>EditPage</c> with specified owner.
            </summary>
            <param name="pages">The <c>IEditPages</c> that contains this new instance.</param>
            <param name="owner">The <c>ISyntaxEdit</c> owner of the pages.</param>
        </member>
        <member name="M:QWhale.Editor.EditPage.Finalize">
            <summary>
            Destroys the instance of the <c>EditPage</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPage.ShouldSerializeLandscape">
            <summary>
            Indicates whether the <c>Landscape</c> property should be persisted.
            </summary>
            <returns>True if <c>Landscape</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.ShouldSerializeMargins">
            <summary>
            Indicates whether the <c>Margins</c> property should be persisted.
            </summary>
            <returns>True if <c>Margins</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.ShouldSerializePageKind">
            <summary>
            Indicates whether the <c>PageKind</c> property should be persisted.
            </summary>
            <returns>True if <c>PageKind</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.ShouldSerializePageSize">
            <summary>
            Indicates whether the <c>PageSize</c> property should be persisted.
            </summary>
            <returns>True if <c>PageSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.ShouldSerializeHorzOffset">
            <summary>
            Indicates whether the <c>HorzOffset</c> property should be persisted.
            </summary>
            <returns>True if <c>HorzOffset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.ShouldSerializeVertOffset">
            <summary>
            Indicates whether the <c>VertOffset</c> property should be persisted.
            </summary>
            <returns>True if <c>VertOffset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.BeginUpdate">
            <summary>
            Prevents page updating until calling <c>EditPage.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>EditPage.BeginUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.DisableUpdate">
            <summary>
            Prevents page updating until calling <c>EditPage.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.EnableUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>EditPage.BeginUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPage.Update">
            <summary>
            Recalculates page bounds.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPage.Update(System.Int32,System.Int32,System.Drawing.Point)">
            <summary>
            When implemented by a class, updates <c>IEditPage</c> state in accordance with specified parameters.
            </summary>
            <param name="startLine">New page's start line.</param>
            <param name="endLine">New page's end line.</param>
            <param name="origin">New page's origin.</param>
        </member>
        <member name="M:QWhale.Editor.EditPage.Update(System.Boolean)">
            <summary>
            Recalculates page bounds and content.
            </summary>
            <param name="changed">Indicates that page should recalculate it's content.</param>
        </member>
        <member name="M:QWhale.Editor.EditPage.Assign(QWhale.Editor.IEditPage)">
            <summary>
            Copies the contents of another <c>IEditPage</c> object.
            </summary>
            <param name="source">Specifies <c>IEditPage</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.EditPage.Invalidate">
            <summary>
            Invalidates the page.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPage.Paint(QWhale.Common.IPainter)">
            <summary>
            Draws <c>EditPage</c> object on specified graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
        </member>
        <member name="M:QWhale.Editor.EditPage.GetBounds(System.Boolean)">
            <summary>
            Retrieves a bounds of the <c>EditPage</c>.
            </summary>
            <param name="includeSpace">Specifies whether to include whitespace area.</param>
            <returns>Rectangle that bounded this <c>EditPage</c>.</returns>
        </member>
        <member name="P:QWhale.Editor.EditPage.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.PageSize">
            <summary>
            Gets or sets size (width and height) of this <c>EditPage</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.Margins">
            <summary>
            Gets or sets margins specifying offsets of editing area of this <c>EditPage</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.PageKind">
            <summary>
            Gets or sets kind of the page specifying standart paper size.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.PageRect">
            <summary>
            Gets page's rectangle.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.Landscape">
            <summary>
            Gets or sets boolean value that indicates the page orientation (landscape or portrait).
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.HorzOffset">
            <summary>
            Gets or sets a horizontal indentation between pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.VertOffset">
            <summary>
            Gets or sets a vertical indentation between pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.IsFirstPage">
            <summary>
            Indicates whether this page is the first page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.IsLastPage">
            <summary>
            Indicates whether this page is the last page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.PrevPage">
            <summary>
            Represents a previous <c>EditPage</c> within the Edit control pages collection.
            </summary>
            <remarks>Returns null if the page represents the first page.</remarks>
        </member>
        <member name="P:QWhale.Editor.EditPage.NextPage">
            <summary>
            Represents a next <c>EditPage</c> within the Edit control pages collection.
            </summary>
            <remarks>Returns null if the page represents the last page.</remarks>
        </member>
        <member name="P:QWhale.Editor.EditPage.Header">
            <summary>
            Represents <c>IEditPageHeader</c> specifying page header.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.Footer">
            <summary>
            Represents <c>IEditPageHeader</c> specifying page footer.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.Origin">
            <summary>
            Represents page's absolute screen coordinate of the page within Edit control. 
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.BoundsRect">
            <summary>
            Represents a bounding area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.ClientRect">
            <summary>
            Represents a client(editing) area of the page within Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.StartLine">
            <summary>
            Represents starting line of the page within Edit control content in display coordinates.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.EndLine">
            <summary>
            Represents ending line of the page within Edit control content in display coordinates.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.Index">
            <summary>
            Represents ordinal number of page within the Edit control pages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.PaintNumber">
            <summary>
            Get or sets a boolean value that indicates whether control should paint it's number at the bottom of page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.UsePrinterSettings">
            <summary>
            Get or sets a boolean value that indicates whether control should use printer settings for calcuating page size, margin and orientation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.DisplayWidth">
            <summary>
            Returns displayed page width.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.Pages">
            <summary>
            When implemented by a class, gets or sets pages collection that owns this page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.LeftIndent">
            <summary>
            Gets or sets page's left indentation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.RightIndent">
            <summary>
            Gets or sets page's right indentation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.TopIndent">
            <summary>
            Gets or sets page's top indentation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.BottomIndent">
            <summary>
            Gets or sets page's bottom indentation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.PaintRect">
            <summary>
            Represents a bounding area exluding whitespace area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.WhiteSpaceTopRect">
            <summary>
            Represents a whitespace area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.WhiteSpaceBottomRect">
            <summary>
            Represents a whitespace area of the page withing Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPage.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>EditPage</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.Dialogs.ISearchDialog">
            <summary>
            Represents a dialog box that allows user to search for the text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.Execute(QWhale.Editor.ISearch,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.Execute(QWhale.Editor.ISearch,System.Boolean,System.Boolean,System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.DoneSearch(QWhale.Editor.ISearch)">
            <summary>
            When implemented by a class, finishes search.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.EnsureVisible(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, ensures that the search dialog box is visible in specified rectangle, moving it if necessary.
            </summary>
            <param name="rect">The Rectangle to check.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.ToggleHiddenText">
            <summary>
            When implemented by a class, toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.ToggleMatchCase">
            <summary>
            When implemented by a class, toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.ToggleRegularExpressions">
            <summary>
            When implemented by a class, toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.ToggleSearchUp">
            <summary>
            When implemented by a class, toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.ToggleWholeWord">
            <summary>
            When implemented by a class, toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchDialog.Close">
            <summary>
            When implemented by a class, closes the dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISearchDialog.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISearchDialog.OwnerForm">
            <summary>
            When implemented by a class, gets or sets form that owns this dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISearchDialog.SearchSettings">
            <summary>
            When implemented by a class, gets search settings associated with search dialog.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Dialogs.ISearchDialog.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.ColorThemes">
            <summary>
            Represents a collection of color themes.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.IColorThemes">
            <summary>
            Properties and methods that represent a collection of color themes.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorThemes.ActiveThemeIndex">
            <summary>
            When implemented by a class, gets or sets the index of the
            active ColorTheme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorThemes.ActiveTheme">
            <summary>
            When implemented by a class, gets or sets the active ColorTheme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorThemes.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>ColorTheme</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorThemes.ActiveThemeIndex">
            <summary>
            Gets or sets the index of the active color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorThemes.ActiveTheme">
            <summary>
            Gets or sets the active color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorThemes.SerializationInfo">
            <summary>
             Gets or sets an xml representation of this <c>ColorTheme</c> object.
             </summary>
             <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.ICodeSnippetRange">
            <summary>
            Represents properties to store individual code snippet that can appear in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ICodeSnippetRange.ID">
            <summary>
            When implemented by a class, represents name of code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ICodeSnippetRange.Tooltip">
            <summary>
            When implemented by a class, represents short description of the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ICodeSnippetRange.IsEditable">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether code snippet can be edited.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.LineStyle">
            <summary>
            Represents a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.BookMark">
            <summary>
            <c>BookMark</c> class is used to store individual bookmark in bookmarks collection of Edit control.
            <seealso cref="T:QWhale.Editor.TextSource.IBookMark"/>
            </summary>
            <remarks>
            Implements <c>IBookMark</c> interface.
            </remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMark.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified settings.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMark.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with specified <c>Pos</c>, <c>Index</c> and <c>Line</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMark.#ctor">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMark.Assign(QWhale.Editor.TextSource.IBookMark)">
            <summary>
            Copies the contents of another bookmark object to the bookmark.
            </summary>
            <param name="source">Specifies bookmark to copy content from. Call <c>Assign</c> to copy <c>Line</c>, <c>Index</c> and <c>Pos</c> property from source bookmark.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.BookMark.Line">
            <summary>
            Gets position of the bookmark within the text. 0 corresponds to the first line, 1 to second the line, and so on.
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Pos"/>
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Index"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.BookMark.Pos">
            <summary>
            Gets position of the bookmark within the text line. 0 corresponds to the first character in a line, 1 to the second character, and so on.
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Line"/>
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Index"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.BookMark.Index">
            <summary>
            Gets an integer value that specifies ordinal number of the bookmark.
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Line"/>
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Pos"/>
            </summary>
            <remarks>
            Edit can display bookmarks that that have <c>Index</c> between 0 and 9, or unnumbered bookmarks (with <c>Index</c> equal to Int.MaxValue).
            </remarks>
        </member>
        <member name="P:QWhale.Editor.TextSource.BookMark.Position">
            <summary>
            Gets position of the bookmark within the text (index of character and line). Corresponds to <c>Pos</c> and <c>Line</c> properties.
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Pos"/>
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Line"/>
            <seealso cref="P:QWhale.Editor.TextSource.BookMark.Index"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.BookMark.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>BookMark</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.ILineStyle">
            <summary>
            This represents a particular style of some text line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ILineStyle.Range">
            <summary>
            Specifies range where line style is displayed
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ILineStyle.Priority">
            <summary>
            Specifes priority of the line style.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyle.#ctor">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyle.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="line">Specifies index of the text line.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="line">Specifies index of the text line.</param>
            <param name="ch">Specifies position of character within text line.</param>
            <param name="index">Specifies ordinal number of line style within line styles collection.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,QWhale.Common.IRange)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="line">Specifies index of the text line.</param>
            <param name="ch">Specifies position of character within text line.</param>
            <param name="index">Specifies ordinal number of line style within line styles collection.</param>
            <param name="priority">Specifes priority of the line style.</param>
            <param name="range">Specifies range where line style is displayed.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.LineStyle.Assign(QWhale.Editor.TextSource.ILineStyle)">
            <summary>
            Copies the contents of another bookmark object to the bookmark.
            </summary>
            <param name="source">Specifies bookmark to copy content from. Call <c>Assign</c> to copy <c>Line</c>, <c>Index</c> and <c>Pos</c> property from source bookmark.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.LineStyle.Range">
            <summary>
            Specifies range where line style is displayed
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.LineStyle.Priority">
            <summary>
            Specifes priority of the line style.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.LineStyle.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>LineStyle</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.Braces">
            <summary>
            Represents properties and methods for handling matching braces within the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Braces</c> class with specified owner.
            </summary>
            <param name="owner">Specifies the class implementing <c>ISyntaxEdit</c> that owns a new instance.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>ForeColor</c> should be persisted.
            </summary>
            <returns>True if <c>ForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ShouldSerializeFontStyle">
            <summary>
            Indicates whether the <c>FontStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>FontStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ShouldSerializeOpenBraces">
            <summary>
            Indicates whether the <c>OpenBraces</c> should be persisted.
            </summary>
            <returns>True if <c>OpenBraces</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ShouldSerializeClosingBraces">
            <summary>
            Indicates whether the ClosingBraces property should be persisted.
            </summary>
            <returns>True if ClosingBraces differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.Assign(QWhale.Editor.IEditBraceMatching)">
            <summary>
            Copies the contents of another <c>Braces</c> object.
            </summary>
            <param name="source">Specifies <c>IEditBraceMatching</c> to copy content from.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ResetFontStyle">
            <summary>
            Resets the <c>Style</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ResetUseRoundRect">
            <summary>
            Resets the <c>UseRoundRect</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.FindClosingBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates matching closing brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.FindClosingBrace(System.Drawing.Point@)">
            <summary>
            Locates matching closing brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.FindOpenBrace(System.Int32@,System.Int32@)">
            <summary>
            Locates matching open brace.
            </summary>
            <param name="x">Retrieves X-coordinate of the found brace.</param>
            <param name="y">Retrieves Y-coordinate of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.FindOpenBrace(System.Drawing.Point@)">
            <summary>
            Locates matching open brace.
            </summary>
            <param name="position">Retrieves position of the found brace.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.TempHighlightBraces(System.Drawing.Rectangle[])">
            <summary>
            Temporary highlights all text within the area specified by rects.
            <seealso cref="M:QWhale.Editor.TextSource.Braces.TempUnhighlightBraces"/>
            </summary>
            <param name="rects">Specifies the area to highlight text in.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.TempUnhighlightBraces">
            <summary>
            Cancels text highlighting, turned on by TempHighlightBraces method.
            <seealso cref="M:QWhale.Editor.TextSource.Braces.TempHighlightBraces(System.Drawing.Rectangle[])"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.HighlightBraces">
            <summary>
            Highlights braces containing caret  position.
            <seealso cref="M:QWhale.Editor.TextSource.IBraceMatching.UnhighlightBraces"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.UnhighlightBraces">
            <summary>
            Unhighlights braces containing caret position.
            <seealso cref="M:QWhale.Editor.TextSource.IBraceMatching.HighlightBraces"/>
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ResetBracesOptions">
            <summary>
            Resets the <c>BracesOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ResetOpenBraces">
            <summary>
            Resets the <c>OpenBraces</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Braces.ResetClosingBraces">
            <summary>
            Resets the <c>ClosingBraces</c> to its default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Braces.ForeColor">
            <summary>
            Gets or sets a value that represents foreground color to draw matching braces.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Braces.BackColor">
            <summary>
            Gets or sets a value that represents background color to draw matching braces.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Braces.FontStyle">
            <summary>
            Gets or sets a FontStyle value that is used to draw matching braces.
            </summary>
            <remarks>The default value of this property is <c>FontStyle.Bold</c>.</remarks>
        </member>
        <member name="P:QWhale.Editor.TextSource.Braces.UseRoundRect">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw rectangle around matching braces.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Braces.BracesOptions">
            <summary>
            Gets or sets options specifying appearance and behaviour of matching braces within Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Braces.OpenBraces">
            <summary>
            Gets or sets an array of characters each one representing an open brace.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Braces.ClosingBraces">
            <summary>
            Gets or sets an array of characters each one representing a closing brace.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Braces.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>Braces</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.IEditPageHeader">
            <summary>
            Represents properties and methods for header/footer parts of edit page.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPageHeader.Assign(QWhale.Editor.IEditPageHeader)">
            <summary>
            When implemented by a class, copies the contents of another <c>IPageHeader</c> object.
            </summary>
            <param name="source">Specifies <c>IPageHeader</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPageHeader.ResetFont">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.Font</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPageHeader.ResetOffset">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.Offset</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPageHeader.ResetFontColor">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.FontColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPageHeader.ResetReverseOnEvenPages">
            <summary>
            When implemented by a class, resets the <c>IPageHeader.ReverseOnEvenPages</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPageHeader.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, draws page header/footer on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of header/footer to draw on.</param>
            <param name="pageIndex">Index of page which header/footer is drawing.</param>
            <param name="pageCount">Total number of pages.</param>
            <param name="pageNumbers">Specifies whether header/footer should draw page number.</param>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.LeftText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the left part of the header/footer area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.CenterText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the center of the header/footer area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.RightText">
            <summary>
            When implemented by a class, gets or sets a string that appears at the right part of the header/footer area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.Font">
            <summary>
            When implemented by a class, gets or sets font used to draw header/footer text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.FontColor">
            <summary>
            When implemented by a class, gets or sets font color used to draw header/footer text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.Offset">
            <summary>
            When implemented by a class, gets or sets indentation of the primary text edge.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>IPageHeader</c> is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.ReverseOnEvenPages">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>LeftText</c> and <c>RightText</c> interchanging on even page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPageHeader.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IEditPageHeader
            </summary>
        </member>
        <member name="E:QWhale.Editor.IEditPageHeader.DrawHeader">
            <summary>
            When implemented by a class, occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditSyntaxPaint">
            <summary>
            Represents properties and methods to paint editor's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.PaintLineBookMarks(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, paints collection of line bookmark.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw line bookmarks.</param>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.PaintWindow(QWhale.Common.IPainter,System.Int32,System.Drawing.Rectangle,System.Drawing.Point,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, paints editor's content.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies first line of content to paint.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="location">The Point value that specifies start position to draw content from.</param>
            <param name="scaleX">Horizontal scale of the transformation.</param>
            <param name="scaleY">Vertical scale of the transformation.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>
            <param name="inPrinting">Reserved for internal use. Used for Print and Print preview.</param>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.GetRectRegion(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, returns region corresponding to given rectangle.
            </summary>
            <param name="rect">Rectangle to check.</param>
            <returns>Region corresponding to given rectangle</returns>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.GetRectRegion(QWhale.Editor.SelectionType,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, returns region corresponding to given rectangle.
            </summary>
            <param name="selectionType">Specifies selection type.</param>
            <param name="rect">Rectangle to check.</param>
            <param name="atTopLeftEnd">Boolean value indicating if the region's topleft corner should be calculated taking into account end of the wrapped line.</param>
            <param name="atBottomRightEnd">Boolean value indicating if the region's bottomright corner should be calculated taking into account end of the wrapped line.</param>
            <returns>Region corresponding to given rectangle.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.GetBackColor(System.Boolean)">
            <summary>
            When implemented by a class, retrieves background color in accordance with specified parameter and editor settings.
            </summary>
            <param name="readOnly">Specifies whether method should return backgorund color for readonly state.</param>
            <returns>Appropriate background color.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.GetForeColor(System.Boolean)">
            <summary>
            When implemented by a class, retrieves foreground color in accordance with specified parameter and editor settings.
            </summary>
            <param name="readOnly">Specifies whether method should return foregorund color for readonly state.</param>
            <returns>Appropriate foreground color.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.ResetDrawColumnsIndent">
            <summary>
            When implemented by a class, resets the <c>DrawColumnsIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.ResetColumnsIndentForeColor">
            <summary>
            When implemented by a class, resets the <c>ColumnsIndentForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.ResetDisabledBackColor">
            <summary>
            When implemented by a class, resets the <c>DisabledBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.ResetDisabledForeColor">
            <summary>
            When implemented by a class, resets the <c>DisabledForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.ResetReadonlyBackColor">
            <summary>
            When implemented by a class, resets the <c>ReadonlyBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.ResetReadonlyForeColor">
            <summary>
            When implemented by a class, resets the <c>ReadonlyForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditSyntaxPaint.ResetSyntaxErrorsHints">
            <summary>
            When implemented by a class, resets the <c>SyntaxErrorsHints</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSyntaxPaint.ReadonlyForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color used in the readonly state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSyntaxPaint.ReadonlyBackColor">
            <summary>
            When implemented by a class, gets or sets background color used in the readonly state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSyntaxPaint.DisabledForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color used in the disabled state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSyntaxPaint.DisabledBackColor">
            <summary>
            When implemented by a class, gets or sets background color used in the disabled state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSyntaxPaint.DrawColumnsIndent">
            <summary>
            When implemented by a class, indicates whether edit control should draw columns indentation marks.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSyntaxPaint.ColumnsIndentForeColor">
            <summary>
            When implemented by a class, specifies columns indentation color.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditSyntaxPaint.SyntaxErrorsHints">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should display hint over each syntax error in it's content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.LineStyleOptions">
            <summary>
            Defines appearance of lines with some line style.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.LineStyleOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.LineStyleOptions.BeyondEol">
            <summary>
            Specifies that line style applicable beyond end of line.
            </summary>
        </member>
        <member name="F:QWhale.Editor.LineStyleOptions.InvertColors">
            <summary>
            Specifies that background and foreground colors should be interchanged.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditLineStyle">
            <summary>
            Represents properties and methods for a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyle.Assign(QWhale.Editor.IEditLineStyle)">
            <summary>
            When implemented by a class, copies the contents from another <c>ILineStyle</c> object.
            </summary>
            <param name="source">Specifies <c>IEditLineStyle</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyle.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyle.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyle.ResetPenColor">
            <summary>
            When implemented by a class, resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyle.ResetImageIndex">
            <summary>
            When implemented by a class, resets the <c>ImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyle.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyle.GetBackColor(System.Drawing.Color)">
            <summary>
            When implemented by a class, returns <c>BackColor</c> or <c>ForeColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>ForeColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>BackColor</c>.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyle.GetForeColor(System.Drawing.Color)">
            <summary>
            Returns <c>ForeColor</c> or <c>BackColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>BackColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>ForeColor</c>.</returns>
        </member>
        <member name="P:QWhale.Editor.IEditLineStyle.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditLineStyle.ForeColor">
            <summary>
            When implemented by a class, gets or sets foreground color of the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditLineStyle.BackColor">
            <summary>
            When implemented by a class, gets or sets background color of the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditLineStyle.PenColor">
            <summary>
            When implemented by a class, gets or sets pen color of the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditLineStyle.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditLineStyle.Options">
            <summary>
            When implemented by a class, gets or sets display options for the <c>IEditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditLineStyle.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>IEditLineStyle</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlEditSpellingInfo">
            <summary>
            Contains information about <c>IEditSpelling</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditSpellingInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditSpellingInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditSpellingInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlEditSpellingInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditSpellingInfo.#ctor(QWhale.Editor.IEditSpelling)">
            <summary>
            Initializes a new instance of the <c>XmlEditSpellingInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IEditSpelling</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditSpellingInfo.ShouldSerializeSpellColor">
            <summary>
            Indicates whether the <c>SpellColor</c> property should be persisted.
            </summary>
            <returns>True if <c>SpellColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditSpellingInfo.SpellColor">
            <summary>
            Stores <c>IEditSpelling.SpellColor</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:QWhale.Editor.HitTest">
            <summary>
            Contains information about a part of the Edit control at a specified coordinate.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.None">
            <summary>
            No part.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Above">
            <summary>
            Above the Edit control client area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Below">
            <summary>
            Below the Edit control client area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Left">
            <summary>
            Left to the Edit control client area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Right">
            <summary>
            Right to the Edit control client area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Text">
            <summary>
            On the text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Selection">
            <summary>
            On the selected text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.BeyondEol">
            <summary>
            Beyond line end.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.BeyondEof">
            <summary>
            Beyond file end.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Gutter">
            <summary>
            On the gutter area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Margin">
            <summary>
            On the margin area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.GutterImage">
            <summary>
            On the gutter image.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.BookMark">
            <summary>
            On the bookmark.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.OutlineArea">
            <summary>
            On the outline area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.OutlineImage">
            <summary>
            On the outline image(plus/minus) button.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.OutlineButton">
            <summary>
            On the outline button.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.LineModificator">
            <summary>
            On the line modificator area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.LineNumber">
            <summary>
            On the line numbers area.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.HyperText">
            <summary>
            On the hypertext.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.Page">
            <summary>
            On the page.
            </summary>
        </member>
        <member name="F:QWhale.Editor.HitTest.PageWhiteSpace">
            <summary>
            On the interval between pages.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IHitTestInfo">
            <summary>
            Contains information about an area of an Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IHitTestInfo.Reset">
            <summary>
            When implemented by a class, resets <c>HitTestInfo</c> members to their default values.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.HitTest">
            <summary>
            When implemented by a class, gets or sets the <c>HitTest</c> that represents the area of the Edit control evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.Line">
            <summary>
            When implemented by a class, gets or sets the index of line evaluated by the hit-test operation. 
            Contains index of line if mouse is over text line in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.Pos">
            <summary>
            When implemented by a class, gets or sets the index of character within the line evaluated by the hit-test operation.
            Contains index of line if mouse is over some text in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.Item">
            <summary>
            When implemented by a class, gets or sets the <c>IStrItem</c> object evaluated by the hit-test operation. 
            Contains instance of <c>IStrItem</c> object if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.String">
            <summary>
            When implemented by a class, gets or sets the text string evaluated by the hit-test operation. 
            Contains string if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.Word">
            <summary>
            When implemented by a class, gets or sets the word evaluated by the hit-test operation. 
            Contains string if mouse is over some word in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.Url">
            <summary>
            Gets the hypertext string evaluated by the hit-test operation. 
            Contains string if mouse is over hypertext section in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.GutterImage">
            <summary>
            When implemented by a class, gets or sets the <c>Gutter</c> ImageIndex, evaluated by the hit-test operation. 
            Contains index of image if mouse is over the gutter image; - 1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.OutlineIndex">
            <summary>
            When implemented by a class, gets or sets the index of line where outline image is displayed, evaluated by the hit-test operation. 
            Contains index of line if mouse is over the outline button; - 1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.OutlineRange">
            <summary>
            When implemented by a class, gets or sets the <c>IOutlineRange</c> object evaluated by the hit-test operation. 
            Contains instance of <c>IOutlineRange</c> object if mouse is over outline button; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.Page">
            <summary> 
            When implemented by a class, gets or sets the index of page evaluated by the hit-test operation. 
            Contains index of page if mouse is over text page in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.Style">
            <summary> 
            When implemented by a class, gets or sets the index of lexical style evaluated by the hit-test operation. 
            Contains index of lexical style if mouse is over the text; - 1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IHitTestInfo.TextStyle">
            <summary> 
            When implemented by a class, gets or sets the set of additional flags for the text fragment evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.HintSyntaxPaint">
            <summary>
            Represents class that performs syntax painting for hint control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.HtmlSyntaxPaint">
            <summary>
            Represents class that performs syntax painting for hint control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.SyntaxPaint">
            <summary>
            Represents properties and methods, used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.#ctor(QWhale.Common.IPainter,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <c>SyntaxPaint</c> class with specified parameters.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="control">Specifies control begin painted.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.GetFontStyle(System.Drawing.FontStyle,QWhale.Syntax.TextStyle)">
            <summary>
            Retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.GetFontColor(System.Drawing.Color,QWhale.Syntax.TextStyle)">
            <summary>
            Retrieves font color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.GetLexStyle(System.Int32,QWhale.Syntax.TextStyle@)">
            <summary>
            Retrieves lex state corrsponding to given parser style.
            </summary>
            <param name="style">Index of parser style.</param>
            <param name="textStyle">Additional text styles.</param>
            <returns>LexStyle by its index</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.GetBackColor(System.Drawing.Color,QWhale.Syntax.TextStyle)">
            <summary>
            Retrieves background color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="state">Additional color flags.</param>
            <returns>New value of background color.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.EqualStyles(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Indicates whehter given styles are equal.
            </summary>
            <param name="style1">First style to compare.</param>
            <param name="style2">Second style to compare.</param>
            <param name="useColors">Indicate whehter colors of the styles are assumed.</param>
            <returns>True if styles are equal; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.PaintLineBookMarks(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Paints collection of line bookmark.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw line bookmarks.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.PaintSyntax(QWhale.Common.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Point,System.Boolean)">
            <summary>
            Perform syntax painting of the control on the graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies the first line of content to paint.</param>
            <param name="endLine">Specifies the last line of content to paint.</param>
            <param name="position">The Point value that specifies start position to draw content from.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="location">The Point value that specifies start position to draw page from.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>		
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32)">
            <summary>
            Measures part of the string given at by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.MeasureLine(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of the string given by its index.
            </summary>
            <param name="index">Index of line to measure.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="measureChars">Specifies whether the method should measure how much characters fits to the given width.</param>
            <param name="addSpace">Specifies whether spaces are added to the end of string if needed.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.MeasureLine(System.String,System.Int16[],System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean)">
            <summary>
            Measures part of given string.
            </summary>
            <param name="line">Text to measure.</param>
            <param name="colorData">Color data attached to the given string.</param>
            <param name="pos">Start character of string to measure.</param>
            <param name="len">Number of characters to measure.</param>
            <param name="width">Maximum length of the string.</param>
            <param name="chars">Receive real number of measured chars.</param>
            <param name="exact">Specifies whether the calculating should be precise.</param>
            <returns>Width of the measured part of the string.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.OnCustomDraw(QWhale.Common.IPainter,System.Drawing.Rectangle,QWhale.Editor.DrawStage,QWhale.Editor.DrawState,QWhale.Editor.IDrawInfo)">
            <summary>
            Raises an <c>CustomDraw</c> event.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="stage">Specifies whether this method called before or after painting.</param>
            <param name="state">Specifies part of control to draw.</param>
            <param name="info">Full information about drawing text fragment.</param>
            <returns>True if user handles this event; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.ResetDisableColorPaint">
            <summary>
            Resets the <c>DisableColorPaint</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.SyntaxPaint.ResetDisableSyntaxPaint">
            <summary>
            Resets the <c>DisableSyntaxPaint</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxPaint.DisableColorPaint">
            <summary>
            Gets or sets a value indicating whether control uses colors to paint its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxPaint.DisableSyntaxPaint">
            <summary>
            Gets or sets a value indicating whether Edit control uses lexical colors/styles to paint its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.SyntaxPaint.Lexer">
            <summary>
            Gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="E:QWhale.Editor.SyntaxPaint.CustomDraw">
            <summary>
            Occurs when control draws its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HtmlSyntaxPaint.#ctor(QWhale.Common.IPainter,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <c>HtmlSyntaxPaint</c> class with specified graphic surface and owner control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="control">Specifies control owning the <c>HtmlSyntaxPaint</c>.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HtmlSyntaxPaint.Finalize">
            <summary>
            Destroys the instance of the <c>HtmlSyntaxPaint</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HtmlSyntaxPaint.PrepareData(System.Int32,System.Drawing.FontStyle,System.String@,System.Int16[]@)">
            <summary>
            Prepares color data to paint.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="style">Specifies default font style</param>
            <param name="s">Text to parse.</param>
            <param name="colorData">Receives color data of the given text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.HtmlSyntaxPaint.Provider">
            <summary>
            Gets or sets an object that contains data related to this <c>CompletionHint</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HintSyntaxPaint.#ctor(QWhale.Common.IPainter,System.Windows.Forms.Control)">
            <summary>
            Initializes a new instance of the <c>HintSyntaxPaint</c> class with specified graphic surface and owner control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="control">Specifies control owning the <c>HintSyntaxPaint</c>.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HintSyntaxPaint.UpdateSize">
            <summary>
            Updates size of this control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HintSyntaxPaint.ProviderChanged(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider,System.Int32)">
            <summary>
            Updates provider and related properties to this control. 
            </summary>
            <param name="provider">New provider.</param>
            <param name="index">New index.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HintSyntaxPaint.DrawLine(System.Int32,System.String,System.Int16[],System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="line">Specifies text to draw</param>
            <param name="colorData">Specifies array containing color data for given string</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HintSyntaxPaint.PaintSyntax(QWhale.Common.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Point,System.Boolean)">
            <summary>
            Paints a specified part of the hint control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies the first line to paint.</param>
            <param name="endLine">Specifies the last line to paint.</param>
            <param name="position">The Point value that specifies start position to draw lines from.</param>
            <param name="rect">Rectangular area of <c>HintSyntaxPaint</c> to draw.</param>
            <param name="location">The Point value that specifies start position to draw page from.</param>
            <param name="specialPaint">Reserved for internal use.</param>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.HintSyntaxPaint.NeedArrows">
            <summary>
            Gets boolean value indicating whether hint control have to paint up/down arrows.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.HintSyntaxPaint.LeftArrowArea">
            <summary>
            Represents rectangular area for left arrow.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.HintSyntaxPaint.Strings">
            <summary>
            Represents an array of strings displayed in a hint.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlColorThemeInfo">
            <summary>
            Contains information about <c>IColorTheme</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemeInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemeInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemeInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlColorThemeInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemeInfo.#ctor(QWhale.Editor.Dialogs.IColorTheme)">
            <summary>
            Initializes a new instance of the <c>XmlColorThemeInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IColorTheme</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemeInfo.ShouldSerializeFontName">
            <summary>
            Indicates whether the <c>FontName</c> property should be persisted.
            </summary>
            <returns>True if <c>FontName</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemeInfo.ShouldSerializeFontSize">
            <summary>
            Indicates whether the <c>FontSize</c> property should be persisted.
            </summary>
            <returns>True if <c>FontSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemeInfo.ShouldSerializeFontStyle">
            <summary>
            Indicates whether the <c>FontStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>FontStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlColorThemeInfo.ShouldSerializeLexStyles">
            <summary>
            Indicates whether the <c>LexStyles</c> property should be persisted.
            </summary>
            <returns>True if <c>LexStyles</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemeInfo.LexStyles">
            <summary>
            Stores name of the <c>IColorTheme.LexStyles</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemeInfo.Name">
            <summary>
            Stores name of the <c>IColorTheme.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemeInfo.ReadOnly">
            <summary>
            Stores name of the <c>IColorTheme.ReadOnly</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemeInfo.Font">
            <summary>
            Stores <c>IColorTheme.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemeInfo.FontName">
            <summary>
            Stores name of the <c>IColorTheme.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemeInfo.FontSize">
            <summary>
            Stores size of the <c>IColorTheme.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlColorThemeInfo.FontStyle">
            <summary>
            Stores style of the <c>IColorTheme.Font</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlMacroKeyDataInfo">
            <summary>
            Contains information about <c>IKeyListData</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlMacroKeyDataInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.#ctor(QWhale.Editor.IMacroKeyData)">
            <summary>
            Initializes a new instance of the <c>XmlMacroKeyDataInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IMacroKeyListData</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.EventName">
            <summary>
            Represents a name of the action 
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.FullName">
            <summary>
            Represents a name of the action 
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.Keys">
            <summary>
            Represents a key to which some action is attached.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.State">
            <summary>
            Represents a state of the Edit control before key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.LeaveState">
            <summary>
            Represents a state of the Edit control after key is pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.ParamType">
            <summary>
            When implemented by a class, gets or sets type of the parameter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlMacroKeyDataInfo.ParamStr">
            <summary>
            When implemented by a class, represents parameter text
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.ThreadProc">
            <summary>
            Represents a method that will handle thread method.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.ISearchSettings">
            <summary>
            Represents properties and methods to hold settings for search and replace dialogs.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISearchSettings.Assign(QWhale.Editor.Dialogs.ISearchSettings)">
            <summary>
            When implemented by a class, copies the content from another <c>ISearchSettings</c> object.
            </summary>
            <param name="source">Specifies <c>ISearchSettings</c> to assign.</param>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISearchSettings.SearchOptions">
            <summary>
            When implemented by a class, represents options that determine behavior of search or replace dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISearchSettings.OptionsVisible">
            <summary>
            When implemented by a class, indicates whether find/replace dialog should display search options.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISearchSettings.ClearBookmarks">
            <summary>
            When implemented by a class, indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISearchSettings.SearchList">
            <summary>
            When implemented by a class, represents the search history for the search dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISearchSettings.ReplaceList">
            <summary>
            When implemented by a class, represents the replace history for the replace dialog.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditNotify">
            <summary>
            Represents extended properties and methods to manage notification between objects.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditNotify.FirstChanged">
            <summary>
            When implemented by a class, represents index of the first changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditNotify.LastChanged">
            <summary>
            When implemented by a class, represents index of the last changed line.
            </summary>
        </member>
        <member name="T:QWhale.Editor.MacroKeyData">
            <summary>
            Represents macro key or its combinations with attached actions.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IMacroKeyData">
            <summary>
            Represents macro key or its combinations with attached actions.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMacroKeyData.FullName">
            <summary>
            When implemented by a class, gives a string representation of the action 
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMacroKeyData.ParamType">
            <summary>
            When implemented by a class, gets or sets type of the parameter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMacroKeyData.ParamStr">
            <summary>
            When implemented by a class, represents parameter text
            </summary>
        </member>
        <member name="P:QWhale.Editor.IMacroKeyData.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>MacroKeyData</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:QWhale.Editor.MacroKeyData.#ctor(System.Windows.Forms.Keys,QWhale.Editor.KeyEvent,QWhale.Editor.KeyEventEx,System.Object,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>MacroKeyListData</c> class with specified settings.
            </summary>
            <param name="keyData">Specifies key data of this new instance.</param>
            <param name="action">Action that executes when the key is pressed.</param>
            <param name="actionEx">Extended action that executes when the key is pressed.</param>
            <param name="param">Object passed as a parameter to the extended action.</param>
            <param name="state">Current state of the Edit control.</param>
            <param name="leaveState">State of the Edit control after key is pressed.</param>
        </member>
        <member name="M:QWhale.Editor.MacroKeyData.#ctor">
            <summary>
            Initializes a new instance of the <c>MacroKeyListData</c> class with default settings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.MacroKeyData.ParamType">
            <summary>
            Gets or sets type of the parameter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.MacroKeyData.ParamStr">
            <summary>
            String representation of the parameter
            </summary>
        </member>
        <member name="P:QWhale.Editor.MacroKeyData.FullName">
            <summary>
            String representation of the action 
            </summary>
        </member>
        <member name="P:QWhale.Editor.MacroKeyData.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ColorTheme</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.CustomDrawEventArgs">
            <summary>
            Provides data for the <c>CustomDrawEvent</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CustomDrawEventArgs.Painter">
            <summary>
            Represents Painter surface to draw on.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CustomDrawEventArgs.DrawStage">
            <summary>
            Specify a stage in the custom drawing process.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CustomDrawEventArgs.DrawState">
            <summary>
            Specify a custom drawing state, including information about elements of the control currently drawn.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CustomDrawEventArgs.Rect">
            <summary>
            Specifiying rectangular area where Editor's content is drawn.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CustomDrawEventArgs.DrawInfo">
            <summary>
            Represents information about drawing text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CustomDrawEventArgs.Handled">
            <summary>
            Specifies whether painting is handled by an event, preventing control from default painting. This parameter is only used when DrawStage is DrawStage.Before.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CustomDrawEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxPaint.CustomDraw</c>, <c>SyntaxEdit.CustomDraw</c> or <c>CodeCompletionHint.CustomDraw</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>CustomDrawEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlEditPagesInfo">
            <summary>
            Contains information about <c>IEditPages</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlEditPagesInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.#ctor(QWhale.Editor.IEditPages)">
            <summary>
            Initializes a new instance of the <c>XmlEditPagesInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IEditPages</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <c>BorderColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BorderColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.ShouldSerializeRulerOptions">
            <summary>
            Indicates whether the <c>RulerOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.ShouldSerializeRulerBackColor">
            <summary>
            Indicates whether the <c>RulerBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditPagesInfo.ShouldSerializeRulerIndentBackColor">
            <summary>
            Indicates whether the <c>RulerIndentBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerIndentBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.BackColor">
            <summary>
            Stores <c>IEditPages.BackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.BorderColor">
            <summary>
            Stores <c>IEditPages.BorderColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.RulerBackColor">
            <summary>
            Stores <c>IEditPages.RulerBackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.RulerIndentBackColor">
            <summary>
            Stores <c>IEditPages.RulerIndentBackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.DisplayWhiteSpace">
            <summary>
            Stores <c>IEditPages.DisplayWhiteSpace</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.PageType">
            <summary>
            Stores <c>IEditPages.PageType</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.RulerOptions">
            <summary>
            Stores <c>IEditPages.RulerOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.Rulers">
            <summary>
            Stores <c>IEditPages.Rulers</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.RulerUnits">
            <summary>
            Stores <c>IEditPages.RulerUnits</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.DefaultPage">
            <summary>
            Stores <c>IEditPages.DefaultPage</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.ApplyRulerToAllPages">
            <summary>
            Stores <c>IEditPages.ApplyRulerToAllPages</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditPagesInfo.Transparent">
            <summary>
            Stores <c>IEditPages.Transparent</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.EventHandlers">
            <summary>
            Represents key events for default keymapping.
            </summary>
            <remarks>Normally you do not need to use this class directly, it's used internally by edit control.</remarks>
        </member>
        <member name="M:QWhale.Editor.EventHandlers.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>EventHandlers</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="P:QWhale.Editor.EventHandlers.MacroRecordEvent">
            <summary>
            Represents an event to process macro recording.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EventHandlers.EventNames">
            <summary>
            Represents names of all available event handlers.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CompletionHint">
            <summary>
            Represents a tooltip-like control used in a code completion.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionHint.UpdateHint">
            <summary>
            Updates content, position and size of the hint window.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionHint.#ctor">
            <summary>
            Initializes a new instance of the <c>CompletionHint</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionHint.ResetContent">
            <summary>
            Updates <c>CompletionHint</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionHint.ChangeSelection(System.Boolean)">
            <summary>
            Increments or decrements<c>SelectedIndex</c> property.
            </summary>
            <param name="inc">Specifies whether <c>SelectedIndex</c> should be incremented.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CompletionHint.Dispose(System.Boolean)">
            <summary>
            Destroys the instance of the <c>CompletionHint</c> class.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionHint.NeedArrows">
            <summary>
            Indicates whether hint control have to paint up/down arrows.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionHint.SyntaxPaint">
            <summary>
            Represents <c>ISyntaxPaint</c> interface used to draw control's content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionHint.Provider">
            <summary>
            Gets or sets an object that contains data related to this <c>CompletionHint</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionHint.SelectedIndex">
            <summary>
            Gets or sets the index specifying the currently selected hint item.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionHint.HintSize">
            <summary>
            Returns a size of the hint control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CompletionHint.UpdateSize">
            <summary>
            Occurs when size of the hint control is changed.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:QWhale.Editor.Dialogs.ISyntaxSettings">
            <summary>
            Represents methods to save/restore key properties for Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISyntaxSettings.LoadFromEdit(QWhale.Editor.ISyntaxEdit)">
            <summary>
            When implemented by a class, changes values stored in the <c>ISyntaxSettings</c> accordingly to property values of <c>SyntaxEdit</c> control.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to copy properties from.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISyntaxSettings.ApplyToEdit(QWhale.Editor.ISyntaxEdit)">
            <summary>
            When implemented by a class, assigns key properties of given <c>SyntaxEdit</c> according to values strored in the <c>ISyntaxSettings</c> instance.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to assign settings.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISyntaxSettings.ApplyToEdit(QWhale.Editor.ISyntaxEdit,System.Boolean)">
            <summary>
            When implemented by a class, assigns key properties of given <c>SyntaxEdit</c> according to values strored in the <c>ISyntaxSettings</c> instance.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to assign settings.</param>
            <param name="withStyles">Specifies that color styles should be copied</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISyntaxSettings.IsDescriptionEnabled(System.Int32)">
            <summary>
            When implemented by a class, indicates whether description for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if description is enabled; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISyntaxSettings.IsFontStyleEnabled(System.Int32)">
            <summary>
            When implemented by a class, indicates whether font style for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if font style is enabled; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISyntaxSettings.IsBackColorEnabled(System.Int32)">
            <summary>
            When implemented by a class, indicates whether background color for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if background color is enabled; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISyntaxSettings.OnHelpRequest(System.Object,System.Windows.Forms.HelpEventArgs)">
            <summary>
            When implemented by a class, raises the HelpRequested event. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A HelpEventArgs that contains the event data.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ISyntaxSettings.Localize">
            <summary>
            When implemented by a class, initializes lexical styles according with current culture.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.LexStyles">
            <summary>
            When implemented by a class, gets or sets collection of lexical styles for the <c>Lexer</c> components.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.DefaultLexStyles">
            <summary>
            When implemented by a class, gets or sets collection of default lexical styles.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.ColorThemes">
            <summary>
            When implemented by a class, gets or sets a ColorThemes object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.Font">
            <summary>
            When implemented by a class, gets or sets Font object for the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.NavigateOptions">
            <summary>
            When implemented by a class, gets or sets options for navigating within <c>SyntaxEdit</c> controls content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.ScrollBars">
            <summary>
            When implemented by a class, gets or sets the type of scroll bars to display in the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.SelectionOptions">
            <summary>
            When implemented by a class, gets or sets options determining appearance and behavior of the <c>Selection</c> object in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.GutterOptions">
            <summary>
            When implemented by a class, gets or sets a gutter options that determines <c>Gutter</c> appearance and behavior for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.SeparatorOptions">
            <summary>
            When implemented by a class, gets or sets line separator options for SyntaxEdit controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.OutlineOptions">
            <summary>
            When implemented by a class, gets or sets outlining options for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.ShowMargin">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>Margin</c> is visible in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.ShowGutter">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the <c>Gutter</c> is visible in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.HighlightHyperText">
            <summary>
            When implemented by a class, gets or sets a value indicating whether urls in the <c>SyntaxEdit</c> controls text should be highlighted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.AllowOutlining">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outlining is enabled for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.UseSpaces">
            <summary>
            When implemented by a class, gets or sets a value indicating whether indent operations insert space characters rather than TAB characters in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.WordWrap">
            <summary>
            When implemented by a class, gets or sets a value indicating whether <c>SyntaxEdit</c> controls automatically wrap words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.WhiteSpaceVisible">
            <summary>
            When implemented by a class, gets a sets a value indicating whether white space is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.GutterWidth">
            <summary>
            When implemented by a class, gets or sets the width of the <c>Gutter</c> for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.MarginPos">
            <summary>
            When implemented by a class, gets or sets value indicating position, in characters, of the vertical line within the text portion of the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.TabStops">
            <summary>
            When implemented by a class, gets or sets the character columns that the cursor will move to each time you press Tab in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ISyntaxSettings.EventData">
            <summary>
            When implemented by a class, represents array of event handlers associated with keys
            </summary>
        </member>
        <member name="E:QWhale.Editor.Dialogs.ISyntaxSettings.HelpRequested">
            <summary>
            When implemented by a class, occurs when user requests help for a control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.ColorTheme">
            <summary>
            Represents a single color theme.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.IColorTheme">
            <summary>
            Properties and methods for representing a single color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorTheme.Name">
            <summary>
            When implemented by a class, gets or sets the name of the color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorTheme.ReadOnly">
            <summary>
            When implemented by a class, gets or sets a bool value that indicates
            whether or not the color theme should be modified.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorTheme.Font">
            <summary>
            When implemented by a class, gets or sets the font used for the color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorTheme.LexStyles">
            <summary>
            When implemented by a class, gets or sets the LexStyle array used for the 
            color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorTheme.Item(System.String)">
            <summary>
            When implemented by a class, specifies an Item indexer that uses the name of the LexStyle as an index.
            </summary>
            <param name="name">Name of the LexStyle such as "ident".</param>
            <returns>LexStyle object that corresponds to the name parameter, or null for an invalid name.</returns>
        </member>
        <member name="P:QWhale.Editor.Dialogs.IColorTheme.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>ColorTheme</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ColorTheme.#ctor">
            <summary>
            Initailizes new instance of ColorTheme with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ColorTheme.#ctor(System.String,System.Boolean,System.Drawing.Font,QWhale.Syntax.Lexer.ILexStyles)">
            <summary>
            Initializes new instance of ColorTheme with given parameters.
            </summary>
            <param name="name">Color theme name.</param>
            <param name="readOnly">A flag that indicates whether or not the color theme should be modified.</param>
            <param name="Font">Font of this new instance.</param>
            <param name="lexStyles">LexStyle array.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.ColorTheme.Finalize">
            <summary>
            Destroys the instance of the <c>ColorTheme</c> class.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorTheme.Name">
            <summary>
            Gets or sets the name of the color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorTheme.ReadOnly">
            <summary>
            Gets or sets a bool value that indicates whether
            or not the color theme should be modified.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorTheme.Font">
            <summary>
            Gets or sets the font used for the color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorTheme.LexStyles">
            <summary>
            Gets or sets the LexStyle array used for the 
            color theme.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorTheme.Item(System.String)">
            <summary>
            Specifies an Item indexer that uses the name of the LexStyle as an index.
            </summary>
            <param name="name">Name of the LexStyle such as "ident".</param>
            <returns>LexStyle object that corresponds to the name parameter, or null for an invalid name.</returns>
        </member>
        <member name="P:QWhale.Editor.Dialogs.ColorTheme.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>DisplayStrings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.ITextStrings">
            <summary>
            Represents a collection of strings with extended possibilities.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.GetItem(System.Int32)">
            <summary>
            When implemented by a class, returns the <c>IStrItem</c> object at the given position of the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns><c>IStrItem</c> object at specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.GetLength(System.Int32)">
            <summary>
            When implemented by a class, returns length of the string that corresponds to specified item in the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns>If collection do not contain specified item method returns 0.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.Changed(System.Int32)">
            <summary>
            When implemented by a class, notifies about string state changing.
            </summary>
            <param name="index">Index of string to update.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.Changed(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, notifies about string state changing.
            </summary>
            <param name="first">Index of the first string to update.</param>
            <param name="last">Index of the last string to update.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.GetCharAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns character from specified position.
            </summary>
            <param name="x">Specifies position of character in string.</param>
            <param name="y">Specifies index of item in string collection.</param>
            <returns>Characted from specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.GetCharAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns character from specified position.
            </summary>
            <param name="position">Position of character where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Characted from specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns lexical style at specified position.
            </summary>
            <param name="position">Position of style where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.AfterSave">
            <summary>
            When implemented by a class, performs additional actions after <c>ITextStrings</c> saves its content to the file.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            When implemented by a class, converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.Assign(QWhale.Editor.TextSource.ITextStrings)">
            <summary>
            When implemented by a class, copies the contents from another <c>ITextStrings</c> object.
            </summary>
            <param name="source">Specifies <c>ITextStrings</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.GetTabString(System.String@,System.Int16[]@,System.Boolean,QWhale.Syntax.ITextUndoList)">
            <summary>
            When implemented by a class, converts all tab character to spaces depending on <c>TabStops</c> property.
            </summary>
            <param name="str">Text to convert.</param>
            <param name="data">Color data of specified string.</param>
            <param name="needData">Indicates whether method should return color data.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs)</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.ITextStrings.SetTextAndData(System.String,System.String)">
            <summary>
            When implemented by a class, sets the text and color data at the same time.
            </summary>
            <param name="text">text of the strings.</param>
            <param name="data">Color data associated witht the text</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextStrings.Source">
            <summary>
            When implemented by a class, gets the text source owning the <c>ITextStrings</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextStrings.FirstChanged">
            <summary>
            When implemented by a class, represents index of the first changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextStrings.LastChanged">
            <summary>
            When implemented by a class, represents index of the last changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextStrings.RemoveTrailingSpaces">
            <summary>
            When implemented by a class, gets or set a boolean value thet indicates whether <c>ITextStrings</c> should remove trailing spaces from the end of each its strings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextStrings.Owner">
            <summary>
            When implemented by a class, gets or set the <c>ISyntaxEdit</c> control that owns this collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextStrings.DelimTable">
            <summary>
            When implemented by a class, represents delimiters as a key-and-value pairs collection where each key is a single delimiter character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.ITextStrings.SerializationInfo">
            <summary>
            Gets or sets an xml representation of ITextStrings
            </summary>
        </member>
        <member name="T:QWhale.Editor.IDisplayStrings">
            <summary>
            Represents properties and methods for a collection of visible strings in the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.PointToDisplayPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts the specified text coordinates to display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.PointToDisplayPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts the specified text coordinates to display coordinates.
            </summary>
            <param name="position">The Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.PointToDisplayPoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, converts the specified text coordinates to display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="lineEnd">Boolean value indicating if the text position can be set to the end of the wrapped line.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.DisplayPointToPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, converts the specified display coordinates to text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.DisplayPointToPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="position">The Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.DisplayPointToPoint(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            When implemented by a class, converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="lineEnd">Receives boolean value indicating if the caret is at the line end of the wrapped line.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.DisplayPointToPoint(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="wrapEnd">Reserved for internal use.</param>
            <param name="rangeStart">Reserved for internal use.</param>
            <param name="tabEnd">Reserved for internal use.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.GetColorData(System.Int32)">
            <summary>
            When implemented by a class, returns color information related to the the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
            <returns>Color information of specified line.</returns>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            When implemented by a class, returns lexical style related to the specified position.
            </summary>
            <param name="position">The Point value that specifies position to receive lexical style.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.PositionChanged(QWhale.Editor.TextSource.UpdateReason,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, responds on chaning position in the editor.
            </summary>
            <param name="reason">Reason of changing position.</param>
            <param name="x">X-coordinate of current position.</param>
            <param name="y">Y-coordinate of current position.</param>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, responds on deleting some block of lines within the editor control.
            </summary>
            <param name="rect">Rectangle area of block being deleted.</param>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.IsPointVisible(System.Drawing.Point)">
            <summary>
            When implemented by a class, indicates whether given position is in visible area of the editor control.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position is invisible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.IsPointCollapsed(System.Drawing.Point,QWhale.Common.IRange@)">
            <summary>
            When implemented by a class, indicates whether given position is in invisible area of the editor control.
            </summary>
            <param name="position">Position to check.</param>
            <param name="range">Receives range contains the point. Null if specified position is visible.</param>
            <returns>True if position is invisible due to outlining; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.UpdateNeeded">
            <summary>
            When implemented by a class, forces <c>IDisplayStrings</c> to recalculate its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.Notify(QWhale.Editor.TextSource.NotifyState,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, notifies editor about updating <c>IDisplayStrings</c> state.
            </summary>
            <param name="state">Changes reason.</param>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="M:QWhale.Editor.IDisplayStrings.GetStringAndColorData(System.Int32,System.String@,System.Int16[]@)">
            <summary>
            When implemented by a class, returns text and color information related to the the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
            <param name="text">Returns text of the given line.</param>
            <param name="data">Returns color information of specified line.</param>
            <returns>Corresponding index within <c>ISyntaxStrings</c>collection.</returns>
        </member>
        <member name="P:QWhale.Editor.IDisplayStrings.DisplayCount">
            <summary>
            When implemented by a class, returns number of visible lines.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDisplayStrings.Lines">
            <summary>
            When implemented by a class, gets or sets the collection of underlying "real" collection of text lines.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDisplayStrings.MaxLineWidth">
            <summary>
            When implemented by a class, gets width of the largest line in the control's text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDisplayStrings.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IDisplayStrings
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDisplayStrings.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual strings stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDisplayStrings.LineEnd">
            <summary>
            When implemented by a class, gets or sets boolean value indicating if the text position can be set to the end of the wrapped line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDisplayStrings.Loaded">
            <summary>
            When implemented by a class, gets or sets boolean value indicating if the display strings was fully formatted.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlSearchSettingsInfo">
            <summary>
            Contains information about <c>ISearchSettings</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSearchSettingsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSearchSettingsInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSearchSettingsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSearchSettingsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSearchSettingsInfo.#ctor(QWhale.Editor.Dialogs.ISearchSettings)">
            <summary>
            Initializes a new instance of the <c>XmlSearchSettingsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ISearchSettings</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSearchSettingsInfo.SearchList">
            <summary>
            Stores <c>ISearchSettings.SearchList</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSearchSettingsInfo.ReplaceList">
            <summary>
            Stores <c>ISearchSettings.ReplaceList</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSearchSettingsInfo.SearchOptions">
            <summary>
            Stores <c>ISearchSettings.SearchOptions</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CodeCompletionColumn">
            <summary>
            Represents individual column object within a code completion columns collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionColumn.ResetFontStyle">
            <summary>
            Resets the <c>FontStyle</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionColumn.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionColumn.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to its default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionColumn.Name">
            <summary>
            Gets or sets the name of the <c>CodeCompletionColumn</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionColumn.FontStyle">
            <summary>
            Gets or sets style information for <c>CodeCompletionColumn</c> font.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionColumn.ForeColor">
            <summary>
            Gets or sets Color structure that represents foreground color of the <c>CodeCompletionColumn</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionColumn.Visible">
            <summary>
            Gets or sets a value indicating whether a column is visible.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo">
            <summary>
            Contains information about <c>ILineStyle</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLineStyleInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.#ctor(QWhale.Editor.TextSource.ILineStyle)">
            <summary>
            Initializes a new instance of the <c>XmlLineStyleInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILineStyle</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.Line">
            <summary>
            Stores <c>ILineStyle.Line</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.Pos">
            <summary>
            Stores <c>ILineStyle.Pos</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.Index">
            <summary>
            Stores <c>ILineStyle.Index</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.Range">
            <summary>
            Stores <c>ILineStyle.Range</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.Serialization.XmlLineStyleInfo.Priority">
            <summary>
            Stores <c>ILineStyle.Priority</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.KeyEvent">
            <summary>
            Represents a method that will handle the key event.
            </summary>
        </member>
        <member name="T:QWhale.Editor.KeyEventEx">
            <summary>
            Represents a method that will handle extended key event.
            </summary>
            <param name="param">Object containing additional event data.</param>
        </member>
        <member name="T:QWhale.Editor.ScrollingSplitter">
            <summary>
            Represents scrolling button that appears as splitter.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ScrollingButton">
            <summary>
            Represents button displayed at the scroll bar area of Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ScrollingButton.#ctor">
            <summary>
            Initializes a new instance of the <c>ScrollingButton</c> with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ScrollingButton.Finalize">
            <summary>
            Destroys the instance of the <c>ScrollingButton</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ScrollingButton.ShouldSerializeDescription">
            <summary>
            Indicates whether the <c>Description</c> property should be persisted.
            </summary>
            <returns>True if <c>Description</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.ScrollingButton.Assign(QWhale.Editor.IScrollingButton)">
            <summary>
            Copies the contents of another <c>IScrollingButton</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButton</c> to assign.</param>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.Name">
            <summary>
            Gets or sets a string value that specifies the name of this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.Description">
            <summary>
            Gets or sets a string value that specifies short description of this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.Images">
            <summary>
            Gets or sets the ImageList for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.Visible">
            <summary>
            Gets or sets a value indicating whether this <c>ScrollingButton</c> is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.BorderStyle">
            <summary>
            Gets or sets the border style for this <c>ScrollingButton</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.Checked">
            <summary>
            Gets or sets a boolean value indicating whether button appears pressed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.AllowCheck">
            <summary>
            Gets or sets a value indicating whehter button should automatically appear pressed in and not pressed in when clicked.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.GroupIndex">
            <summary>
            Gets or sets a value allows buttons to work together as a group.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.Scrolling">
            <summary>
            Gets or sets <c>IScrolling</c> contains this button.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.Button">
            <summary>
            Represents windowed control that appears as a button.
            </summary>
        </member>
        <member name="P:QWhale.Editor.ScrollingButton.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>IScrollingButton</c> object.
            </summary>
        </member>
        <member name="E:QWhale.Editor.ScrollingButton.CheckedChanged">
            <summary>
            Occurs when the value of the <c>Checked</c> property changes.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ScrollingSplitter.#ctor">
            <summary>
            Initializes a new instance of the <c>ScrollSplitter</c> class with default settings.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Resources">
            <summary>
            Represents container of various resources used by Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Resources.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>Resources</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.Resources.#ctor">
            <summary>
            Initializes a new instance of the <c>Resources</c> class with default settings.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.HtmlImporter">
            <summary>
            Represents class that can import Edit control's content stored in HTML format.
            </summary>
        </member>
        <member name="T:QWhale.Editor.PositionChangedEventArgs">
            <summary>
            Provides data for the event that occurs when the position within the text part of the <c>ITextSource</c> is changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PositionChangedEventArgs.Reason">
            <summary>
            Represents the reason of the position change, such as insert new symbol, delete symbol, navigate and so on.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PositionChangedEventArgs.DeltaX">
            <summary>
            Represents the horizontal displacement of the current position within the text of the <c>ITextSource</c>.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PositionChangedEventArgs.DeltaY">
            <summary>
            Represents the vertical displacement of the current position within the text of the <c>ITextSource</c> control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PositionChangedEventArgs.#ctor(QWhale.Editor.TextSource.UpdateReason,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <c>PositionChangedEventArgs</c> class with specified parameters.
            </summary>
            <param name="reason">Reason of the position change.</param>
            <param name="deltaX">Horizontal displacement of the current position.</param>
            <param name="deltaY">Vertical displacement of the current position.</param>
        </member>
        <member name="T:QWhale.Editor.EditPages">
            <summary>
            Represents a collection of pages in the Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IEditPages">
            <summary>
            Represents a collection of pages in the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.Update(QWhale.Editor.IEditPage)">
            <summary>
            When implemented by a class, recalculates bounds of the specified page.
            </summary>
            <param name="page">Page to update.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPages.Update(QWhale.Editor.IEditPage,System.Boolean)">
            <summary>
            When implemented by a class, recalculates bounds and updates content of specified page.
            </summary>
            <param name="page">Page to update.</param>
            <param name="changed">Indicates that page should recalculate it's content.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPages.UpdatePages(System.Int32)">
            <summary>
            When implemented by a class, recalculates bounds and updates content of specified page.
            </summary>
            <param name="index">Page index to update.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPages.Add">
            <summary>
            When implemented by a class, adds a new <c>IEditPage</c> to the collection.
            </summary>
            <returns><c>IEditPage</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.OnDrawHeader(System.String@)">
            <summary>
            When implemented by a class, raises <c>DrawHeader</c> event.
            </summary>
            <param name="text">Specifies text to draw.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageIndexAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, finds page at specified display position.
            </summary>
            <param name="position">Position in display coordinates to obtain the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageIndexAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds page at specified display position.
            </summary>
            <param name="x">X-coordinate of the position (in display coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in display coordinates) to find the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageIndexAtPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, finds page at specified screen position.
            </summary>
            <param name="position">Position in screen coordinates to obtain the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageIndexAtPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds page at specified screen position.
            </summary>
            <param name="x">X-coordinate of the position (in screen coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in screen coordinates) to find the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageIndexAtCursor">
            <summary>
            When implemented by a class, finds page at caret position.
            </summary>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, finds page at specified display position.
            </summary>
            <param name="position">Position in display coordinates to obtain the page.</param>
            <returns><c>IEditPage</c> found.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageAt(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds page at specified display position.
            </summary>
            <param name="x">X-coordinate of the position (in display coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in display coordinates) to find the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageAtPoint(System.Drawing.Point)">
            <summary>
            When implemented by a class, finds page at specified screen position.
            </summary>
            <param name="position">Position in screen coordinates to obtain the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageAtPoint(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, finds page at specified screen position.
            </summary>
            <param name="x">X-coordinate of the position (in screen coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in screen coordinates) to find the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.GetPageAtCursor">
            <summary>
            When implemented by a class, finds page at caret position.
            </summary>
            <returns><c>IEditPage</c> containing caret.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditPages.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, draws pages collection on the graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of pages collection to draw on.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPages.InitDefaultPageSettings(System.Drawing.Printing.PageSettings)">
            <summary>
            When implemented by a class, initializes page settings with default values.
            </summary>
            <param name="settings">Specifies page settings to initialize.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPages.DisplayRulers">
            <summary>
            When implemented by a class, displays rulers if needed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.CancelDragging">
            <summary>
            When implemented by a class, cancels dragging operation of the page ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetPageType">
            <summary>
            When implemented by a class, resets <c>PageType</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetBackColor">
            <summary>
            When implemented by a class, resets <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetBorderColor">
            <summary>
            When implemented by a class, resets <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetDisplayWhiteSpace">
            <summary>
            When implemented by a class, resets <c>DisplayWhiteSpace</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetRulerUnits">
            <summary>
            When implemented by a class, resets <c>RulerUnits</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetRulerOptions">
            <summary>
            When implemented by a class, resets <c>RulerOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetRulers">
            <summary>
            When implemented by a class, resets <c>Rulers</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetRulerBackColor">
            <summary>
            When implemented by a class, resets <c>RulerBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.ResetRulerIndentBackColor">
            <summary>
            When implemented by a class, resets <c>RulerIndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.Invalidate(QWhale.Editor.IEditPage)">
            <summary>
            When implemented by a class, invalidates specified page.
            </summary>
            <param name="page">Page to invalidate.</param>
        </member>
        <member name="M:QWhale.Editor.IEditPages.Clear">
            <summary>
            When implemented by a class, removes all items from the pages collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditPages.IndexOf(QWhale.Editor.IEditPage)">
            <summary>
            When implemented by a class, returns index of page within page collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.PageType">
            <summary>
            When implemented by a class, gets or sets value specifying the way of viewing Edit control's content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to individual <c>IEditPage</c> stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.List">
            <summary>
            When implemented by a class, provides an indexed access to individual pages within IEditPages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.Count">
            <summary>
            When implemented by a class, represents a number of pages in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.PageKind">
            <summary>
            Gets or sets kind of the pages specifying standart paper size.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.DefaultPage">
            <summary>
            When implemented by a class, gets or sets properties for default <c>IEditPage</c> object in the pages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.DefaultPageSize">
            <summary>
            When implemented by a class, represents default page size.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.DefaultMargins">
            <summary>
            When implemented by a class, represents default page margins.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.DefaultLandscape">
            <summary>
            When implemented by a class, represents default page landscape.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.DefaultPageKind">
            <summary>
            When implemented by a class, represents default page kind.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.BackColor">
            <summary>
            When implemented by a class, gets or sets a background color of each page in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.BorderColor">
            <summary>
            When implemented by a class, gets or sets a border color of each page in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.DisplayWhiteSpace">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw whitespace area between pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.Height">
            <summary>
            When implemented by a class, represents total height of all pages in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.Width">
            <summary>
            When implemented by a class, represents pages width.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.VertRuler">
            <summary>
            When implemented by a class, represents <c>IEditRuler</c> object used as a vertical page ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.HorzRuler">
            <summary>
            When implemented by a class, represents <c>IEditRuler</c> object used as a horizontal page ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.RulerUnits">
            <summary>
            When implemented by a class, gets or sets measurement units of the pages rulers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.RulerOptions">
            <summary>
            When implemented by a class, gets or sets options of the pages rulers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.Rulers">
            <summary>
            When implemented by a class, gets or sets the rulers displayed withing Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.ApplyRulerToAllPages">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates that changing of rulers indentation applies to all pages rather than to current page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.RulerBackColor">
            <summary>
            When implemented by a class, gets or sets background color of the pages rulers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.RulerIndentBackColor">
            <summary>
            When implemented by a class, gets or sets background color of the indentations parts of the pages rulers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.Transparent">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether Edit control should draw background around the pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.Caps">
            <summary>
            When implemented by a class, gets size in pixels per logical inch of entire screen.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IEditPages.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IEditPages
            </summary>
        </member>
        <member name="E:QWhale.Editor.IEditPages.DrawHeader">
            <summary>
            When implemented by a class, occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.#ctor">
            <summary>
            Initializes a new instance of the <c>EditPages</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>EditPages</c> class with the specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.EditPages.Finalize">
            <summary>
            Destroys the instance of the <c>EditPages</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.Invalidate(QWhale.Editor.IEditPage)">
            <summary>
            Invalidates specified page.
            </summary>
            <param name="page">Page to invalidate.</param>
        </member>
        <member name="M:QWhale.Editor.EditPages.OnDrawHeader(System.String@)">
            <summary>
            Raises <c>DrawHeader</c> event.
            </summary>
            <param name="text">Specifies text to draw.</param>
        </member>
        <member name="M:QWhale.Editor.EditPages.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.ShouldSerializeBorderColor">
            <summary>
            Indicates whether the <c>BorderColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BorderColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.ShouldSerializeRulerOptions">
            <summary>
            Indicates whether the <c>RulerOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.ShouldSerializePageKind">
            <summary>
            Indicates whether the <c>PageKind</c> property should be persisted.
            </summary>
            <returns>True if <c>PageKind</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.ShouldSerializeRulerBackColor">
            <summary>
            Indicates whether the <c>RulerBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.ShouldSerializeRulerIndentBackColor">
            <summary>
            Indicates whether the <c>RulerIndentBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>RulerIndentBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.BeginUpdate">
            <summary>
            Prevents pages updating until calling <c>EditPages.EndUpdate</c> method.
            </summary>
            <returns>Number of pages updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.EndUpdate">
            <summary>
            Re-enables pages updating, that was turn of by calling <c>EditPages.BeginUpdate</c> method.
            </summary>
            <returns>Number of pages updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.Update">
            <summary>
            Recalculates bounds of all pages in the collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.Update(QWhale.Editor.IEditPage)">
            <summary>
            Recalculates bounds of the specified page.
            </summary>
            <param name="page">Page to update.</param>
        </member>
        <member name="M:QWhale.Editor.EditPages.Update(QWhale.Editor.IEditPage,System.Boolean)">
            <summary>
            Recalculates bounds and updates content of specified page.
            </summary>
            <param name="page">Page to update.</param>
            <param name="changed">Indicates that page should recalculate it's content.</param>
        </member>
        <member name="M:QWhale.Editor.EditPages.UpdatePages(System.Int32)">
            <summary>
            Recalculates bounds and updates content of specified page.
            </summary>
            <param name="index">Page index to update.</param>
        </member>
        <member name="M:QWhale.Editor.EditPages.DisplayRulers">
            <summary>
            Displays rulers if needed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.Add">
            <summary>
            Adds a new <c>IEditPage</c> to the collection.
            </summary>
            <returns><c>IEditPage</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageIndexAt(System.Drawing.Point)">
            <summary>
            Finds page at specified display position.
            </summary>
            <param name="position">Position in display coordinates to obtain the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageIndexAt(System.Int32,System.Int32)">
            <summary>
            Finds page at specified display position.
            </summary>
            <param name="x">X-coordinate of the position (in display coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in display coordinates) to find the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageIndexAtPoint(System.Drawing.Point)">
            <summary>
            Finds page at specified screen position.
            </summary>
            <param name="position">Position in screen coordinates to obtain the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageIndexAtPoint(System.Int32,System.Int32)">
            <summary>
            Finds page at specified screen position.
            </summary>
            <param name="x">X-coordinate of the position (in screen coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in screen coordinates) to find the page.</param>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageIndexAtCursor">
            <summary>
            Finds page at caret position.
            </summary>
            <returns>Ordinal number of found page within the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageAt(System.Drawing.Point)">
            <summary>
            Finds page at specified display position.
            </summary>
            <param name="position">Position in display coordinates to obtain the page.</param>
            <returns><c>IEditPage</c> found.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageAt(System.Int32,System.Int32)">
            <summary>
            Finds page at specified display position.
            </summary>
            <param name="x">X-coordinate of the position (in display coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in display coordinates) to find the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageAtPoint(System.Drawing.Point)">
            <summary>
            Finds page at specified screen position.
            </summary>
            <param name="position">Position in screen coordinates to obtain the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageAtPoint(System.Int32,System.Int32)">
            <summary>
            Finds page at specified screen position.
            </summary>
            <param name="x">X-coordinate of the position (in screen coordinates) to find the page.</param>
            <param name="y">Y-coordinate of the position (in screen coordinates) to find the page.</param>
            <returns><c>IEditPage</c> containing specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.GetPageAtCursor">
            <summary>
            Finds page at caret position.
            </summary>
            <returns><c>IEditPage</c> containing caret.</returns>
        </member>
        <member name="M:QWhale.Editor.EditPages.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Draws pages collection on the graphic surface.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of pages collection to draw on.</param>
        </member>
        <member name="M:QWhale.Editor.EditPages.InitDefaultPageSettings(System.Drawing.Printing.PageSettings)">
            <summary>
            Initializes page setting with default values.
            </summary>
            <param name="pageSettings">Specifies page settings to initialize.</param>
        </member>
        <member name="M:QWhale.Editor.EditPages.CancelDragging">
            <summary>
            Cancels dragging operation of the page ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.Clear">
            <summary>
            Removes all items from the pages collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.IndexOf(QWhale.Editor.IEditPage)">
            <summary>
            Returns index of page within page collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetPageType">
            <summary>
            Resets <c>PageType</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetBackColor">
            <summary>
            Resets <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetBorderColor">
            <summary>
            Resets <c>BorderColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetDisplayWhiteSpace">
            <summary>
            Resets <c>DisplayWhiteSpace</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetRulerUnits">
            <summary>
            Resets <c>RulerUnits</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetRulerOptions">
            <summary>
            Resets <c>RulerOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetRulers">
            <summary>
            Resets <c>Rulers</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetRulerBackColor">
            <summary>
            Resets <c>RulerBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.ResetRulerIndentBackColor">
            <summary>
            Resets <c>RulerIndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditPages.IsTransparent(System.Boolean)">
            <summary>
            Indicates whether pages are transparent.
            </summary>
            <param name="nonClient">True if non client editor area should be included to check-up.</param>
            <returns>True if pages are transparent; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.EditPages.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>EditPages</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="P:QWhale.Editor.EditPages.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.PageType">
            <summary>
            Gets or sets value specifying the way of viewing Edit control's content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.PageKind">
            <summary>
            Gets or sets kind of the pages specifying standart paper size.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.DefaultPage">
            <summary>
            Gets or sets properties for default <c>IEditPage</c> object in the pages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.BackColor">
            <summary>
            Gets or sets a background color of each page in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.BorderColor">
            <summary>
            Gets or sets a border color of each page in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.DisplayWhiteSpace">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw whitespace area between pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.Height">
            <summary>
            Represents total height of all pages in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.Width">
            <summary>
            Represents pages width.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.VertRuler">
            <summary>
            Represents <c>IEditRuler</c> object used as a vertical page ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.HorzRuler">
            <summary>
            Represents <c>IEditRuler</c> object used as a horizontal page ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.RulerUnits">
            <summary>
            Gets or sets measurement units of the pages rulers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.RulerOptions">
            <summary>
            Gets or sets options of the pages rulers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.Rulers">
            <summary>
            Gets or sets the rulers displayed withing Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.ApplyRulerToAllPages">
            <summary>
            Gets or sets a boolean value that indicates that changing of rulers indentation applies to all pages rather than to current page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.RulerBackColor">
            <summary>
            Gets or sets background color of the pages rulers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.RulerIndentBackColor">
            <summary>
            Gets or sets background color of the indentations parts of the pages rulers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.Transparent">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should draw background around the pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.Caps">
            <summary>
            Gets size in pixels per logical inch of entire screen.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.Owner">
            <summary>
             Gets Edit control owns this pages.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.DefaultPageSize">
            <summary>
            Represents default page size.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.DefaultMargins">
            <summary>
            Represents default page margins.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual <c>IEditPage</c> stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.Count">
            <summary>
            Represents a number of pages in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.List">
            <summary>
            Provides an indexed access to individual pages within IEditPages collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.DefaultLandscape">
            <summary>
            Represents default page landscape.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditPages.DefaultPageKind">
            <summary>
            Represents default page kind.
            </summary>
        </member>
        <member name="E:QWhale.Editor.EditPages.DrawHeader">
            <summary>
            Occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.DlgSyntaxSettings">
            <summary>
            Represents dialog box used to save/restore key properties for Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSyntaxSettings.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgSyntaxSettings</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSyntaxSettings.#ctor(QWhale.Editor.Dialogs.EditorSettingsTab)">
            <summary>
            Initializes a new instance of the <c>DlgSyntaxSettings</c> class with specifed settings.
            </summary>
            <param name="hiddenTabs">Specifies tabs not to show in the dialog box.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSyntaxSettings.Execute(QWhale.Editor.Dialogs.EditorSettingsTab)">
            <summary>
            Initializes and runs a editor settings dialog box.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSyntaxSettings.Execute(QWhale.Editor.Dialogs.EditorSettingsTab,System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs a editor settings dialog box.
            </summary>
            <param name="hiddenTabs">specifies hidden tabs in the syntax settings dialog</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSyntaxSettings.QWhale#Editor#Dialogs#IEditorSettingsDialog#ShowDialog">
            <summary>
            Represents dialog box used to save/restore key properties for Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSyntaxSettings.QWhale#Editor#Dialogs#IEditorSettingsDialog#ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Represents dialog box used to save/restore key properties for Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSyntaxSettings.QWhale#Editor#Dialogs#IEditorSettingsDialog#add_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents dialog box used to save/restore key properties for Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgSyntaxSettings.QWhale#Editor#Dialogs#IEditorSettingsDialog#remove_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents dialog box used to save/restore key properties for Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgSyntaxSettings.SyntaxSettings">
            <summary>
            Gets or sets object that implements <c>ISyntaxSettings</c> for this dialog.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IScrollingButtons">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>IScrollingButton</c> object.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IScrollingButtons.Assign(QWhale.Editor.IScrollingButtons)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrollingButtons</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButtons</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IScrollingButtons.AddScrollingButton">
            <summary>
            When implemented by a class, creates and adds a new <c>IScrollingButton</c> to the collection.
            </summary>
            <returns>Index of this new <c>IScrollingButton</c> in the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.IScrollingButtons.AddScrollingButton(System.String,System.String,System.Int32)">
            <summary>
            When implemented by a class, creates new <c>IScrollingButton</c> with specified parameters and adds it to the collection.
            </summary>
            <param name="name"><c>Name</c> of this new <c>IScrollingButton</c>.</param>
            <param name="description"><c>Description</c> of this new <c>IScrollingButton</c>.</param>
            <param name="imageIndex"><c>ImageIndex</c> of this new <c>IScrollingButton</c>.</param>
            <returns>Index of this new <c>IScrollingButton</c> in the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.IScrollingButtons.Add(QWhale.Editor.IScrollingButton)">
            <summary>
            When implemented by a class, adds an <c>IScrollingButton</c> to the list.
            </summary>
            <param name="item"><c>IScrollingButton</c> to be added.</param>
        </member>
        <member name="T:QWhale.Editor.IEditLineStyles">
            <summary>
            Represents properties and methods for a collection of the <c>ILineStyle</c> objects each one specifying a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyles.Assign(QWhale.Editor.IEditLineStyles)">
            <summary>
            When implemented by a class, copies the contents from another <c>IEditLineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>IEditLineStyles</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyles.IndexOfName(System.String)">
            <summary>
            When implemented by a class, returns the zero-based index of the first occurrence of the specified Name in the line style collection.
            </summary>
            <param name="name">Name of line style to locate.</param>
            <returns>Index of the style found.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyles.AddLineStyle">
            <summary>
            When implemented by a class, adds a new <c>ILineStyle</c> to the collection.
            </summary>
            <returns>Index of the added element.</returns>
        </member>
        <member name="M:QWhale.Editor.IEditLineStyles.AddLineStyle(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,QWhale.Editor.LineStyleOptions)">
            <summary>
            When implemented by a class, adds a new <c>ILineStyle</c> with specified parameters to the collection.
            </summary>
            <param name="name">Name of new <c>ILineStyle</c>.</param>
            <param name="foreColor">Foreground color of new <c>ILineStyle</c>.</param>
            <param name="backColor">Background color of new <c>ILineStyle</c>.</param>
            <param name="penColor">Pen color of new <c>ILineStyle</c>.</param>
            <param name="imageIndex">Image index of new <c>ILineStyle</c>.</param>
            <param name="options">Options of new <c>ILineStyle</c>.</param>
            <returns>Index of the added element in the <c>ILineStyle</c> collection.</returns>
        </member>
        <member name="P:QWhale.Editor.IEditLineStyles.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IEditLineStyles
            </summary>
        </member>
        <member name="T:QWhale.Editor.Scrolling">
            <summary>
            Represents properties and methods that describe scrolling behaviour of Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IScrolling">
            <summary>
            Represents properties and methods that describe scrolling behaviour of Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IScrolling.Assign(QWhale.Editor.IScrolling)">
            <summary>
            When implemented by a class, copies the contents of another <c>IScrolling</c> object.
            </summary>
            <param name="source">Specifies <c>IScrolling</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IScrolling.ResetScrollBars">
            <summary>
            When implemented by a class, resets the <c>ScrollBars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IScrolling.ResetDefaultHorzScrollSize">
            <summary>
            When implemented by a class, resets the <c>DefaultHorzScrollSize</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IScrolling.ResetOptions">
            <summary>
            When implemented by a class, resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IScrolling.UpdateScroll">
            <summary>
            When implemented by a class, updates scrolling control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IScrolling.UpdateScroll(System.Boolean)">
            <summary>
            When implemented by a class, updates scrolling control.
            </summary>
            <param name="updateSize">True if scrolling control should be resized; otherwise false.</param>
        </member>
        <member name="M:QWhale.Editor.IScrolling.MouseScroll(System.Int32)">
            <summary>
            When implemented by a class, scrolls editor control vertically.
            </summary>
            <param name="delta">Specifies mouse wheel delta.</param>
        </member>
        <member name="M:QWhale.Editor.IScrolling.SystemScroll(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, performs a system scrolls by calling Windows API.
            </summary>
            <param name="code">Specifies scrolling request.</param>
            <param name="vert">True if vertical scroll bar should be scrolled; otherwise false.</param>
        </member>
        <member name="M:QWhale.Editor.IScrolling.UpdateFlat">
            <summary>
            When implemented by a class, initializes flat scroll bars for editor control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IScrolling.OnScrollButtonClick(System.Object,System.EventArgs)">
            <summary>
            When implemented by a class, raises <c>ScrollButtonClick</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="P:QWhale.Editor.IScrolling.ScrollBars">
            <summary>
            When implemented by a class, gets or sets the type of scroll bars displayed in the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.DefaultHorzScrollSize">
            <summary>
            When implemented by a class, gets or sets a default size of horizontal scrollbar.
            </summary>
            <remarks>This property is applicable when control forces showing of the horizontal scroll bar.</remarks>
        </member>
        <member name="P:QWhale.Editor.IScrolling.WindowOriginX">
            <summary>
            When implemented by a class, gets or sets a index of the first visible character within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.WindowOriginY">
            <summary>
            When implemented by a class, gets or sets a value that represents first visible line within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.HScrollBar">
            <summary>
            When implemented by a class, gets horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.VScrollBar">
            <summary>
            When implemented by a class, gets vertical scroll bar control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.HasHScrollBar">
            <summary>
            When implemented by a class, gets boolean value indicating whether control has a horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.HasVScrollBar">
            <summary>
            When implemented by a class, gets boolean value indicating whether control has a vertical scroll bar control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.HorzButtons">
            <summary>
            When implemented by a class, represents a collection of additional buttons displayed on the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.VertButtons">
            <summary>
            When implemented by a class, represents a collection of additional buttons displayed on the vertical scroll bar.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.Owner">
            <summary>
            When implemented by a class, represents owner of this <c>IScrolling</c> object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.Options">
            <summary>
            When implemented by a class, gets or sets a <c>ScrollingOptions</c> that determine scrolling behaviour.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.VertScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether verticall scrollbar is visible
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.HorzScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether horizontal scrollbar is visible
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.FixedScrollSize">
            <summary>
            When implemented by a class, indicates whether horz scrollbar has fixed size.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.ScrollByPixels">
            <summary>
            When implemented by a class, indicates whether scrollbars should use pixels rather than characters.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IScrolling.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IScrolling
            </summary>
        </member>
        <member name="E:QWhale.Editor.IScrolling.VerticalScroll">
            <summary>
            When implemented by a class, occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IScrolling.HorizontalScroll">
            <summary>
            When implemented by a class, occurs when control scrolls its content in horizonal direction. This can be caused by dragging horizonal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IScrolling.ScrollButtonClick">
            <summary>
            When implemented by a class, occurs when some scrolling button is clicked.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Scrolling.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Scrolling</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.Scrolling.Finalize">
            <summary>
            Destroys the instance of the <c>Scrolling</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Scrolling.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Scrolling.ShouldSerializeDefaultHorzScrollSize">
            <summary>
            Indicates whether the <c>DefaultHorzScrollSize</c> property should be persisted.
            </summary>
            <returns>True if <c>DefaultHorzScrollSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Scrolling.BeginUpdate">
            <summary>
            Prevents <c>Scrolling</c> updating until the <c>EndUpdate</c> method is called.
            </summary>
            <returns>Number of <c>Scrolling</c> updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Scrolling.EndUpdate">
            <summary>
            Re-enables <c>Scrolling</c> updating turned off by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of <c>Scrolling</c> updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Scrolling.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Scrolling.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Scrolling.Update">
            <summary>
            Updates the <c>Scrolling</c> size and position.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Scrolling.Assign(QWhale.Editor.IScrolling)">
            <summary>
            Copies the contents of another <c>IScrolling</c> object.
            </summary>
            <param name="source">Specifies <c>IScrolling</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Scrolling.ResetScrollBars">
            <summary>
            Resets the <c>ScrollBars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Scrolling.ResetDefaultHorzScrollSize">
            <summary>
            Resets the <c>DefaultHorzScrollSize</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Scrolling.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Scrolling.UpdateScroll">
            <summary>
            Updates scrolling control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Scrolling.UpdateScroll(System.Boolean)">
            <summary>
            Updates scrolling control.
            </summary>
            <param name="updateSize">True if scrolling control should be resized; otherwise false.</param>
        </member>
        <member name="M:QWhale.Editor.Scrolling.SystemScroll(System.Int32,System.Boolean)">
            <summary>
            Performs a system scrolls by calling Windows API.
            </summary>
            <param name="code">Specifies scrolling request.</param>
            <param name="vert">True if vertical scroll bar should be scrolled; otherwise false.</param>
        </member>
        <member name="M:QWhale.Editor.Scrolling.UpdateFlat">
            <summary>
            Initializes flat scroll bars for editor control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Scrolling.MouseScroll(System.Int32)">
            <summary>
            Scrolls editor control vertically.
            </summary>
            <param name="delta">Specifies mouse wheel delta.</param>
        </member>
        <member name="M:QWhale.Editor.Scrolling.OnScrollButtonClick(System.Object,System.EventArgs)">
            <summary>
            Raises <c>ScrollButtonClick</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An <c>EventArgs</c> that contains the event data.</param>
        </member>
        <member name="P:QWhale.Editor.Scrolling.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.ScrollBars">
            <summary>
            Gets or sets the type of scroll bars displayed in the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.DefaultHorzScrollSize">
            <summary>
            Gets or sets a default size of horizontal scrollbar.
            </summary>
            <remarks>This property is applicable when control forces showing of the horizontal scroll bar.</remarks>
        </member>
        <member name="P:QWhale.Editor.Scrolling.WindowOriginX">
            <summary>
            Gets or sets a index of the first visible character within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.WindowOriginY">
            <summary>
            Gets or sets a value that represents first visible line within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.HScrollBar">
            <summary>
            Gets horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.VScrollBar">
            <summary>
            Gets vertical scroll bar control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.HasHScrollBar">
            <summary>
            Indicates whether control has a horizontal scroll bar control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.FixedScrollSize">
            <summary>
            Indicates whether horz scrollbar has fixed size.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.HasVScrollBar">
            <summary>
            Indicates whether control has a vertical scroll bar control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.HorzButtons">
            <summary>
            Represents a collection of additional buttons displayed at the horizontal scroll bar area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.VertButtons">
            <summary>
            Represents a collection of additional buttons displayed at the vertical scroll bar area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.Options">
            <summary>
            Gets or sets a <c>ScrollingOptions</c> that determine scrolling behaviour.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.VertScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether verticall scrollbar is visible
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.HorzScrollbarVisible">
            <summary>
            When implemented by a class, indicates whether horizontal scrollbar is visible
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.ScrollByPixels">
            <summary>
            Indicates whether scrollbars should use pixels rather than characters.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.VertSplitButton">
            <summary>
            Represents a special button on the scroll area used to split Edit control vertically.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.HorzSplitButton">
            <summary>
            Represents a special button on the scroll area used split Edit control horizontally.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.Owner">
            <summary>
            Represents owner of this <c>IScrolling</c> object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Scrolling.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>Scrolling</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Editor.Scrolling.VerticalScroll">
            <summary>
            Occurs when control scrolls its content in vertical direction. This can be caused by dragging vertical scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Scrolling.HorizontalScroll">
            <summary>
            Occurs when control scrolls its content in horizonal direction. This can be caused by dragging horizonal scroll thumb, or caret moving.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Scrolling.ScrollButtonClick">
            <summary>
            Occurs when some scrolling button is clicked.
            </summary>
        </member>
        <member name="T:QWhale.Editor.PageHeader">
            <summary>
            Represents header/footer parts of the Editor page.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PageHeader.#ctor">
            <summary>
            Initializes a new instance of <c>PageHeader</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PageHeader.#ctor(QWhale.Editor.IEditPage,QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of <c>PageHeader</c> class with specified owner.
            </summary>
            <param name="page">Specifies <c>IEditPage</c> that owns this new instance.</param>
            <param name="owner"><c>ISyntaxEdit</c> container of page.</param> 
        </member>
        <member name="M:QWhale.Editor.PageHeader.Finalize">
            <summary>
            Destroys the instance of the <c>PageHeader</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PageHeader.GetTextToPaint(System.String,System.Int32,System.Int32)">
            <summary>
            Replaces all tags in the given text by their values.
            </summary>
            <param name="text">Specifies text to format.</param>
            <param name="pageIndex">Specifies index of page.</param>
            <param name="pageCount">Specifies page count.</param>
            <returns>Formatted text.</returns>
        </member>
        <member name="M:QWhale.Editor.PageHeader.ShouldSerializeFontColor">
            <summary>
            Indicates whether the <c>FontColor</c> property should be persisted.
            </summary>
            <returns>True if <c>FontColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.PageHeader.ShouldSerializeOffset">
            <summary>
            Indicates whether the <c>Offset</c> property should be persisted.
            </summary>
            <returns>True if <c>Offset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.PageHeader.ShouldSerializeFont">
            <summary>
            Indicates whether the <c>Font</c> property should be persisted.
            </summary>
            <returns>True if <c>Font</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.PageHeader.BeginUpdate">
            <summary>
            Prevents PageHeader updating until calling <c>PageHeader.EndUpdate</c> method.
            </summary>
            <returns>Number of PageHeader updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.PageHeader.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>PageHeader.BeginUpdate</c> method.
            </summary>
            <returns>Number of PageHeader updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.PageHeader.DisableUpdate">
            <summary>
            Prevents PageHeader updating until calling <c>PageHeader.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.PageHeader.EnableUpdate">
            <summary>
            Re-enables PageHeader updating, that was turn of by calling <c>PageHeader.BeginUpdate</c> method.
            </summary>
            <returns>Number of PageHeader updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.PageHeader.Update">
            <summary>
            Invalidates the header.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PageHeader.Assign(QWhale.Editor.IEditPageHeader)">
            <summary>
            Copies the contents of another <c>IEditPageHeader</c> object.
            </summary>
            <param name="source">Specifies <c>IEditPageHeader</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.PageHeader.ResetFont">
            <summary>
            Resets the <c>PageHeader.Font</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PageHeader.ResetOffset">
            <summary>
            Resets the <c>PageHeader.Offset</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PageHeader.ResetFontColor">
            <summary>
            Resets the <c>PageHeader.FontColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PageHeader.ResetReverseOnEvenPages">
            <summary>
            Resets the <c>PageHeader.ReverseOnEvenPages</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.PageHeader.Paint(QWhale.Common.IPainter,System.Drawing.Rectangle,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Draws page header/footer on the specified graphic surface.
            </summary>
            <param name="painter">Represents <c>IPainter</c> surface to draw on.</param>
            <param name="rect">Rectangular area of header/footer to draw on.</param>
            <param name="pageIndex">Index of page which header/footer is drawing.</param>
            <param name="pageCount">Total number of pages.</param>
            <param name="pageNumbers">Specifies whether header/footer should draw page number.</param>
        </member>
        <member name="P:QWhale.Editor.PageHeader.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.LeftText">
            <summary>
            Gets or sets a string that appears at the left part of the header/footer area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.CenterText">
            <summary>
            Gets or sets a string that appears at the center of the header/footer area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.RightText">
            <summary>
            Gets or sets a string that appears at the right part of the header/footer area.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.Font">
            <summary>
            Gets or sets font used to draw header/footer text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.FontColor">
            <summary>
            Gets or sets font color used to draw header/footer text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.Offset">
            <summary>
            Gets or sets indentation of the primary text edge.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.Visible">
            <summary>
            Gets or sets a value indicating whether the <c>PageHeader</c> is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.ReverseOnEvenPages">
            <summary>
            Gets or sets a value indicating whether the <c>LeftText</c> and <c>RightText</c> interchanging on even page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.PageHeader.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>PageHeader</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Editor.PageHeader.DrawHeader">
            <summary>
            Occurs when header or footer part of each page is drawing.
            </summary>
        </member>
        <member name="T:QWhale.Editor.EditConsts">
            <summary>
            Contains default constants related to Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.SyntaxSettings">
            <summary>
            This class is designed to hold settings for <c>SyntaxEdit</c> object, allowing to syncrhonize key-properties for all Edit controls in application.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.PersistentSettings">
            <summary>
            Represents a base class for classes designed to save/restore key properties of some object.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.SaveFile(System.String)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified file.
            </summary>
            <param name="fileName">Name of the file to save.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
            <returns></returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.SaveStream(System.IO.Stream)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified stream
            </summary>
            <param name="stream">The Stream object to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves <c>IPersistentSettings</c> content to the specified stream with specific encoding.
            </summary>
            <param name="stream">The Stream object to to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.LoadFile(System.String)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified file.
            </summary>
            <param name="fileName">Name of the file to load.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of the file to load.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified stream.
            </summary>
            <param name="reader">The TextReader object to read.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified stream with specified encoding.
            </summary>
            <param name="stream">The Stream object to to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.LoadStream(System.IO.Stream)">
            <summary>
            Loads <c>IPersistentSettings</c> content from the specified stream with specified encoding.
            </summary>
            <param name="stream">The Stream object to to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.Assign(QWhale.Editor.Dialogs.IPersistentSettings)">
            <summary>
            Copies the contents from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.PersistentSettings.GetXmlType">
            <summary>
            Returns Type object for a class that contain control's settings information. In this class method returns null. Descendant classes can override this method.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.PersistentSettings.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>PersistentSettings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.InitDefaultStyle(System.String,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.FontStyle,System.Boolean)">
            <summary>
            Populates a LexStyle[] with the available LexStyle items, such as "idents", "reswords", etc.
            </summary>
            <param name="lexStyles">A null LexStyle[].</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.InitializeDefaultColorThemes">
            <summary>
            Adds default color themes to the colorThemes instance.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxSettings</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.GetXmlType">
            <summary>
            Returns Type object for a class that contain control's settings information. In this class method returns type of <c>XmlSyntaxSettingsInfo</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.Assign(QWhale.Editor.Dialogs.IPersistentSettings)">
            <summary>
            Copies the content from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.LoadFromEdit(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Changes values stored in the <c>SyntaxSettings</c> accordingly to values of <c>SyntaxEdit</c> control.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to copy properties from.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.ApplyToEdit(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Assigns key properties of given <c>SyntaxEdit</c> according to values strored in the <c>SyntaxSettings</c> instance.
            </summary>
            <param name="edit">Specifies <c>SyntaxEdit</c> to assign settings.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.ApplyToEdit(QWhale.Editor.ISyntaxEdit,System.Boolean)">
            <summary>
            Assigns key properties of given <c>SyntaxEdit</c> according to values strored in the <c>SyntaxSettings</c> instance.
            </summary>
            <param name="withStyles">Specifies that color styles should be copied</param>
            <param name="edit">Specifies <c>SyntaxEdit</c> to assign settings.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.OnHelpRequest(System.Object,System.Windows.Forms.HelpEventArgs)">
            <summary>
            Raises the HelpRequested event. 
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A HelpEventArgs that contains the event data.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QWhale.Editor.Dialogs.SyntaxSettings.IsDescriptionEnabled(System.Int32)" -->
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.IsFontStyleEnabled(System.Int32)">
            <summary>
            Indicates whether font style for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if font style is enabled; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.IsBackColorEnabled(System.Int32)">
            <summary>
            Indicates whether background color for specified lexical style is enabled.
            </summary>
            <param name="index">Specifies index of lexical style to check-up.</param>
            <returns>True if background color is enabled; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SyntaxSettings.Localize">
            <summary>
            Initializes lexical styles according with current culture.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.DefaultColorTheme">
            <summary>
            Gets Default IColorTheme instance.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.LexStyles">
            <summary>
            Gets or sets collection of lexical styles for the <c>Lexer</c> components.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.DefaultLexStyles">
            <summary>
            When implemented by a class, gets or sets collection of default lexical styles.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.ColorThemes">
            <summary>
            Gets or sets the ColorThemes object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.Font">
            <summary>
            Gets or sets Font object for the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.NavigateOptions">
            <summary>
            Gets or sets options for navigating within <c>SyntaxEdit</c> controls content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.ScrollBars">
            <summary>
            Gets or sets the type of scroll bars to display in the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.SelectionOptions">
            <summary>
            Gets or sets options determining appearance and behavior of the <c>Selection</c> object in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.GutterOptions">
            <summary>
            Gets or sets a gutter options that determines <c>Gutter</c> appearance and behavior for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.SeparatorOptions">
            <summary>
            Gets or sets line separator options for SyntaxEdit controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.OutlineOptions">
            <summary>
            Gets or sets outlining options for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.ShowMargin">
            <summary>
            Gets or sets a value indicating whether the <c>Margin</c> is visible in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.ShowGutter">
            <summary>
            Gets or sets a value indicating whether the <c>Gutter</c> is visible in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.HighlightHyperText">
            <summary>
            Gets or sets a value indicating whether urls in the <c>SyntaxEdit</c> controls text should be highlighted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining is enabled for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.UseSpaces">
            <summary>
            Gets or sets a value indicating whether indent operations insert space characters rather than TAB characters in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.WordWrap">
            <summary>
            Gets or sets a value indicating whether <c>SyntaxEdit</c> controls automatically wrap words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.WhiteSpaceVisible">
            <summary>
            Gets or sets a value indicating whether white space is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.GutterWidth">
            <summary>
            Gets or sets the width of the <c>Gutter</c> for <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.MarginPos">
            <summary>
            Gets or sets value indicating position, in characters, of the vertical line within the text portion of the <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.TabStops">
            <summary>
            Gets or sets the character columns that the cursor will move to each time you press Tab in <c>SyntaxEdit</c> controls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.EventNames">
            <summary>
            Represents names of all available event handlers.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.EventData">
            <summary>
            Represents array of event handlers associated with keys
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.PageType">
            <summary>
            Gets or sets value specifying the way of viewing <c>SyntaxEdit</c> control's content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.KeyList">
            <summary>
            Represents the SyntaxEdit object's KeyList property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SyntaxSettings.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>SyntaxSettings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Editor.Dialogs.SyntaxSettings.HelpRequested">
            <summary>
            Occurs when user requests help for a control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.SearchSettings">
            <summary>
            This class is designed to hold settings for search and replace dialogs.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchSettings.#ctor">
            <summary>
            Initializes a new instance of the <c>SearchSettings</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchSettings.Assign(QWhale.Editor.Dialogs.IPersistentSettings)">
            <summary>
            Copies the contents from another <c>IPersistentSettings</c> object.
            </summary>
            <param name="source">Specifies <c>IPersistentSettings</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchSettings.Assign(QWhale.Editor.Dialogs.ISearchSettings)">
            <summary>
            When implemented by a class, copies the content from another <c>ISearchSettings</c> object.
            </summary>
            <param name="source">Specifies <c>ISearchSettings</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchSettings.GetXmlType">
            <summary>
            Returns Type object for a class that contain information about <c>SearchSettings</c>. In this class method returns type of <c>XmlSearchSettingsInfo</c> class.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchSettings.SearchOptions">
            <summary>
            Represents options that determine behavior of search or replace dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchSettings.OptionsVisible">
            <summary>
            Indicates whether find/replace dialog should display search settings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchSettings.ClearBookmarks">
            <summary>
            Indicates whether all unnumbered bookmarks should be removed from the bookmarks collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchSettings.SearchList">
            <summary>
            Represents the search history for the search dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchSettings.ReplaceList">
            <summary>
            Represents the replace history for the replace dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchSettings.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>SearchSettings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.IndentOptions">
            <summary>
            Defines behaviour of Edit control when user presses Enter to insert new text line.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.IndentOptions.None">
            <summary>
            No indentation.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.IndentOptions.AutoIndent">
            <summary>
            Positions the cursor under the first nonblank character of the preceding nonblank line when user presses Enter.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.IndentOptions.SmartIndent">
            <summary>
            Positions the cursor to the line indentation level, obtained from parser supporting option <c>SyntaxOptions.SmartIndent</c> when user presses Enter.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.IndentOptions.UsePrevIndent">
            <summary>
            Uses spaces and tabs from previous line when indenting the line.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.IndentOptions.JumpToIndent">
            <summary>
            Jumps to indent position rather than adding tabs or spaces.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.ICodeCompletionBox">
            <summary>
            Represents properties and methods to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionBox.ClearColumns">
            <summary>
            When implemented by a class, removes all columns from the <c>ICodeCompletionBox</c> column collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionBox.AddColumn">
            <summary>
            When implemented by a class, adds a new column to the <c>ICodeCompletionBox</c> column collection.
            </summary>
            <returns>New added column.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionBox.InsertColumn(System.Int32)">
            <summary>
            When implemented by a class, inserts a new column to the specified position in the column collection.
            </summary>
            <param name="index">Index of the column in the collection.</param>
            <returns>New inserted column.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionBox.RemoveColumnAt(System.Int32)">
            <summary>
            When implemented by a class, removes the column at the specified index of the column collection.
            </summary>
            <param name="index">Specifies zero-based index of the column to remove.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.ICodeCompletionBox.ResetDropDownCount">
            <summary>
            When implemented by a class, resets the <c>DropDownCount</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionBox.CompletionHint">
            <summary>
            When implemented by a class, represents CodeCompletion hint object used to display hints next to completion box.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionBox.CompletionEdit">
            <summary>
            When implemented by a class, represents CodeCompletionEdit object used to display code snippets.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionBox.Columns">
            <summary>
            When implemented by a class, represents collection of <c>ICodeCompletionColumn</c> objects displayed by Code Completion ListBox.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionBox.ShowTabs">
            <summary>
            When implemented by a class, gets or sets boolean value that indicates whether codecompletion window should display additional tabs
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionBox.DropDownCount">
            <summary>
            When implemented by a class, gets or sets a value that specifies maximal visible index of the ListBox items within the popup control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionBox.Filtered">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether <c>ICodeCompletionBox</c> should filter its content using <c>Filer</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionBox.Filter">
            <summary>
            When implemented by a class, gets or sets filter string used to filter <c>ICodeCompletionBox</c> content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.ICodeCompletionBox.Sorted">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the items in the <c>ICodeCompletionBox</c> are sorted alphabetically.
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.ICodeCompletionBox.SelectionChanged">
            <summary>
            When implemented by a class, occurs when index specifying the currently selected item is changed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.StringEvent">
            <summary>
            Represents a method that will handle string replacement event inside <c>Selection</c>
            </summary>
            <param name="s">String to be replaced.</param>
        </member>
        <member name="T:QWhale.Editor.IndentOrientation">
            <summary>
            Specifies alignment of an indentation part of ruler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.IndentOrientation.Near">
            <summary>
            Specifies that indentation is positioned at the begin of the ruler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.IndentOrientation.Far">
            <summary>
            Specifies that indentation is positioned at the end of the ruler.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Printing">
            <summary>
            Represents class designed to print, preview and execute print setup dialog for Edit control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IPrinting">
            <summary>
            Represents properties and methods for printing and print previewing of Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IPrinting.Assign(QWhale.Editor.IPrinting)">
            <summary>
            When implemented by a class, copies the contents of another <c>IPrinting</c> object.
            </summary>
            <param name="source">Specifies <c>IPrinting</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.IPrinting.Print">
            <summary>
            When implemented by a class, sends <c>IPrinting.PrintDocument</c> content to the printer.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ExecutePrintPreviewDialog">
            <summary>
            When implemented by a class, initializes and runs print preview dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ExecutePrintPreviewDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs print preview dialog.
            </summary>
            <param name="ownerwnd">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ExecutePrintDialog">
            <summary>
            When implemented by a class, initializes and runs print dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ExecutePrintDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs print dialog.
            </summary>
            <param name="ownerwnd">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ExecutePageSetupDialog">
            <summary>
            When implemented by a class, initializes and runs page setup dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ExecutePageSetupDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs page setup dialog.
            </summary>
            <param name="ownerwnd">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ExecutePrintOptionsDialog">
            <summary>
            When implemented by a class, initializes and runs print options dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ExecutePrintOptionsDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            When implemented by a class, initializes and runs print options dialog.
            </summary>
            <param name="ownerwnd">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ResetOptions">
            <summary>
            When implemented by a class, resets <c>IPrinting.Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IPrinting.ResetAllowedOptions">
            <summary>
            When implemented by a class, resets <c>IPrinting.AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IPrinting.OnCreatePrintEdit">
            <summary>
            When implemented by a class, raises the <c>CreatePrintEdit</c> event.
            </summary>
            <returns><c>SyntaxEdit</c> that is created to print.</returns>
        </member>
        <member name="M:QWhale.Editor.IPrinting.OnInitialized">
            <summary>
            When implemented by a class, raises the <c>Initialized</c> event.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IPrinting.OnFinalized">
            <summary>
            When implemented by a class, raises the <c>Finalized</c> event.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.PrintDocument">
            <summary>
            When implemented by a class, represents document to print, print preview or setup.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.PrinterSettings">
            <summary>
            When implemented by a class, represents settings for print document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.Options">
            <summary>
            When implemented by a class, gets or sets <c>PrintOptions</c> that determines printing behaviour.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.AllowedOptions">
            <summary>
            When implemented by a class, gets or sets Print Options dialog options, that can be changed by user.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.Header">
            <summary>
            When implemented by a class, represents <c>IEditPageHeader</c> object to draw header of printing document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.Footer">
            <summary>
            When implemented by a class, represents <c>IEditPageHeader</c> object to draw footer of printing document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.PrintDialog">
            <summary>
            When implemented by a class, represents a dialog box that allows users to select a printer and choose which portions of the document to print.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.PageSetupDialog">
            <summary>
            When implemented by a class, represents a dialog box that allows users to manipulate page settings, including margins and paper orientation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.PrintPreviewDialog">
            <summary>
            When implemented by a class, represents a dialog box that allows user to preview print document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.PrintOptionsDialog">
            <summary>
            When implemented by a class, provides a dialog box that allows users to manipulate print settings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.PrintEdit">
            <summary>
            When implemented by a class, provides an access to internal ISyntaxEdit object being printed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.ShowPrintOptionsDialog">
            <summary>
            When implemented by a class, gets or sets a value indicating whether Print Options Dialog can be opened.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IPrinting.SerializationInfo">
            <summary>
            Gets or sets an xml representation of IPrinting
            </summary>
        </member>
        <member name="E:QWhale.Editor.IPrinting.CreatePrintEdit">
            <summary>
            When implemented by a class, occurs when Edit control to print is about to be created.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IPrinting.Initialized">
            <summary>
            When implemented by a class, occurs when document to print is initialized.
            </summary>
        </member>
        <member name="E:QWhale.Editor.IPrinting.Finalized">
            <summary>
            When implemented by a class, occurs when printing is done.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Printing.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Printing</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.Printing.Finalize">
            <summary>
            Destroys the instance of the <c>Printing</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Printing.OnCreatePrintEdit">
            <summary>
            Raises the <c>CreatePrintEdit</c> event.
            </summary>
            <returns><c>SyntaxEdit</c> that is created to print.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.OnInitialized">
            <summary>
            Raises the <c>Initialized</c> event.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Printing.OnFinalized">
            <summary>
            Raises the <c>Finalized</c> event.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Printing.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ShouldSerializeAllowedOptions">
            <summary>
            Indicates whether the <c>AllowedOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>AllowedOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.Assign(QWhale.Editor.IPrinting)">
            <summary>
            Copies the contents of another <c>IPrinting</c> object.
            </summary>
            <param name="source">Specifies <c>IPrinting</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Printing.Print">
            <summary>
            Sends <c>Printing.PrintDocument</c> content to the printer.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Printing.ExecutePrintPreviewDialog">
            <summary>
            Initializes and runs print preview dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ExecutePrintPreviewDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs print preview dialog.
            </summary>
            <param name="ownerwnd">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ExecutePrintDialog">
            <summary>
            Initializes and runs print dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ExecutePrintDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs print dialog.
            </summary>
            <param name="ownerwnd">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ExecutePageSetupDialog">
            <summary>
            Initializes and runs page setup dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ExecutePageSetupDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs page setup dialog.
            </summary>
            <param name="ownerwnd">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ExecutePrintOptionsDialog">
            <summary>
            Initializes and runs print options dialog.
            </summary>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ExecutePrintOptionsDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs print options dialog.
            </summary>
            <param name="ownerwnd">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Printing.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Printing.ResetAllowedOptions">
            <summary>
            Resets <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.PrintDocument">
            <summary>
            Represents document to print, print preview or setup.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.PrinterSettings">
            <summary>
            Represents settings for print document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.Options">
            <summary>
            Gets or sets <c>PrintOptions</c> that determines printing behaviour.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.AllowedOptions">
            <summary>
            Gets or sets Print Options dialog options, that can be changed by user.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.Header">
            <summary>
            Represents <c>IEditPageHeader</c> object to draw header of printing document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.Footer">
            <summary>
            Represents <c>IEditPageHeader</c> object to draw footer of printing document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.PrintDialog">
            <summary>
            Represents a dialog box that allows users to select a printer and choose which portions of the document to print.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.PageSetupDialog">
            <summary>
            Represents a dialog box that allows users to manipulate page settings, including margins and paper orientation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.PrintPreviewDialog">
            <summary>
            Represents a dialog box that allows user to preview print document.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.PrintEdit">
            <summary>
            Provides an access to internal ISyntaxEdit object being printed.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.ShowPrintOptionsDialog">
            <summary>
            Gets or sets a value indicating whether Print Options Dialog can be opened.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.PrintOptionsDialog">
            <summary>
            Provides a dialog box that allows users to manipulate print settings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Printing.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>Printing</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Editor.Printing.CreatePrintEdit">
            <summary>
            Occurs when Edit control to print is about to be created.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Printing.Initialized">
            <summary>
            Occurs when document to print is initialized.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Printing.Finalized">
            <summary>
            Occurs when printing is done.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlExport">
            <summary>
            Provides methods to save editor content in xml format.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlExport.Write">
            <summary>
            Saves entire editor content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Editor.Dialogs.SearchDialog">
            <summary>
            Represents a dialog box that allows user to search for the text.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.Execute(QWhale.Editor.ISearch,System.Boolean,System.Boolean)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.Execute(QWhale.Editor.ISearch,System.Boolean,System.Boolean,System.Windows.Forms.IWin32Window)">
            <summary>
            Initializes and runs a search dialog box.
            </summary>
            <param name="search">Specifies <c>ISearch</c> interface owning the dialog.</param>
            <param name="isModal">Indicates whether search dialog should appear in modal state.</param>
            <param name="isReplace">Indicates whether search or replace dialog should be executed.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.DoneSearch(QWhale.Editor.ISearch)">
            <summary>
            Finishes search.
            </summary>
            <param name="search">Specifies <c>ISearch</c> to finish.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.Close">
            <summary>
            Closes the dialog
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.EnsureVisible(System.Drawing.Rectangle)">
            <summary>
            Ensures that the search dialog box is visible in specified rectangle, moving it if necessary.
            </summary>
            <param name="rect">The Rectangle to check.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.ToggleHiddenText">
            <summary>
            Toggles searching through hidden text on/off.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.ToggleMatchCase">
            <summary>
            Toggles case sensitive searching on/off.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.ToggleRegularExpressions">
            <summary>
            Toggles using regular expressions on/off.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.EnableRegularExpressions(System.Boolean)">
            <summary>
            When implemented by a class, enables/disables regular expressions.
            </summary>
            <param name="enable">Specifies whether regular expressions checkbox should b enabled</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.ShowRegularExpressions(System.Boolean)">
            <summary>
            When implemented by a class, shows/hide regular expressions.
            </summary>
            <param name="show">Specifies whether regular expressions checkbox should b visible</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.ToggleSearchUp">
            <summary>
            Toggles searching direction towards/backwards.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.TogglePromptOnReplace">
            <summary>
            Toggles prompting before replacing on/off.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.SearchDialog.ToggleWholeWord">
            <summary>
            Toggles searching for whole words on/off.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchDialog.Visible">
            <summary>
            Gets or sets a value indicating whether dialog box is visible.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchDialog.OwnerForm">
            <summary>
            Gets or sets form that owns this dialog.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.SearchDialog.SearchSettings">
            <summary>
            When implemented by a class, gets search settings associated with search dialog.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Dialogs.SearchDialog.HelpRequested">
            <summary>
            Occurs when user requests help for a control.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.DlgGoto">
            <summary>
            Represents dialog box that allows moving to a specific line index within Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgGoto.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgGoto</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgGoto.Execute(System.Object,System.Int32,System.Int32@)">
            <summary>
            Displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgGoto.Execute(System.Object,System.Int32,System.Int32@,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays a goto dialog.
            </summary>
            <param name="sender">Specifies object owning the dialog.</param>
            <param name="lines">Number of lines in the control's text content.</param>
            <param name="line">Index of the current line. When dialog executes receives index of the new line.</param>
            <param name="owner">Any object that implements IWin32Window that represents the top-level window that will own the modal dialog box.</param>
            <returns>DialogResult.OK if the user clicks OK in the dialog box; otherwise, DialogResult.Cancel.</returns>
        </member>
        <member name="F:QWhale.Editor.Dialogs.DlgGoto.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgGoto.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgGoto.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgGoto.QWhale#Editor#Dialogs#IGotoLineDialog#add_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents dialog box that allows moving to a specific line index within Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgGoto.QWhale#Editor#Dialogs#IGotoLineDialog#remove_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents dialog box that allows moving to a specific line index within Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgGoto.Line">
            <summary>
            Gets or sets index of the current line. When dialog executes receives index of the new line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgGoto.Lines">
            <summary>
            Sets number of lines in the control's text content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.PrintOptions">
            <summary>
            Defines appearance of the printed page when sending Editor's content to the printer.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.LineNumbers">
            <summary>
            Specifies that document should print with line numbers.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.PageNumbers">
            <summary>
            Specifies that document should print with page numbers.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.WordWrap">
            <summary>
            Specifies that document should print with wrapping lines if neccesary.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.PrintSelection">
            <summary>
            Specifies that document should print only selected part of the text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.UseColors">
            <summary>
            Specifies that document should print using colors.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.UseSyntax">
            <summary>
            Specifies that lexical analysis should be used for the document being printed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.UseHeader">
            <summary>
            Specifies that document should print with header.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.UseFooter">
            <summary>
            Specifies that document should print with footer.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PrintOptions.DisplayProgress">
            <summary>
            Specifies that progress of the printing operation should be displayed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CodeCompletionFlags">
            <summary>
            Defines behaviour of the code completion popup window.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.CloseOnEscape">
            <summary>
            Specifies that code completion popup window should be closed when user presses the ESC key.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.AcceptOnEnter">
            <summary>
            Specifies that code completion popup window should accept its result when user presses the ENTER key.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.CloseOnMouseLeave">
            <summary>
            Specifies that code completion popup window should be closed when mouse pointer leaves the control.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.CloseOnLostFocus">
            <summary>
            Specifies that code completion popup window should be closed when popup window lost focus.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.AcceptOnClick">
            <summary>
            Specifies that code completion popup window should accept its result when user clicks the popup.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.AcceptOnDblClick">
            <summary>
            Specifies that code completion popup window should accept its result when user double clicks the popup.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.FeetToScreen">
            <summary>
            Specifies that code completion popup window should be fitted to screen when popups.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.KeepActive">
            <summary>
            Indicates whether hint window remains visible until closed manually.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.AcceptOnDelimiter">
            <summary>
            Specifies that code completion popup window should accept its result when user presses delimiter key.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.AcceptOnTab">
            <summary>
            Specifies that code completion popup window should accept its result when user presses tab.
            </summary>
        </member>
        <member name="F:QWhale.Editor.CodeCompletion.CodeCompletionFlags.AcceptOnSpace">
            <summary>
            Specifies that code completion popup window should accept its result and suppress the space key when user presses space.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlWhiteSpaceInfo">
            <summary>
            Contains information about <c>IWhiteSpace</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlWhiteSpaceInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.#ctor(QWhale.Editor.IWhiteSpace)">
            <summary>
            Initializes a new instance of the <c>XmlWhiteSpaceInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IWhiteSpace</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.ShouldSerializeSymbolColor">
            <summary>
            Indicates whether the <c>SymbolColor</c> property should be persisted.
            </summary>
            <returns>True if <c>SymbolColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.ShouldSerializeTabSymbol">
            <summary>
            Indicates whether the <c>TabSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>TabSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.ShouldSerializeSpaceSymbol">
            <summary>
            Indicates whether the <c>SpaceSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>SpaceSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.ShouldSerializeLongSpaceSymbol">
            <summary>
            Indicates whether the <c>LongSpaceSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>LongSpaceSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.ShouldSerializeEolSymbol">
            <summary>
            Indicates whether the <c>EolSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>EolSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.ShouldSerializeEofSymbol">
            <summary>
            Indicates whether the <c>EofSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>EofSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.ShouldSerializeWordWrapSymbol">
            <summary>
            Indicates whether the <c>WordWrapSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>WordWrapSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.Visible">
            <summary>
            Stores <c>IWhiteSpace.Visible</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.TabSymbol">
            <summary>
            Stores <c>IWhiteSpace.TabSymbol</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.SpaceSymbol">
            <summary>
            Stores <c>IWhiteSpace.SpaceSymbol</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.LongSpaceSymbol">
            <summary>
            Stores <c>IWhiteSpace.LongSpaceSymbol</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.EolSymbol">
            <summary>
            Stores <c>IWhiteSpace.EolSymbol</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.EofSymbol">
            <summary>
            Stores <c>IWhiteSpace.EofSymbol</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.WordWrapSymbol">
            <summary>
            Stores <c>IWhiteSpace.WordWrapSymbol</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlWhiteSpaceInfo.SymbolColor">
            <summary>
            Stores <c>IWhiteSpace.SymbolColor</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlScrollingInfo">
            <summary>
            Contains information about <c>IScrolling</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlScrollingInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingInfo.#ctor(QWhale.Editor.IScrolling)">
            <summary>
            Initializes a new instance of the <c>XmlScrollingInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>Scrolling</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingInfo.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingInfo.ShouldSerializeDefaultHorzScrollSize">
            <summary>
            Indicates whether the <c>DefaultHorzScrollSize</c> property should be persisted.
            </summary>
            <returns>True if <c>DefaultHorzScrollSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingInfo.ShouldSerializeHorzButtons">
            <summary>
            Indicates whether the <c>HorzButtons</c> property should be persisted.
            </summary>
            <returns>True if <c>HorzButtons</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlScrollingInfo.ShouldSerializeVertButtons">
            <summary>
            Indicates whether the <c>VertButtons</c> property should be persisted.
            </summary>
            <returns>True if <c>VertButtons</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingInfo.WindowOriginX">
            <summary>
            Stores <c>IScrolling.WindowOriginX</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingInfo.WindowOriginY">
            <summary>
            Stores <c>IScrolling.WindowOriginY</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingInfo.ScrollBars">
            <summary>
            Stores <c>IScrolling.ScrollBars</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingInfo.DefaultHorzScrollSize">
            <summary>
            Stores <c>IScrolling.DefaultHorzScrollSize</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingInfo.Options">
            <summary>
            Stores <c>IScrolling.Options</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingInfo.HorzButtons">
            <summary>
            Stores <c>IScrolling.HorizontalButtons</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlScrollingInfo.VertButtons">
            <summary>
            Stores <c>IScrolling.VerticalButtons</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.WhiteSpace">
            <summary>
            Represents properties of "invisible" characters, such as spaces and tabs, in the control's text content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.#ctor">
            <summary>
            Initializes a new instance of the <c>WhiteSpace</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>WhiteSpace</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ShouldSerializeSymbolColor">
            <summary>
            Indicates whether the <c>SymbolColor</c> property should be persisted.
            </summary>
            <returns>True if <c>SymbolColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ShouldSerializeTabSymbol">
            <summary>
            Indicates whether the <c>TabSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>TabSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ShouldSerializeSpaceSymbol">
            <summary>
            Indicates whether the <c>SpaceSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>SpaceSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ShouldSerializeLongSpaceSymbol">
            <summary>
            Indicates whether the <c>LongSpaceSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>LongSpaceSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ShouldSerializeEolSymbol">
            <summary>
            Indicates whether the <c>EolSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>EolSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ShouldSerializeEofSymbol">
            <summary>
            Indicates whether the <c>EofSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>EofSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ShouldSerializeWordWrapSymbol">
            <summary>
            Indicates whether the <c>WordWrapSymbol</c> property should be persisted.
            </summary>
            <returns>True if <c>WordWrapSymbol</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.BeginUpdate">
            <summary>
            Prevents WhiteSpace updating until calling <c>WhiteSpace.EndUpdate</c> method.
            </summary>
            <returns>Number of WhiteSpace updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.EndUpdate">
            <summary>
            Re-enables page updating, that was turn of by calling <c>WhiteSpace.BeginUpdate</c> method.
            </summary>
            <returns>Number of WhiteSpace updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.DisableUpdate">
            <summary>
            Prevents WhiteSpace updating until calling <c>WhiteSpace.EndUpdate</c> method.
            </summary>
            <returns>Number of page updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.EnableUpdate">
            <summary>
            Re-enables WhiteSpace updating, that was turn of by calling <c>Margin.BeginUpdate</c> method.
            </summary>
            <returns>Number of Margin updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.Update">
            <summary>
            Invalidates editor if needed.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.Assign(QWhale.Editor.IWhiteSpace)">
            <summary>
            Copies the contents from another <c>IWhiteSpace</c> object.
            </summary>
            <param name="source">Specifies <c>IWhiteSpace</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ResetVisible">
            <summary>
            Resets the <c>Visible</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ResetTabSymbol">
            <summary>
            Resets the <c>TabSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ResetSpaceSymbol">
            <summary>
            Resets the <c>SpaceSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ResetLongSpaceSymbol">
            <summary>
            Resets the <c>LongSpaceSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ResetEolSymbol">
            <summary>
            Resets the <c>EolSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ResetEofSymbol">
            <summary>
            Resets the <c>EofSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ResetWordWrapSymbol">
            <summary>
            Resets the <c>WordWrapSymbol</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.WhiteSpace.ResetSymbolColor">
            <summary>
            Resets the <c>SymbolColor</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.Visible">
            <summary>
            Gets or sets a value indicating whether white space symbols are visible in the contol's text content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.TabSymbol">
            <summary>
            Gets or sets character that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.SpaceSymbol">
            <summary>
            Gets or sets character that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.LongSpaceSymbol">
            <summary>
            Gets or sets character that introduces special symbol to paint instead of the long space character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.EolSymbol">
            <summary>
            Gets or sets character that specifies end of line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.EofSymbol">
            <summary>
            Gets or sets character that specifies end of file.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.WordWrapSymbol">
            <summary>
            Gets or sets character that specifies wrapped line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.SpaceString">
            <summary>
            Represents one character string that introduces special symbol to paint instead of the space character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.LongSpaceString">
            <summary>
            Represents one character string that introduces special symbol to paint instead of the long space character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.TabString">
            <summary>
            Represents one character string that introduces special symbol to paint instead of the tab character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.EolString">
            <summary>
            Represents one character string that specifies end of line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.EofString">
            <summary>
            Represents one character string that specifies end of file.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.WordWrapString">
            <summary>
            Represents one character string that specifies wrapped file.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.SymbolColor">
            <summary>
            Gets or sets color used to paint special symbols.
            </summary>
        </member>
        <member name="P:QWhale.Editor.WhiteSpace.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>WhiteSpace</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.ScrollingButtons">
            <summary>
            Represetns collection of <c>IScrollingButton</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ScrollingButtons.#ctor">
            <summary>
            Initializes a new instance of the <c>ScrollingButtons</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ScrollingButtons.#ctor(QWhale.Editor.IScrolling,QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>ScrollingButtons</c> class with specified owner.
            </summary>
            <param name="scrolling"><c>IScrolling</c> that owns this new instance.</param>
            <param name="owner"><c>ISyntaxEdit</c> container of scrolling.</param>
        </member>
        <member name="M:QWhale.Editor.ScrollingButtons.Assign(QWhale.Editor.IScrollingButtons)">
            <summary>
            Copies the contents of another <c>IScrollingButtons</c> object.
            </summary>
            <param name="source">Specifies <c>IScrollingButtons</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.ScrollingButtons.Clear">
            <summary>
            Removes all buttons from the button collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.ScrollingButtons.Add(QWhale.Editor.IScrollingButton)">
            <summary>
            Adds a new button to the collection.
            </summary>
            <param name="item">Button to add.</param>
        </member>
        <member name="M:QWhale.Editor.ScrollingButtons.AddScrollingButton">
            <summary>
            Adds a new button to the collection.
            </summary>
            <returns>Index of the added button.</returns>
        </member>
        <member name="M:QWhale.Editor.ScrollingButtons.AddScrollingButton(System.String,System.String,System.Int32)">
            <summary>
            Adds a new button with specified properties to the collection.
            </summary>
            <param name="name">Specifies button name.</param>
            <param name="description">Specifies button description.</param>
            <param name="imageIndex">Specifies index of button image.</param>
            <returns>Index of the added button.</returns>
        </member>
        <member name="T:QWhale.Editor.DrawInfo">
            <summary>
            Contains full information about text fragment to be drawn.
            </summary>
        </member>
        <member name="T:QWhale.Editor.IDrawInfo">
            <summary>
            Contains full information about text fragment to be drawn.
            </summary>
        </member>
        <member name="M:QWhale.Editor.IDrawInfo.Reset">
            <summary>
            When implemented by a class, resets <c>DrawInfo</c> members to their default values.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDrawInfo.Text">
            <summary>
            When implemented by a class, represents a string to draw.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDrawInfo.Selection">
            <summary>
            When implemented by a class, specifies whether text fragment is selected.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDrawInfo.Style">
            <summary>
            When implemented by a class, represents an index of lexical style used to draw this text fragment.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDrawInfo.TextStyle">
            <summary>
            When implemented by a class, represents a <c>TextStyle</c> information for this text fragment.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDrawInfo.Char">
            <summary>
            When implemented by a class, specifies a starting character of the text fragment.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDrawInfo.Line">
            <summary>
            When implemented by a class, specifies an index of line in the text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDrawInfo.GutterImage">
            <summary>
            When implemented by a class, specifies an index of the image drawn on the gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.IDrawInfo.Page">
            <summary>
            When implemented by a class, specifies index of page containing the text to be drawn.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DrawInfo.Reset">
            <summary>
            Resets <c>DrawInfo</c> members to their default values.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DrawInfo.Text">
            <summary>
            String to draw.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DrawInfo.Selection">
            <summary>
            Specifies whether text fragment is selected.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DrawInfo.Style">
            <summary>
            Represents index of lexical style used to draw this text fragment.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DrawInfo.TextStyle">
            <summary>
            Contains <c>TextStyle</c> information for this text fragment.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DrawInfo.Char">
            <summary>
            The starting character of the text fragment.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DrawInfo.Line">
            <summary>
            The index of line in the text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DrawInfo.GutterImage">
            <summary>
            Specifies index of the image drawn on the gutter.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DrawInfo.Page">
            <summary>
            Specifies index of page containing the text to be drawn.
            </summary>
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.CodeCompletionBox">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionBox</c> class with specified owner.
            </summary>
            <param name="owner">Specifies control owning this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.ResetContent">
            <summary>
            Updates <c>CodeCompletionBox</c> content from its <c>Provider</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.ResetSizeable">
            <summary>
            Resets the <c>Sizeable</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.ClearColumns">
            <summary>
            Removes all columns from the <c>CodeCompletionBox</c> column collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.AddColumn">
            <summary>
            Adds a new column to the <c>CodeCompletionBox</c> column collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.InsertColumn(System.Int32)">
            <summary>
            Inserts a new column to the specified position in the column collection.
            </summary>
            <param name="index">Index of the column in the collection.</param>
            <returns>New inserted column.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.RemoveColumnAt(System.Int32)">
            <summary>
            Removes the column at the specified index of the column collection.
            </summary>
            <param name="index">Specifies zero-based index of the column to remove.</param>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.ResetDropDownCount">
            <summary>
            Resets the <c>DropDownCount</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.ContainsControl(System.Windows.Forms.Control)">
            <summary>
            Retrieves a value indicating whether the popup window contains the specified control.
            </summary>
            <param name="control">The Control to evaluate.</param>
            <returns>True if the popup window contains the specified control; otherwise, false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.IsFocused">
            <summary>
            Indicates whether <c>CodeCompletionEdit</c> control has an input focus.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.PerformSearch">
            <summary>
            Performes searching operation.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Editor#CodeCompletion#ICodeCompletionWindow#add_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Editor#CodeCompletion#ICodeCompletionWindow#remove_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_CanFocus">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Visible">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Visible(System.Boolean)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Location">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Location(System.Drawing.Point)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Left">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Left(System.Int32)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Top">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Top(System.Int32)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Width">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Width(System.Int32)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Height">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Height(System.Int32)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Bounds(System.Drawing.Rectangle)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_ClientRectangle">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Parent">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Parent(System.Windows.Forms.Control)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Enabled">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#set_Enabled(System.Boolean)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_IsHandleCreated">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#get_Created">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#add_Click(System.EventHandler)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.CodeCompletionBox.QWhale#Common#IControl#remove_Click(System.EventHandler)">
            <summary>
            Represents class that impements <c>ICodeCompletionBox</c> interface. This object is used to display a popup window that can contain Code Completion information presented in the form of list.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.ShowTabs">
            <summary>
            Gets or sets boolean value that indicates whether codecompletion window should display additional tabs
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.Columns">
            <summary>
            Represents collection of <c>ICodeCompletionColumn</c> objects displayed by Code Completion ListBox.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.CompletionEdit">
            <summary>
            Represents CodeCompletionEdit object used to display code snippets.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.CompletionHint">
            <summary>
            Represents CodeCompletion hint object used to display hints next to completion box.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.DropDownCount">
            <summary>
            Gets or sets a value that specifies maximum visible amount of the ListBox items within the control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.Filtered">
            <summary>
            Gets or sets a boolean value that indicates whether <c>CodeCompletionBox</c> should filter its content using <c>Filter</c> property.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.Filter"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.Filter">
            <summary>
            Gets or sets filter string to filter <c>CodeCompletionBox</c> content.
            <seealso cref="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.Filtered"/>
            </summary>
        </member>
        <member name="P:QWhale.Editor.CodeCompletion.CodeCompletionBox.Sorted">
            <summary>
            Gets or sets a value indicating whether the items in the <c>CodeCompletionBox</c> are sorted alphabetically.
            </summary>
        </member>
        <member name="E:QWhale.Editor.CodeCompletion.CodeCompletionBox.SelectionChanged">
            <summary>
            Occurs when index specifying the currently selected item is changed.
            </summary>
            <remarks>The event handler receives an argument of type <c>EventArgs</c> containing data related to this event.</remarks>
        </member>
        <member name="T:QWhale.Editor.EditHyperText">
            <summary>
            Represetns properties and methods to operate with hypertext within Edit control's content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.#ctor">
            <summary>
            Initializes a new instance of the <c>HyperTextEx</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>HyperTextEx</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.ShouldSerializeUrlColor">
            <summary>
            Indicates whether the <c>UrlColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UrlColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.ShouldSerializeUrlStyle">
            <summary>
            Indicates whether the <c>UrlStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>UrlStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.Assign(QWhale.Editor.IEditHyperText)">
            <summary>
            Copies the contents from another <c>IEditHyperText</c> object.
            </summary>
            <param name="source">Specifies <c>IEditHyperText</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.UrlJump(System.String)">
            <summary>
            Tries to launch default browser to process specified url.
            </summary>
            <param name="text">Specifies name of a document or application file to jump to.</param>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.ResetUrlStyle">
            <summary>
            Resets the <c>UrlStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.ResetUrlColor">
            <summary>
            Resets the <c>UrlColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.ResetShowHints">
            <summary>
            Resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.IsUrlAtPoint(System.Int32,System.Int32,System.String@,System.Boolean)">
            <summary>
            Indicates whether text at specified position contains a hyperlink.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <param name="url">Receives text representation of hyperlink under text point.</param>
            <param name="needUrl">Specifies whether method should return hypertext.</param>
            <returns>True if text at given position is hyperlink; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.IsHyperText(System.String)">
            <summary>
            Indicates whether given text is hypertext.
            </summary>
            <param name="text">Specifies string to check.</param>
            <returns>True if given text is hypertext; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.ResetHighlightHyperText">
            <summary>
            Resets <c>HighlightHyperText</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.IsUrlAtPoint(System.Int32,System.Int32)">
            <summary>
            Indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.IsUrlAtPoint(System.Int32,System.Int32,System.String@)">
            <summary>
            Indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check.</param>
            <param name="y">The Y-constituent of Point value to check.</param>
            <param name="url">Receives text representation of url under text point.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditHyperText.IsUrlAtTextPoint(System.Int32,System.Int32,System.String@)">
            <summary>
            Indicates whether text at specified position is hypertext.
            </summary>
            <param name="x">The X-constituent of Point value to check in text coordinates.</param>
            <param name="y">The Y-constituent of Point value to check in text coordinates.</param>
            <param name="url">Receives text representation of url under text point.</param>
            <returns>True if text at given position is hypertext; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.EditHyperText.ShowHints">
            <summary>
            Gets or sets value indicating whether default hint for hypertext section needs displaying when user moves mouse over the hypertext.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditHyperText.UrlStyle">
            <summary>
            Gets or sets font style of highlighted urls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditHyperText.UrlColor">
            <summary>
            Gets or sets a value that represents color of highlighted urls.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditHyperText.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>HyperTextEx</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Editor.EditHyperText.JumpToUrl">
            <summary>
            Occurs when user attempts to jump to url by clicking on it in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditHyperText.UrlTable">
            <summary>
            Represents hash table containing hyper-text characters
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditHyperText.HighlightHyperText">
            <summary>
            Gets or sets a value indicating whether hypertext urls in the text should be highlighted.
            </summary>
        </member>
        <member name="E:QWhale.Editor.EditHyperText.HyperText">
            <summary>
            Occurs when a control needs checking whether some string represents hypertext.
            </summary>
        </member>
        <member name="T:QWhale.Editor.DisplayStrings">
            <summary>
            Represents a collection of visible strings in the text Edit control.
            </summary>
            <remarks>Use <c>SyntaxStrings</c> to access "real" lines stored in the <c>TextSource</c>. DisplayStrings provides an access to lines as they are displayed in the Edit control, assuming tabulation, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.#ctor(QWhale.Editor.ISyntaxEdit,QWhale.Editor.TextSource.ITextStrings)">
            <summary>
            Initializes a new instance of the <c>DisplayStrings</c> class with specified parameters.
            </summary>
            <param name="owner">Specifies owner of this new instance.</param>
            <param name="strings">Specifies collection of underlying lines.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IndexOf(System.String)">
            <summary>
            Returns the index of the first occurrence of given string in the string collection.
            </summary>
            <param name="item">The string to locate in string collection.</param>
            <returns>The index of the first occurrence of string within the string collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Insert(System.Int32,System.String)">
            <summary>
            Inserts value at the specified position.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <param name="item">Specifies string to insert.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.RemoveAt(System.Int32)">
            <summary>
            Removes string item at specified position.
            </summary>
            <param name="index">Specifies index of item in the string collection to remove.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Add(System.String)">
            <summary>
            Adds a new item to the end of string collection.
            </summary>
            <param name="item">String to be added to the end of the collection.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Clear">
            <summary>
            Removes all items from string collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Contains(System.String)">
            <summary>
            Indicates whether string collection contains specified string.
            </summary>
            <param name="item">string to check.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire string collection to a another array, starting at the specified index of the target array.
            </summary>
            <param name="array">The Array that is the destination of the elements copied from string collection.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Remove(System.String)">
            <summary>
            Removes the first occurrence of given string from the string collection.
            </summary>
            <param name="item">>String to remove.</param>
            <returns>True if item was successfully removed from the ICollection; otherwise, false. This method also returns false if item is not found in the original ICollection.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsPointVisible(System.Drawing.Point)">
            <summary>
            Indicates whether given position is in visible area of the editor control.
            </summary>
            <param name="position">Position to check.</param>
            <returns>True if position is invisible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsPointCollapsed(System.Drawing.Point,QWhale.Common.IRange@)">
            <summary>
            Indicates whether given position is in visible area of the editor control.
            </summary>
            <param name="position">Position to check.</param>
            <param name="range">Receives range contains the point. Null if specified position is visible.</param>
            <returns>True if position is invisible due to outlining; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Responds on deleting some block of lines within the editor control.
            </summary>
            <param name="rect">Rectangle area of block being deleted.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.UpdateNeeded">
            <summary>
            Forces <c>IDisplayStrings</c> to recalculate its content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.PositionChanged(QWhale.Editor.TextSource.UpdateReason,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Responds on chaning position in the editor.
            </summary>
            <param name="reason">Reason of changing position.</param>
            <param name="x">X-coordinate of current position.</param>
            <param name="y">Y-coordinate of current position.</param>
            <param name="deltaX">Horizontal offset.</param>
            <param name="deltaY">Vertical offset.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.PointToDisplayPoint(System.Int32,System.Int32)">
            <summary>
            Converts the specified text coordinates into display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <returns>Display coordinates of the specified point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.PointToDisplayPoint(System.Drawing.Point)">
            <summary>
            Converts the specified text coordinates into display coordinates.
            </summary>
            <param name="position">The Point value that specifies text coordinates to convert.</param>
            <returns>Display coordinates of the specified point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.PointToDisplayPoint(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Converts the specified text coordinates to display coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies the text coordinates to be converted.</param>
            <param name="lineEnd">Boolean value indicating if the text position can be set to the end of the wrapped line.</param>
            <returns>Display coordinates of the specified text point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.DisplayPointToPoint(System.Int32,System.Int32)">
            <summary>
            Converts the specified display coordinates to text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.DisplayPointToPoint(System.Drawing.Point)">
            <summary>
            Converts the specified display coordinates to text coordinates.
            </summary>
            <param name="position">The Point value that specifies the display coordinates to be converted.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.DisplayPointToPoint(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="lineEnd">Receives boolean value indicating if the caret is at the line end of the wrapped line.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.DisplayPointToPoint(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Converts the specified display coordinates to the text coordinates.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="y">The Y-constituent of the Point value that specifies display coordinates to be converted.</param>
            <param name="wrapEnd">Reserved for internal use.</param>
            <param name="rangeStart">Reserved for internal use.</param>
            <param name="tabEnd">Reserved for internal use.</param>
            <returns>Text coordinates of specified display point.</returns>
            <remarks>Display coordinate represents point in Edit control, it may be different from text coordinate due to tabulations, wordwrap and outlining.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetColorData(System.Int32)">
            <summary>
            Returns color information related to the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            Returns lexical style related to the specified position.
            </summary>
            <param name="position">The Point value that specifies position to receive lexical style.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetStringAndColorData(System.Int32,System.String@,System.Int16[]@)">
            <summary>
            Returns text and color information related to the the specified line.
            </summary>
            <param name="index">The index of line in strings array.</param>
            <param name="text">Returns text of the given line.</param>
            <param name="data">Returns color information of specified line.</param>
            <returns>Corresponding index within <c>ISyntaxStrings</c>collection.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ResetTabStops">
            <summary>
            Resets the <c>TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ResetUseSpaces">
            <summary>
            Resets the <c>UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetTabString(System.String)">
            <summary>
            Converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <returns>Tabbed string.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetTabString(System.String,QWhale.Syntax.ITextUndoList)">
            <summary>
            Converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs)</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the next TabStop at the specified position.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetPrevTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the previous TabStop.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetIndentString(System.Int32,System.Int32)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="pos">Specifies start position of the string.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetIndentString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="p">Specifies start position of the string.</param>
            <param name="useSpaces">Specifies that spaces should be used instead of tab characters.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.TabPosToPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as untabbed position.
            </summary>
            <param name="s">Specifies string to convert.</param>
            <param name="pos">Specifies index of character which position should be converted.</param>
            <returns>Untabbed position.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.PosToTabPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Positon of the character in the string.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.PosToTabPos(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Positon of the character in the string.</param>
            <param name="tabEnd">reserwed for interna use.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.UpdateWordWrap">
            <summary>
            Re-wraps all lines in <c>DisplayStrings</c> collection.
            </summary>
            <returns>True if succeed otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.UpdateWordWrap(System.Int32,System.Int32)">
            <summary>
            Updates wrapped lines within specific scope in <c>DisplayStrings</c> object.
            </summary>
            <param name="first">Specifies first line to wrap.</param>
            <param name="last">Specifies first line to wrap.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetWrapMargin">
            <summary>
            Returns position of the wrap margin.
            </summary>
            <returns>Return width of client rectangle or position of margin depending of <c>WrapAtMargin</c> property.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ResetWordWrap">
            <summary>
            Resets the <c>WordWrap</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ResetWrapAtMargin">
            <summary>
            Resets the <c>WrapAtMargin</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Find(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            Searches for given text within the <c>DisplayStrings</c> contents.
            </summary>
            <param name="s">The text to locate in the strings.</param>
            <param name="options">Search parameters.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text.</param>
            <param name="match">Receives match if regular expression search successfull</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsDelimiter(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of string is word delimiter character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the string.</param>
            <returns>True if specified character is delimither character; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsWhitespace(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is a whitespace character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is whitespace; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is word delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimither character; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos"> The index of character within the string.</param>
            <param name="left">Represents integer variable to receive start position of the word.</param>
            <param name="right">Represents integer variable to receive end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Collections.Hashtable)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Represents integer variable to receive start position of the word.</param>
            <param name="right">Represents integer variable to receive end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetTextAt(System.Int32,System.Int32)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="pos">Specifies index of character in the text string.</param>
            <param name="line">Specifies index of visible string.</param>
            <remarks>If there is no word under specified position, method returns empty string.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetTextAt(System.Drawing.Point)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <remarks>If there is no word under specified position, method returns empty string.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ResetDelimiters">
            <summary>
            Resets the <c>Delimiters</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, If <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Outline(System.Int32,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            This method creates an outlining section based on specific scope with the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            This method creates an outlining section based on specific scope.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true ; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            This method creates an outlining section based on specific scope with specific level of outline nesting and specific text substituting collapsed section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text displayed when outline section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            This method creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text displayed when outlined section is collapsed.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
            <remarks>This method is applicable only when property <c>AllowOutlining</c> is true.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.UnOutline(System.Drawing.Point)">
            <summary>
            This method removes outlined section at the specific position.
            </summary>
            <param name="position">Specifies position in text coordinates.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.UnOutline(System.Int32)">
            <summary>
            This method removes all outlined section containing the given line.
            </summary>
            <param name="index">Specifies line in text coordinates.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.UnOutline">
            <summary>
            This method removes all outlined section within the <c>DisplayStrings</c> collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetOutlineRange(System.Drawing.Point)">
            <summary>
            Returns outline section representing text substituting outline section and level of outline nesting at the specific position.
            <seealso cref="T:QWhale.Syntax.IOutlineRange"/>
            </summary>
            <param name="position">Specifies position in text coordinates.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetOutlineRange(System.Int32)">
            <summary>
            Returns outline section, which represents text substistring outline section and level of outline nesting at the specific line.
            <seealso cref="T:QWhale.Syntax.IOutlineRange"/>
            </summary>
            <param name="index">Index of the line in text coordinates.</param>
            <returns><c>IOutlineRange</c> object that represents outline section, if <c>AllowOutlining</c> property is true; otherwise return null.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsExpanded(System.Int32)">
            <summary>
            Indicates whether the outlined section at the specified line is expanded.
            <seealso cref="M:QWhale.Editor.DisplayStrings.IsCollapsed(System.Int32)"/>
            </summary>
            <param name="index">The index of the line.</param>
            <returns>True if outlined section is expanded; otherwise false.</returns>
            <remarks>If there is no outline section at the specified line text, method return false.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsCollapsed(System.Int32)">
            <summary>
            Indicates whether the outline section at the specified line is collapsed.
            <seealso cref="M:QWhale.Editor.DisplayStrings.IsExpanded(System.Int32)"/>
            </summary>
            <param name="index">The index of the line.</param>
            <returns>True if outlined section is collapsed; otherwise false.</returns>
            <remarks>If there is no outline section at the specified line text, method return false.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsVisible(System.Drawing.Point)">
            <summary>
            Indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="position">The Point value that specifies position in text coordinates.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.IsVisible(System.Int32)">
            <summary>
            Indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies index of the line in text coordinates.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Collapse(System.Int32)">
            <summary>
            Collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Expand(System.Int32)">
            <summary>
            Expandes outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.EnsureExpanded(System.Int32)">
            <summary>
            Makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies index of the line in text coordinates.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.EnsureExpanded(System.Drawing.Point)">
            <summary>
            Makes all outline sections containing specified position expanded.
            </summary>
            <param name="position">The Point value that specifies position in text coordinates.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.FullExpand">
            <summary>
            Expands all outline sections objects within <c>DisplayStrings</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.FullExpand(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.FullCollapse">
            <summary>
            Collapses all outline sections objects within <c>DisplayStrings</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.FullCollapse(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ToggleOutlining">
            <summary>
            Toggles expanded state for current outline sections.
            </summary>
            <remarks>If there is no outline section at the current point, method does nothing, otherwize it changes collapsed state of the section to the expanded and vice versa.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ToggleOutlining(System.Collections.Generic.IList{QWhale.Common.IRange},QWhale.Syntax.IOutlineRange)">
            <summary>
            Toggles expanded state for given <c>IOutlineRange</c> collection.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to toggle.</param>
            <param name="range"><c>IOutlineRange</c> object representing current outline section. The method expands or collapses ranges depending on collapsed state of the Range</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.CollapseToDefinitions">
            <summary>
            Collapses and expandes some outline section to get a quick overall view of the content.
            </summary>
            <remarks>Use this command to ensure that only more important for your outline sections starts to be expanded. For Example owner Edit control may expand only bodies of namespaces and classes and collapse all other sections.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetOutlineHint(QWhale.Syntax.IOutlineRange)">
            <summary>
            Returns the string that appears in the hint window when mouse pointer over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object hodling the hint.</param>
            <returns>Hint string for given <c>IOutlineRange</c> object.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Int32)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="index">Specifies line in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific potsition.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="position">Specifies position in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills list specified by Ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Start position in text coordinates.</param>
            <param name="endPoint">End position in text coordinates.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Fills list specified by Ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Count of outline sections in Ranges.</returns>
            <remarks>If <c>AllowOutlining</c> property is false the method clears the Ranges collection and returns zero.</remarks>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.CanExpand(System.Int32)">
            <summary>
            Returns boolean value indicating that oultine section at given line can be expanded.
            </summary>
            <param name="line"></param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.CanCollapse(System.Int32)">
            <summary>
            Returns boolean value indicating that oultine section at given line can be collapsed.
            </summary>
            <param name="line"></param>
            <returns>True if section can be collapsed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Boolean)">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges.
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ResetAllowOutlining">
            <summary>
            Resets the <c>AllowOutlining</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.ResetOutlineOptions">
            <summary>
            Resets the <c>OutlineOptions</c> to its default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveFile(System.String)">
            <summary>
            Saves content to the specific file in the text format.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves content to the specific file in the specific format.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            Saves content to the specific file in the specific format with specific encoding.
            </summary>
            <param name="fileName">Name of the file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves content to the specific stream in the text format.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveStream(System.IO.TextWriter,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveStream(System.IO.Stream)">
            <summary>
            Saves content to the specific stream in the text format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves content to the specific stream in the specific format.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            Saves content to the specific stream in the specific format and specific encoding.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadFile(System.String)">
            <summary>
            Loads the contents of a text file into string collection.
            </summary>
            <param name="fileName">Represents name of file on disk.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of a file into string collection.
            </summary>
            <param name="fileName">Represents name of file on disk.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of a stream into string collection.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadStream(System.IO.TextReader,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
            <param name="importer">Specifies importer to load content.</param>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of a stream into string collection.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads content from the given file with specified importer.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.BeginUpdate">
            <summary>
            Prevents outline list updating until calling <c>ICollapsable.EndUpdate</c> method.
            </summary>
            <returns>Number of header updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.EndUpdate">
            <summary>
            Re-enables outline list updating, that was turn of by calling <c>ICollapsable.BeginUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Update">
            <summary>
            When implemented by a class, updates an object state.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.Notify(QWhale.Editor.TextSource.NotifyState,System.Int32,System.Int32)">
            <summary>
            Notifies editor about updating <c>IDisplayStrings</c> state.
            </summary>
            <param name="state">Changes reason.</param>
            <param name="first">First changed line.</param>
            <param name="last">Last changed line.</param>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual string stored in the collection.
            </summary>
            <summary>
            Provides an indexed access to individual strings stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.DisplayCount">
            <summary>
            Returns number of visible lines.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.LineEnd">
            <summary>
            When implemented by a class, gets or sets boolean value indicating if the text position can be set to the end of the wrapped line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.Loaded">
            <summary>
            Gets or sets boolean value indicating if the display strings was fully formatted.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.Lines">
            <summary>
            Gets or sets the collection of underlying "real" collection of text lines.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.MaxLineWidth">
            <summary>
            Gets width of the largest line in the <c>DisplayString</c> object.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.Count">
            <summary>
            Returns number of visible lines.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.Text">
            <summary>
            Gets or sets the strings in the <c>IDisplayStrings</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>DisplayStrings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.TabStops">
            <summary>
            Gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
            <remarks>If each successive tab stop is not larger than its predecessor, you will receive an error.</remarks>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.UseSpaces">
            <summary>
            Gets or sets a value indicating whether indent operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.WordWrap">
            <summary>
            Gets or sets a value indicating whether a <c>DisplayStrings</c> object automatically wraps words to the beginning of the next line when necessary.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.WrapAtMargin">
            <summary>
            Gets or sets a value indicating whether a <c>DisplayStrings</c> object automatically wraps words at margin position.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.WrapMargin">
            <summary>
            Gets position of the wrap margin.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.Delimiters">
            <summary>
            Gets or sets an array of chars used to separate words in a text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.DelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.CollapsedCount">
            <summary>
            Returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUndoUpdate</c> and <c>EndUndoUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining is enabled.
            </summary>
            <remarks>Setting this property to false causes removing all outline sections.</remarks>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.OutlineOptions">
            <summary>
            Gets or sets options representing outlining appearance and behaviour.
            <seealso cref="T:QWhale.Editor.OutlineOptions"/>
            </summary>
        </member>
        <member name="E:QWhale.Editor.DisplayStrings.Expanding">
            <summary>
            Occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="E:QWhale.Editor.DisplayStrings.Collapsing">
            <summary>
            Occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.DisplayEnumerator.MoveNext">
            <summary>
            Moves to the next line in the string collection.
            </summary>
            <returns>false if current line is the last line; otherwise true.</returns>
        </member>
        <member name="M:QWhale.Editor.DisplayStrings.DisplayEnumerator.Reset">
            <summary>
            Moves to the first line within the string collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.DisplayStrings.DisplayEnumerator.Current">
            <summary>
            Gets an object that represents current string.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Dialogs.DlgPrintOptions">
            <summary>
            Represents dialog box to manipulate print settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgPrintOptions.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgPrintOptions</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgPrintOptions.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgPrintOptions.ResetAllowedOptions">
            <summary>
            Resets the <c>AllowedOptions</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgPrintOptions.QWhale#Editor#Dialogs#IPrintOptionsDialog#ShowDialog">
            <summary>
            Represents dialog box to manipulate print settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgPrintOptions.QWhale#Editor#Dialogs#IPrintOptionsDialog#ShowDialog(System.Windows.Forms.IWin32Window)">
            <summary>
            Represents dialog box to manipulate print settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgPrintOptions.QWhale#Editor#Dialogs#IPrintOptionsDialog#add_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents dialog box to manipulate print settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Dialogs.DlgPrintOptions.QWhale#Editor#Dialogs#IPrintOptionsDialog#remove_HelpRequested(System.Windows.Forms.HelpEventHandler)">
            <summary>
            Represents dialog box to manipulate print settings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgPrintOptions.Options">
            <summary>
            Gets or sets a collection of flags determining print behavior.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgPrintOptions.AllowedOptions">
            <summary>
            Gets or sets print options that can be changed by user.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Dialogs.DlgPrintOptions.FileName">
            <summary>
            Gets or sets name of file to be printed.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.UndoOptions">
            <summary>
            Defines undo/redo behaviour.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOptions.AllowUndo">
            <summary>
            Allows undo/redo operations.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOptions.GroupUndo">
            <summary>
            Specifies that last editing command should be undone together with any subsequent editing commands of the same type.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOptions.UndoNavigations">
            <summary>
            Specifies that navigate operations can be undone.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOptions.UndoAfterSave">
            <summary>
            Allows undo operation after a save.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOptions.UngroupBreaks">
            <summary>
            Specifies whether single break and unbreak operation should be undone rather than subsequent operations.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.UndoFlags">
            <summary>
            Defines additional flags for undo/redo operation.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoFlags.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoFlags.FirstTime">
            <summary>
            Indicates first undo operation in the undo sequences.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoFlags.Saved">
            <summary>
            Indicates that undoable operation occured prior to saving editor's content
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.UpdateReason">
            <summary>
            Defines reason of updating control's text content.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UpdateReason.Navigate">
            <summary>
            Specifies that current position in the control's text content changed.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UpdateReason.Insert">
            <summary>
            Specifies that some text inserted.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UpdateReason.Delete">
            <summary>
            Specifies that some text deleted.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UpdateReason.Break">
            <summary>
            Specifies that text line was broken into two lines.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UpdateReason.UnBreak">
            <summary>
            Specifies that two lines concatenated.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UpdateReason.DeleteBlock">
            <summary>
            Specifies that some block of text deleted.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UpdateReason.InsertBlock">
            <summary>
            Specifies that some block of text inserted.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UpdateReason.Other">
            <summary>
            Specifies another reason of the control's text content updating.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.UndoOperation">
            <summary>
            Defines a type of the operation to undo.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.Insert">
            <summary>
            Specifies operation that inserts some text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.Delete">
            <summary>
            Specifies operation that deletes some text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.Break">
            <summary>
            Specifies operation that breaks text line into two lines.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.UnBreak">
            <summary>
            Specifies operation that concatenates two text lines.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.InsertBlock">
            <summary>
            Specifies operation that inserts some block of text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.DeleteBlock">
            <summary>
            Specifies operation that deletes some block of text.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.Navigate">
            <summary>
            Specifies operation that navigates within text content.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.NavigateEx">
            <summary>
            Specifies operation that navigates within text content. (this operation is always undone, regardless of UndoOptions);
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.UndoBlock">
            <summary>
            Specifies that subsequent undo operations will be undone at once.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.UndoOperation.Unknown">
            <summary>
            Specifies unknown operation.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.BlockDeletingEventArgs">
            <summary>
            Provides data for the event that occurs when some block of lines within the <c>ITextSource</c> is deleted.
            </summary>
        </member>
        <member name="F:QWhale.Editor.TextSource.BlockDeletingEventArgs.Rect">
            <summary>
            Represents the rectangle area of block being deleted by <c>ITextSource</c>.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.BlockDeletingEventArgs.#ctor(System.Drawing.Rectangle)">
            <summary>
            Initializes a new instance of the <c>BlockDeletingEventArgs</c> class with specified parameters.
            </summary>
            <param name="rect">Rectangulare are of the text being deleted.</param>
        </member>
        <member name="T:QWhale.Editor.EditRulers">
            <summary>
            Specifies appearance of Edit control rulers.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.EditRulers.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.EditRulers.Horizonal">
            <summary>
            Display a horizontal ruler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.EditRulers.Vertical">
            <summary>
            Display a vertical ruler.
            </summary>
        </member>
        <member name="T:QWhale.Editor.PageType">
            <summary>
            Specifies the way of viewing Edit control's content.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PageType.Normal">
            <summary>
            Specifies normal view.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PageType.PageBreaks">
            <summary>
            Specifies dotted line to be displayed between separate pages.
            </summary>
        </member>
        <member name="F:QWhale.Editor.PageType.PageLayout">
            <summary>
            Specifies page layout mode, allowing to see how text will be positioned on the printed page.
            </summary>
        </member>
        <member name="T:QWhale.Editor.DrawHeaderEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.DrawHeader</c>, <c>EditPages.DrawHeader</c> or <c>CodeCompletionHint.CustomDraw</c> events.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>DrawHeaderEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlPageHeaderInfo">
            <summary>
            Contains inforamtion aboud <c>IEditPageHeader</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlPageHeaderInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.#ctor(QWhale.Editor.IEditPageHeader)">
            <summary>
            Initializes a new instance of the <c>XmlPageHeaderInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IEditPageHeader</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.ShouldSerializeFontColor">
            <summary>
            Indicates whether the <c>FontColor</c> property should be persisted.
            </summary>
            <returns>True if <c>FontColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.ShouldSerializeOffset">
            <summary>
            Indicates whether the <c>Offset</c> property should be persisted.
            </summary>
            <returns>True if <c>Offset</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.ShouldSerializeFontName">
            <summary>
            Indicates whether the <c>FontName</c> property should be persisted.
            </summary>
            <returns>True if <c>FontName</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.ShouldSerializeFontSize">
            <summary>
            Indicates whether the <c>FontSize</c> property should be persisted.
            </summary>
            <returns>True if <c>FontSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlPageHeaderInfo.ShouldSerializeFontStyle">
            <summary>
            Indicates whether the <c>FontStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>FontStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.LeftText">
            <summary>
            Stores <c>IEditPageHeader.LeftText</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.CenterText">
            <summary>
            Stores <c>IEditPageHeader.CenterText</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.RightText">
            <summary>
            Stores <c>IEditPageHeader.RightText</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.Offset">
            <summary>
            Stores <c>IEditPageHeader.Offset</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.Visible">
            <summary>
            Stores <c>IEditPageHeader.Visible</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.ReverseOnEvenPages">
            <summary>
            Stores <c>IEditPageHeader.ReverseOnEvenPages</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.Font">
            <summary>
            Stores <c>IEditPageHeader.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.FontName">
            <summary>
            Stores name of the <c>IEditPageHeader.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.FontSize">
            <summary>
            Stores size of the <c>IEditPageHeader.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.FontStyle">
            <summary>
            Stores style of the <c>IEditPageHeader.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlPageHeaderInfo.FontColor">
            <summary>
            Stores <c>IEditPageHeader.FontColor</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.EditLineStyles">
            <summary>
            Represents a collection of the <c>ILineStyle</c> objects for Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditLineStyles.#ctor">
            <summary>
            Initializes a new instance of the <c>EditLineStyles</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditLineStyles.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>EditLineStyles</c> class with specified owner.
            </summary>
            <param name="owner"><c>SyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.EditLineStyles.Assign(QWhale.Editor.IEditLineStyles)">
            <summary>
            Copies the contents from another <c>IEditLineStyles</c> object.
            </summary>
            <param name="source">Specifies <c>IEditLineStyles</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.EditLineStyles.IndexOfName(System.String)">
            <summary>
            Returns the zero-based index of the first occurrence of the specified Name in the line style collection.
            </summary>
            <param name="name">Name of line style to locate.</param>
            <returns>Index of the style found.</returns>
        </member>
        <member name="M:QWhale.Editor.EditLineStyles.AddLineStyle">
            <summary>
            Adds a new <c>LineStyle</c> to the collection.
            </summary>
            <returns>Index of the added element.</returns>
        </member>
        <member name="M:QWhale.Editor.EditLineStyles.AddLineStyle(System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,QWhale.Editor.LineStyleOptions)">
            <summary>
            Adds a new <c>LineStyle</c> with specified parameters to the collection.
            </summary>
            <param name="name">Name of new <c>LineStyle</c>.</param>
            <param name="foreColor">Foreground color of new <c>LineStyle</c>.</param>
            <param name="backColor">Background color of new <c>LineStyle</c>.</param>
            <param name="penColor">Pen color of new <c>LineStyle</c>.</param>
            <param name="imageIndex">Image index of new <c>LineStyle</c>.</param>
            <param name="options">Options of new <c>LineStyle</c>.</param>
            <returns>Index of the added element in the <c>LineStyle</c> collection.</returns>
        </member>
        <member name="P:QWhale.Editor.EditLineStyles.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>LineStyleEx</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.EditLineStyle">
            <summary>
            Represents a particular style of the line in Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.#ctor">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified owner.
            </summary>
            <param name="owner"><c>SyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.#ctor(QWhale.Editor.ISyntaxEdit,System.String,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Int32,QWhale.Editor.LineStyleOptions)">
            <summary>
            Initializes a new instance of the <c>LineStyle</c> class with specified parameters.
            </summary>
            <param name="owner"><c>SyntaxEdit</c> that owns this new instance.</param>
            <param name="name">Name of the new instance.</param>
            <param name="foreColor">Foreground color of the new instance.</param>
            <param name="backColor">Background color of the new instance.</param>
            <param name="penColor">Pen color of the new instance.</param>
            <param name="imageIndex">Image index of the new instance.</param>
            <param name="options">Options of the new instance.</param>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ShouldSerializeForeColor">
            <summary>
            Indicates whether the <c>ForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ShouldSerializeBackColor">
            <summary>
            Indicates whether the <c>BackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>BackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ShouldSerializePenColor">
            <summary>
            Indicates whether the <c>PenColor</c> property should be persisted.
            </summary>
            <returns>True if <c>PenColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ShouldSerializeOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.Assign(QWhale.Editor.IEditLineStyle)">
            <summary>
            Copies the contents from another <c>IEditLineStyle</c> object.
            </summary>
            <param name="source">Specifies <c>IEditLineStyle</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.GetBackColor(System.Drawing.Color)">
            <summary>
            Returns <c>BackColor</c> or <c>ForeColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>ForeColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>BackColor</c>.</returns>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.GetForeColor(System.Drawing.Color)">
            <summary>
            Returns <c>ForeColor</c> or <c>BackColor</c> depending on <c>Options</c>.
            </summary>
            <param name="color">Specifies default color to return if <c>BackColor</c> or <c>ForeColor</c> represent empty color.</param>
            <returns><c>BackColor</c> if  <c>LineStyleOptions.InvertColors</c> is on; otherwise <c>ForeColor</c>.</returns>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ResetPenColor">
            <summary>
            Resets the <c>PenColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ResetImageIndex">
            <summary>
            Resets the <c>ImageIndex</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditLineStyle.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditLineStyle.Name">
            <summary>
            Gets or sets name of the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditLineStyle.ForeColor">
            <summary>
            Gets or sets foreground color of the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditLineStyle.BackColor">
            <summary>
            Gets or sets background color of the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditLineStyle.PenColor">
            <summary>
            Gets or sets background color of the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditLineStyle.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditLineStyle.Options">
            <summary>
            Gets or sets display options for the <c>EditLineStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditLineStyle.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>EditLineStyle</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Editor.TextSource.TextStrings">
            <summary>
            Specifies collection of lines with extended possibilities.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.#ctor(QWhale.Editor.TextSource.ITextSource)">
            <summary>
            Initializes a new instance of the <c>TextStrings</c> class with specified parameters.
            </summary>
            <param name="source"><c>ITextSource</c> that contains this collection of lines.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.#ctor">
            <summary>
            Initializes a new instance of the <c>TextStrings</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Finalize">
            <summary>
            Destroys the instance of the <c>TextStrings</c> class.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.CreateStringItem(System.String)">
            <summary>
            Creates a new <c>IStringItem</c> object containing specified text.
            </summary>
            <param name="s">String placed into a new <c>IStringItem</c> object.</param>
            <returns>New <c>IStringItem</c> object.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.IsWhitespace(System.Char)">
            <summary>
            Indicates whether the character at the specific position of the string collection is a whitespace character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is whitespace; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.TextPointToAbsolutePosition(System.Collections.Generic.IList{System.String},System.Drawing.Point,System.String)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="list">Strings collection to convert.</param>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <param name="lineTerminator">Specifies line terminator</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.AbsolutePositionToTextPoint(System.Collections.Generic.IList{System.String},System.Int32,System.String)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="list">Strings collection to convert.</param>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <param name="lineTerminator">Specifies line terminator</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Find(QWhale.Syntax.IStringList,System.Collections.Hashtable,System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@,System.String)">
            <summary>
            Searches for given text.
            </summary>
            <param name="list"><c>IStringList</c> collection to find from.</param>
            <param name="delimTable">Specifies collection of characters that is used as word delimiters.</param>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text</param>
            <param name="match">Receives match if regular expression search successfull.</param>
            <param name="lineTerminator">Specifies line terminator</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetItem(System.Int32)">
            <summary>
            Returns the <c>IStringItem</c> object at the given position of the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns><c>IStringItem</c> object at specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetLength(System.Int32)">
            <summary>
            Returns length of the string that corresponds to specified item in the collection.
            </summary>
            <param name="index">Index of item in the collection.</param>
            <returns>If collection do not contain specified item method returns 0.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SetTextAndData(System.String,System.String)">
            <summary>
            Sets the text and color data at the same time.
            </summary>
            <param name="text">text of the strings.</param>
            <param name="data">Color data associated witht the text</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Changed(System.Int32)">
            <summary>
            Notifies about string state changing.
            </summary>
            <param name="index">Index of string to update.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Changed(System.Int32,System.Int32)">
            <summary>
            Notifies about string state changing.
            </summary>
            <param name="first">Index of the first string to update.</param>
            <param name="last">Index of the last string to update.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetCharAt(System.Int32,System.Int32)">
            <summary>
            Returns character from specified position.
            </summary>
            <param name="x">Specifies position of character in string.</param>
            <param name="y">Specifies index of item in string collection.</param>
            <returns>Characted from specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetCharAt(System.Drawing.Point)">
            <summary>
            Returns character from specified position.
            </summary>
            <param name="position">Position of character where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Characted from specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetLexStyle(System.Drawing.Point)">
            <summary>
            Returns lexical style at specified position.
            </summary>
            <param name="position">Position of style where Y is index of item in string collection and X is index of character in this string.</param>
            <returns>Lexical style at specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.AfterSave">
            <summary>
            Performs additional actions after <c>TextStrings</c> saves its content to the file.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.TextPointToAbsolutePosition(System.Drawing.Point)">
            <summary>
            Converts given Point value to the absolute position.
            </summary>
            <param name="position">Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</param>
            <returns>Absolute position of given point.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.AbsolutePositionToTextPoint(System.Int32)">
            <summary>
            Converts given absolute position to position as Point value.
            </summary>
            <param name="position">Specifies index of character if the text considered as a single string.</param>
            <returns>Point value where Y-Coordinate represents index of line and X-Coordinate - index of character in this line.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Assign(QWhale.Editor.TextSource.ITextStrings)">
            <summary>
            Copies the contents from another <c>ITextStrings</c> object.
            </summary>
            <param name="source">Specifies <c>ITextStrings</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.IndexOf(System.String)">
            <summary>
            Returns the index of the first occurrence of given string in the string collection.
            </summary>
            <param name="item">The string to locate in string collection.</param>
            <returns>The index of the first occurrence of string within the string collection, if found; otherwise -1.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Insert(System.Int32,System.String)">
            <summary>
            Inserts value at the specified position.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <param name="item">Specifies string to insert.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.RemoveAt(System.Int32)">
            <summary>
            Removes string item at specified position.
            </summary>
            <param name="index">Specifies index of item in the string collection to remove.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Add(System.String)">
            <summary>
            Adds a new item to the end of string collection.
            </summary>
            <param name="item">String to be added to the end of the collection.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Clear">
            <summary>
            Removes all items from string collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Contains(System.String)">
            <summary>
            Indicates whether string collection contains specified string.
            </summary>
            <param name="item">string to check.</param>
            <returns>True if contains; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the entire string collection to a another array, starting at the specified index of the target array.
            </summary>
            <param name="array">The Array that is the destination of the elements copied from string collection.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Remove(System.String)">
            <summary>
            Removes the first occurrence of given string from the string collection.
            </summary>
            <param name="item">>String to remove.</param>
            <returns>True if item was successfully removed from the ICollection; otherwise, false. This method also returns false if item is not found in the original ICollection.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>A IEnumerator that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Find(System.String,QWhale.Editor.TextSource.SearchOptions,System.Text.RegularExpressions.Regex,System.Drawing.Point@,System.Int32@,System.Text.RegularExpressions.Match@)">
            <summary>
            Searches for given text.
            </summary>
            <param name="s">The text to locate in the collection.</param>
            <param name="options">Specifies parameters of search.</param>
            <param name="expression">Represents a regular expression to find text.</param>
            <param name="position">Position in strings collection to start search.</param>
            <param name="len">Receives length of the found text</param>
            <param name="match">Receives match if regular expression search successfull.</param>
            <returns>True if search succeed; otherwise false.</returns>
            <remarks>If search succeed Position parameter receive location of the found text.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves text content to the specific file with specified exporter.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveFile(System.String,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            Saves content to the given file with specified exported and specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveStream(System.IO.TextWriter,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveStream(System.IO.Stream)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport)">
            <summary>
            Saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.SaveStream(System.IO.Stream,QWhale.Editor.TextSource.IStringExport,System.Text.Encoding)">
            <summary>
            Saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="exporter">Specifies exporter to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads content from the given file with specified exporter.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadFile(System.String,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            Loads content from the given file with specified importer and specific encoding.
            </summary>
            <param name="fileName">Name of file to load content.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadStream(System.IO.Stream,QWhale.Editor.TextSource.IStringImport,System.Text.Encoding)">
            <summary>
            Loads the text content from the given stream with specified importer.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadStream(System.IO.TextReader,QWhale.Editor.TextSource.IStringImport)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <param name="importer">Specifies importer to load content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetTabString(System.String@,System.Int16[]@,System.Boolean,QWhale.Syntax.ITextUndoList)">
            <summary>
            When implemented by a class, converts all tab character to spaces depending on <c>TabStops</c> property.
            </summary>
            <param name="str">Text to convert.</param>
            <param name="data">Color data of specified string.</param>
            <param name="needData">Indicates whether method should return color data.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs)</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.ResetTabStops">
            <summary>
            Resets the <c>TabStops</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.ResetUseSpaces">
            <summary>
            Resets the <c>UseSpaces</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetTabString(System.String)">
            <summary>
            Converts all tab character to spaces depending on <c>TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <returns>Tabbed string.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetTabString(System.String,QWhale.Syntax.ITextUndoList)">
            <summary>
            Converts all tab character to spaces depending on <c>ITabulation.TabStops</c> property.
            </summary>
            <param name="s">Text to convert.</param>
            <param name="operations">List containing insertion or deletion of text fragments(spaces or tabs)</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the next TabStop at the specified position.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetPrevTabStop(System.Int32)">
            <summary>
            Returns number of spaces to the previous TabStop.
            </summary>
            <param name="pos">Position to check.</param>
            <returns>Number of spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetIndentString(System.Int32,System.Int32)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="pos">Specifies start position of the string.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetIndentString(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns indentation string which consist of tabs and spaces.
            </summary>
            <param name="count">Specifies number of characters in the string.</param>
            <param name="p">Specifies start position of the string.</param>
            <param name="useSpaces">Specifies that spaces should be used instead of tab characters.</param>
            <returns>Indented string that containing tabs and spaces.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.TabPosToPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as untabbed position.
            </summary>
            <param name="s">Specifies string to convert.</param>
            <param name="pos">Specifies index of character which position should be converted.</param>
            <returns>Untabbed position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.PosToTabPos(System.String,System.Int32)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Positon of the character in the string.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.PosToTabPos(System.String,System.Int32,System.Boolean)">
            <summary>
            Returns specified position within given string as tabbed position.
            </summary>
            <param name="s">Specifies string to check.</param>
            <param name="pos">Positon of the character in the string.</param>
            <param name="tabEnd">reserwed for interna use.</param>
            <returns>Tabbed position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.IsDelimiter(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of given string is a delimiter character.
            </summary>
            <param name="s">The string in which character should be tested.</param>
            <param name="pos">The index of character in the given string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.IsDelimiter(System.Int32,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is delimiter character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.IsDelimiter(System.Char)">
            <summary>
            Indicates whether the specified character is delimiter character.
            </summary>
            <param name="ch">The char value that should be tested.</param>
            <returns>True if specified character is delimiter; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.IsWhitespace(System.String,System.Int32)">
            <summary>
            Indicates whether the character at the specific position of the string collection is a whitespace character.
            </summary>
            <param name="index">The index of line in which character should be tested.</param>
            <param name="pos">The index of character in the specific string.</param>
            <returns>True if specified character is whitespace; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetWord(System.String,System.Int32,System.Int32@,System.Int32@,System.Collections.Hashtable)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="s">The given string.</param>
            <param name="pos">The index of character within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <param name="delims">Collection of delimiters.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetWord(System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Returns word start and end, if there is word at the specified position.
            </summary>
            <param name="index">The index of line in the text.</param>
            <param name="pos">The index of character in the within the string.</param>
            <param name="left">Receives start position of the word.</param>
            <param name="right">Receives end position of the word.</param>
            <returns>True if any word found; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetTextAt(System.Int32,System.Int32)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="pos">Specifies index of the line.</param>
            <param name="line">Specifies index of character in the text string.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.GetTextAt(System.Drawing.Point)">
            <summary>
            Returns word at the specific text position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>Word found at the specified position.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.ResetDelimiters">
            <summary>
            Resets the <c>Delimiters</c> to the defalut value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.AddNotifier(QWhale.Common.INotifier)">
            <summary>
            Adds new handler to respond for notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.RemoveNotifier(QWhale.Common.INotifier)">
            <summary>
            Exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Update">
            <summary>
            Updates an object state.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.TextStrings.Notify">
            <summary>
            Notifies all notifiers about updating object state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.Text">
            <summary>
            Gets or sets the strings in the <c>ITextStrings</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.Source">
            <summary>
            Gets the text source owning the <c>TextStrings</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.FirstChanged">
            <summary>
            Represents number of the first changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.LastChanged">
            <summary>
            Represents number of the last changed line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.RemoveTrailingSpaces">
            <summary>
            Gets or set a boolean value thet indicates whether <c>TextStrings</c> should remove trailing spaces from the end of each its strings.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>TextStrings</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual string stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.Count">
            <summary>
            Represents number of strings in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.TabStops">
            <summary>
            Gets or sets the character columns that the cursor will move to each time you press Tab.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.UseSpaces">
            <summary>
            Gets or sets a value indicating whether indent or TAB operations insert space characters rather than TAB characters.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.DelimTable">
            <summary>
            Represents delimiters as a key-and-value pairs collection where each key is a single delimiter character.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.Delimiters">
            <summary>
            Gets or sets an array of characters used as delimiters between words in the text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.DelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.TextStrings.Owner">
            <summary>
            Gets or set the <c>ISyntaxEdit</c> control that owns this collection.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextSource.BookMarkEx">
            <summary>
            <c>BookMarkEx</c> class is used to store individual bookmark with extended possibilities in bookmarks collection of Edit control.
            <seealso cref="T:QWhale.Editor.TextSource.IBookMarkEx"/>
            </summary>
            <remarks>Implements <c>IBookMarkEx</c> interface.</remarks>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarkEx.#ctor(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>BookMarkEx</c> class with specified <c>Pos</c>, <c>Line</c>, <c>Index</c>, <c>Name</c>, <c>Description</c> and <c>Url</c> values.
            </summary>
            <param name="line">Specifies <c>Line</c> property of a new instance.</param>
            <param name="pos">Specifies <c>Pos</c> property of a new instance.</param>
            <param name="index">Specifies <c>Index</c> property of a new instance.</param>
            <param name="name">Specifies <c>Name</c> property of a new instance.</param>
            <param name="description">Specifies <c>Description</c> property of a new instance.</param>
            <param name="url">Specifies <c>Url</c> property of a new instance.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarkEx.#ctor">
            <summary>
            Initializes a new instance of the <c>BookMark</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.BookMarkEx.Assign(QWhale.Editor.TextSource.IBookMark)">
            <summary>
            Copies the contents of another bookmark object to the bookmark.
            </summary>
            <param name="source">Specifies bookmark to copy content from. <c>Assign</c> copies <c>Line</c>, <c>Index</c> and <c>Pos</c> property from source bookmark (As well as <c>Name</c>, <c>Description</c> and <c>Url</c> if source is <c>IBookMarkEx</c> object).</param>
        </member>
        <member name="P:QWhale.Editor.TextSource.BookMarkEx.Name">
            <summary>
            Gets or sets name of the bookmark.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.BookMarkEx.Description">
            <summary>
            Gets or sets bookmark description.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.BookMarkEx.Url">
            <summary>
            Gets or sets bookmark url.
            </summary>
        </member>
        <member name="T:QWhale.Editor.ScrollingOptions">
            <summary>
            Defines scrolling behaviour.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.SmoothScroll">
            <summary>
            Specifies that Edit control should reposition immediately while user tracking the thumb.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.ShowScrollHint">
            <summary>
            Specifies that control should display hint text in the popup window when user tracking the thumb.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.UseScrollDelta">
            <summary>
            Specifies that horizontal scrolling should scroll client area at the several characters rather than one character when caret is at the right border.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.SystemScrollbars">
            <summary>
            Specifies that Edit control should use system scroll bars rather than scrollbar controls.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.FlatScrollbars">
            <summary>
            Specifies that scroll bars appears in flat style.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.AllowSplitHorz">
            <summary>
            Allows user to split Edit control horizontally.
            This options works only if <c>SystemScrollBars</c> is off and control has <c>Dock</c> property set to <c>DockStyle.Fill.</c>
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.AllowSplitVert">
            <summary>
            Allows user to split Edit control vertically.
            This options works only if <c>SystemScrollBars</c> is off and control has <c>Dock</c> property set to <c>DockStyle.Fill.</c>
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.HorzButtons">
            <summary>
            Specifies that scroll bars should display a collection of horizontal buttons at the left side of the horizontal scroll bar.
            This options works only if <c>SystemScrollBars</c> is off.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.VertButtons">
            <summary>
            Specifies that scroll bars should display a collection of vertical buttons at the bottom side of vertical scroll bar.
            This options works only if <c>SystemScrollBars</c> is off.
            </summary>
        </member>
        <member name="F:QWhale.Editor.ScrollingOptions.ScrollByPixels">
            <summary>
            Specifies that scroll bars should calculate their size using pixels rather than characters.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo">
            <summary>
            Contains information about <c>ISyntaxSettings</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxSettingsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.#ctor(QWhale.Editor.Dialogs.ISyntaxSettings)">
            <summary>
            Initializes a new instance of the <c>XmlSyntaxSettingsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ISyntaxSettings</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeFontName">
            <summary>
            Indicates whether the <c>FontName</c> property should be persisted.
            </summary>
            <returns>True if <c>FontName</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeFontSize">
            <summary>
            Indicates whether the <c>FontSize</c> property should be persisted.
            </summary>
            <returns>True if <c>FontSize</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeFontStyle">
            <summary>
            Indicates whether the <c>FontStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>FontStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeNavOptions">
            <summary>
            Indicates whether the <c>NavOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>NavOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeSelOptions">
            <summary>
            Indicates whether the <c>Options</c> property should be persisted.
            </summary>
            <returns>True if <c>Options</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeGutterOptions">
            <summary>
            Indicates whether the <c>GutterOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>GutterOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeOutlineOptions">
            <summary>
            Indicates whether the <c>OutlineOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>OutlineOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeGutterWidth">
            <summary>
            Indicates whether the <c>GutterWidth</c> property should be persisted.
            </summary>
            <returns>True if <c>GutterWidth</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeMarginPos">
            <summary>
            Indicates whether the <c>MarginPos</c> property should be persisted.
            </summary>
            <returns>True if <c>MarginPos</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShouldSerializeTabStops">
            <summary>
            Indicates whether the <c>TabStops</c> property should be persisted.
            </summary>
            <returns>True if <c>TabStops</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.Font">
            <summary>
            Stores <c>ISyntaxSettings.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.FontName">
            <summary>
            Stores name of the <c>ISyntaxSettings.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.FontSize">
            <summary>
            Stores size of the <c>ISyntaxSettings.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.FontStyle">
            <summary>
            Stores style of the <c>ISyntaxSettings.Font</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.NavOptions">
            <summary>
            Stores <c>ISyntaxSettings.NavigateOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ScrollBars">
            <summary>
            Stores <c>ISyntaxSettings.ScrollBars</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.SelOptions">
            <summary>
            Stores <c>ISyntaxSettings.SelectionOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.GutterOptions">
            <summary>
            Stores <c>ISyntaxSettings.GutterOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.OutlineOptions">
            <summary>
            Stores <c>ISyntaxSettings.OutlineOptions</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShowGutter">
            <summary>
            Stores <c>ISyntaxSettings.ShowGutter</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ShowMargin">
            <summary>
            Stores <c>ISyntaxSettings.ShowMargin</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.HighlightHyperText">
            <summary>
            Stores <c>ISyntaxSettings.HighlightUrls</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.AllowOutlining">
            <summary>
            Stores <c>ISyntaxSettings.AllowOutlining</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.UseSpaces">
            <summary>
            Stores <c>ISyntaxSettings.UseSpaces</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.WordWrap">
            <summary>
            Stores <c>ISyntaxSettings.WordWrap</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.GutterWidth">
            <summary>
            Stores <c>ISyntaxSettings.GutterWidth</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.MarginPos">
            <summary>
            Stores <c>ISyntaxSettings.MarginPos</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.TabStops">
            <summary>
            Stores <c>ISyntaxSettings.TabStops</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ColorThemes">
            <summary>
            Stores <c>ISyntaxSettings.ColorThemes</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.ActiveThemeIndex">
            <summary>
            Stores <c>ISyntaxSettings.GutterWidth</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlSyntaxSettingsInfo.EventData">
            <summary>
            Stores <c>EventHandlers</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.KeyEventType">
            <summary>
            Represents type of key event.
            </summary>
        </member>
        <member name="F:QWhale.Editor.KeyEventType.None">
            <summary>
            No key event.
            </summary>
        </member>
        <member name="F:QWhale.Editor.KeyEventType.IntParam">
            <summary>
            Key event for integer parameter.
            </summary>
        </member>
        <member name="F:QWhale.Editor.KeyEventType.CharParam">
            <summary>
            Key event for char parameter.
            </summary>
        </member>
        <member name="F:QWhale.Editor.KeyEventType.SelectionParam">
            <summary>
            Key event for <c>SelectionType</c> parameter.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Outlining">
            <summary>
            Represents properties and methods that affects appearance and behaviour of outline sections within Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Outlining</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.ShouldSerializeOutlineColor">
            <summary>
            Indicates whether the <c>OutlineColor</c> property should be persisted.
            </summary>
            <returns>True if <c>OutlineColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.ShouldSerializeOutlineOptions">
            <summary>
            Indicates whether the <c>OutlineOptions</c> property should be persisted.
            </summary>
            <returns>True if <c>OutlineOptions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Assign(QWhale.Editor.IOutlining)">
            <summary>
            Copies the contents from another <c>IOutlining</c> object.
            </summary>
            <param name="source">Specifies <c>IOutlining</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.OutlineText">
            <summary>
            Tries to perform lexical analysis of entire text to create outline sections based on results of this analysis.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.UnOutlineText">
            <summary>
            Removes all outline section from outline collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.ResetOutlineColor">
            <summary>
            Resets <c>OutlineColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.Outline(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Outline(System.Int32,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32)">
            <summary>
            Creates an outlining section based on specific scope at the specific level of outline nesting.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Outline(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Outline(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text substituting collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Outline(System.Int32,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section and with specific text substituting  collapsed text.
            </summary>
            <param name="first">Specifies first line of section to outline.</param>
            <param name="last">Specifies last line of section to outline.</param>
            <param name="outlineText">Specifies first line of section to outline.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            Creates an outlining section based on specific scope at specific level of outline nesting and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="level">Specifies level of outline nesting for this section.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Outline(System.Drawing.Point,System.Drawing.Point,System.String)">
            <summary>
            Creates an outlining section based on specific scope within current outlined section and with specific text substituting collapsed text.
            </summary>
            <param name="startPoint">Specifies begin of section to outline.</param>
            <param name="endPoint">Specifies end of section to outline.</param>
            <param name="outlineText">Specifies text to substitute collapsed text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.UnOutline(System.Drawing.Point)">
            <summary>
            Removes outlined section at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.UnOutline(System.Int32)">
            <summary>
            Removes all outline sections containing the given line.
            </summary>
            <param name="index">Specifies line in the text.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.UnOutline">
            <summary>
            Removes all outlined sections from outline collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.GetOutlineRange(System.Drawing.Point)">
            <summary>
            Returns outline section, which represents text substituting outlined section and level of outline nesting at the specific position.
            </summary>
            <param name="position">Specifies position in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.GetOutlineRange(System.Int32)">
            <summary>
            Returns outline section, which represents text substituting outlined section and level of outline nesting at the specific line.
            </summary>
            <param name="index">Index of line in the text.</param>
            <returns><c>IOutlineRange</c> object that represents outline section.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.IsExpanded(System.Int32)">
            <summary>
            Indicates whether the outlined text at the specified line is expanded.
            </summary>
            <param name="index">The index of the line to test.</param>
            <returns>True if expanded; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.IsCollapsed(System.Int32)">
            <summary>
            Indicates whether the outlined text at the specified line is collapsed.
            </summary>
            <param name="index">The index of the line to test.</param>
            <returns>True if collapsed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.IsVisible(System.Drawing.Point)">
            <summary>
            Indicates whether the text at the specified position is visible, that is there is no collapsed outline section containing given position.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.IsVisible(System.Int32)">
            <summary>
            Indicates whether the text at the specified line is visible, that is there is no collapsed outline section containing given line.
            </summary>
            <param name="index">Specifies index of line in the text.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.Collapse(System.Int32)">
            <summary>
            Collapses the specified line.
            </summary>
            <param name="index">The index of the line to collapse.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.Expand(System.Int32)">
            <summary>
            Expands outline section at the given line.
            </summary>
            <param name="index">The index of the line to expand.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.EnsureExpanded(System.Int32)">
            <summary>
            Makes all outline sections containing specified line expanded.
            </summary>
            <param name="index">Specifies position of the line in the text.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.EnsureExpanded(System.Drawing.Point)">
            <summary>
            Makes all outline sections containing specified position expanded.
            </summary>
            <param name="position">The Point value that specifies position in the text.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.FullExpand">
            <summary>
            Expands all outlining sections.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.FullExpand(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Expands all outline sections specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to expand.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.FullCollapse">
            <summary>
            When implemented by a class, collapses all outlining sections.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.FullCollapse(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Collapses all sections objects specified by Ranges parameter.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to collapse.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.ToggleOutlining">
            <summary>
            Toggles expanded state for all <c>IOutlineRange</c> objects in outline collection.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.ToggleOutlining(System.Collections.Generic.IList{QWhale.Common.IRange},QWhale.Syntax.IOutlineRange)">
            <summary>
            Toggles expanded state for given <c>IOutlineRange</c> collection.
            </summary>
            <param name="ranges">Specifies <c>IOutlineRange</c> collection to toggle.</param>
            <param name="range"><c>IOutlineRange</c> object representing current outline section. The method expands or collapses ranges depending on collapsed state of the Range</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.CollapseToDefinitions">
            <summary>
            Collapses and expandes some outline section to get a quick overall view of the content.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.GetOutlineHint(QWhale.Syntax.IOutlineRange)">
            <summary>
            Returns string that appears in the hint window when mouse pointer is over the outline button.
            </summary>
            <param name="range">Specifies the <c>IOutlineRange</c> object holding the hint.</param>
            <returns>Hint string.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Int32)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific line.
            </summary>
            <param name="ranges">Specifles list to fill.</param>
            <param name="index">Specifies index of line in text coordinates.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Drawing.Point)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific position.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="position">Specifies position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Fills list specified by ranges parameter with all outline sections containing specific range.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <param name="startPoint">Specifies start position in the text.</param>
            <param name="endPoint">Specifies end position in the text.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.GetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Fills list specified by ranges parameter with all existing outline sections.
            </summary>
            <param name="ranges">Specifies list to fill.</param>
            <returns>Number of elements in the ranges collection.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.SetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges. 
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.CanExpand(System.Int32)">
            <summary>
            Returns boolean value indicating that oultine section at given line can be expanded.
            </summary>
            <param name="line"></param>
            <returns>True if section can be expanded; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.CanCollapse(System.Int32)">
            <summary>
            Returns boolean value indicating that oultine section at given line can be collapsed.
            </summary>
            <param name="line"></param>
            <returns>True if section can be collapsed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.SetOutlineRanges(System.Collections.Generic.IList{QWhale.Common.IRange},System.Boolean)">
            <summary>
            Updates <c>IOutlineRange</c> collection from given list of ranges. 
            </summary>
            <param name="ranges">Specifies new <c>IOutlineRange</c> collection to set.</param>
            <param name="preserveVisible">Indicates whether new ranges should preserve collapsed state of existing outline sections.</param>
        </member>
        <member name="M:QWhale.Editor.Outlining.BeginUpdate">
            <summary>
            Prevents outline list updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.EndUpdate">
            <summary>
            Re-enables outline list updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of outline list updating locks.</returns>
        </member>
        <member name="M:QWhale.Editor.Outlining.ResetAllowOutlining">
            <summary>
            Resets <c>AllowOutlining</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Outlining.ResetOutlineOptions">
            <summary>
            Resets <c>OutlineOptions</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Outlining.OutlineColor">
            <summary>
            Gets or sets color that is used to draw outline button.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Outlining.UseRoundRect">
            <summary>
            Gets or sets a boolean value indicating whether outlinig butons should be drawn with rounded corners.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Outlining.SerializationInfo">
            Xml serialization
            <summary>
            Gets or sets an xml representation of this <c>Outlining</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="P:QWhale.Editor.Outlining.CollapsedCount">
            <summary>
            Returns number of collapsed sections.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Outlining.AllowOutlining">
            <summary>
            Gets or sets a value indicating whether outlining enabled.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Outlining.OutlineOptions">
            <summary>
            Gets or sets outlining options.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Outlining.Expanding">
            <summary>
            Occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="E:QWhale.Editor.Outlining.Collapsing">
            <summary>
            Occurs when user attempts expand outline section.
            </summary>
        </member>
        <member name="T:QWhale.Editor.AutoCorrectEventArgs">
            <summary>
            Provides data for the <c>AutoCorrectEvent</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Editor.AutoCorrectEventArgs.Word">
            <summary>
            Represents words to correct.
            </summary>
        </member>
        <member name="F:QWhale.Editor.AutoCorrectEventArgs.CorrectWord">
            <summary>
            Represents corrected word.
            </summary>
        </member>
        <member name="F:QWhale.Editor.AutoCorrectEventArgs.HasCorrection">
            <summary>
            Represents a value indicating whether specified word is corrected.
            </summary>
        </member>
        <member name="T:QWhale.Editor.AutoCorrectEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.AutoCorrect</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>AutoCorrectEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Editor.CodeCompletion.HtmlLexer">
            <summary>
            Represents class used to highlight hint content with bold style.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HtmlLexer.#ctor">
            <summary>
            Initializes a new instance of the <c>HtmlLexer</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HtmlLexer.ParseHtmlText(System.Int32,System.Drawing.FontStyle,System.String@,System.Int16[]@)">
            <summary>
            Performs out lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="style">Specifies default font style</param>
            <param name="s">Text to parse.</param>
            <param name="colorData">Receives color data of the given text.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:QWhale.Editor.CodeCompletion.HtmlLexer.Dispose(System.Boolean)">
            <summary>
            Destroys the instance of the <c>CodeCompletionWindow</c> class.
            </summary>
        </member>
        <member name="T:QWhale.Editor.EditRuler">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.#ctor">
            <summary>
            Initializes a new instance of the <c>EditRuler</c> with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.Assign(QWhale.Editor.IEditRuler)">
            <summary>
            Copies the contents of another <c>IEditRuler</c> object.
            </summary>
            <param name="source">Specifies <c>IEditRuler</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.EditRuler.CancelDragging">
            <summary>
            Cancels dragging operation.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.ResetOptions">
            <summary>
            Resets the <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.ResetUnits">
            <summary>
            Resets the <c>Units</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.ResetIndentBackColor">
            <summary>
            Resets the <c>IndentBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Editor#IEditRuler#SendToBack">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#CreateGraphics">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#Invalidate">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#Invalidate(System.Drawing.Rectangle)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#Invalidate(System.Drawing.Region)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#Invalidate(System.Drawing.Region,System.Boolean)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#PointToClient(System.Drawing.Point)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#PointToScreen(System.Drawing.Point)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#Focus">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#FindForm">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#BringToFront">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#Invoke(System.Delegate)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_CanFocus">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Visible">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Visible(System.Boolean)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Location">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Location(System.Drawing.Point)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Left">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Left(System.Int32)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Top">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Top(System.Int32)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Width">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Width(System.Int32)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Height">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Height(System.Int32)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Bounds(System.Drawing.Rectangle)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_ClientRectangle">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Parent">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Parent(System.Windows.Forms.Control)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Enabled">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#set_Enabled(System.Boolean)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_IsHandleCreated">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#get_Created">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#add_Click(System.EventHandler)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditRuler.QWhale#Common#IControl#remove_Click(System.EventHandler)">
            <summary>
            Represents Edit control's ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.IndentBackColor">
            <summary>
            Gets or sets background color of indentation parts of the ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.Vertical">
            <summary>
            Gets or sets a boolean value indicating whether ruler has vertical or horizontal direction.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.PageStart">
            <summary>
            Gets or sets beginning of the page part of the ruler.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.PageWidth">
            <summary>
            Gets or sets width, in pixels between left and right indentations indicating width of the page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.RulerStart">
            <summary>
            Gets or sets position, in pixels, of left indentation specifying start of the page.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.RulerWidth">
            <summary>
            Gets or sets ruler width.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.MarkWidth">
            <summary>
            Gets or sets default distance between adjacent marks.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.Units">
            <summary>
            Gets or sets ruler measurement units.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.Options">
            <summary>
            Gets or sets <c>RulerOptions</c> determining ruler behaviour.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditRuler.IsDragging">
            <summary>
            Indicates whether some of ruler indentation is in dragging state.
            </summary>
        </member>
        <member name="E:QWhale.Editor.EditRuler.Change">
            <summary>
            Occurs when some of ruler indentations has changed its position due to the dragging operation.
            </summary>
        </member>
        <member name="T:QWhale.Editor.TextUndoEvent">
            <summary>
            Represents a method that will handle string replacement event inside <c>Selection</c>
            </summary>
            <param name="s">String to be replaced.</param>
            <param name="operations">List containing insertion or deletion of text fragments</param>
        </member>
        <member name="T:QWhale.Editor.TextUndoEventEx">
            <summary>
            Represents a method that will handle string replacement event inside <c>Selection</c>
            </summary>
            <param name="s">String to be replaced.</param>
            <param name="operations">List containing insertion or deletion of text fragments</param>
            <param name="range">Range representing text to change</param>
            <param name="index">Index of line to be changed.</param>
        </member>
        <member name="T:QWhale.Editor.TextSource.CodeSnippetRange">
            <summary>
            Represents individual outlining section that can appear in the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRange.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <c>CodeSnippetRange</c> class with specified parameters.
            </summary>
            <param name="start">Start of <c>CodeSnippetRange</c> area.</param>
            <param name="end">End of <c>CodeSnippetRange</c> area.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.String,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>SnippetRange</c> class with specified parameter.
            </summary>
            <param name="start">Specifies start position of the code snippet.</param>
            <param name="end">Specifies end position of the code snippet.</param>
            <param name="id">Specifies id of the code snippet.</param>
            <param name="tooltip">Specifies short description of the code snippet.</param>
            <param name="isEditable">Specifies whether code snippet can be edited.</param>
        </member>
        <member name="M:QWhale.Editor.TextSource.CodeSnippetRange.Clone">
            <summary>
            Creates a new object that is a copy of the current <c>CodeSnippetRange</c> object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current CodeSnippetRange object.</returns>
        </member>
        <member name="P:QWhale.Editor.TextSource.CodeSnippetRange.ID">
            <summary>
            Represents name of code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.CodeSnippetRange.Tooltip">
            <summary>
            Represents short description of the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Editor.TextSource.CodeSnippetRange.IsEditable">
            <summary>
            Gets or sets a boolean value that indicates whether code snippet can be edited.
            </summary>
        </member>
        <member name="T:QWhale.Editor.SeparatorOptions">
            <summary>
            Specifies options for highlighting and separating lines within Edit control.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SeparatorOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SeparatorOptions.HighlightCurrentLine">
            <summary>
            Specifies that current line in Edit control should be highlighted.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SeparatorOptions.HideHighlighting">
            <summary>
            Specifies that current line in Edit control should not be highlighted when control looses input focus.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SeparatorOptions.SeparateLines">
            <summary>
            Specifies that lines are visualy separated in Edit control.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SeparatorOptions.SeparateWrapLines">
            <summary>
            Specifies that Line seprator is drawn between lines that are dropped due to word break procedure.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SeparatorOptions.SeparateContent">
            <summary>
            Specifies that Line seprator is drawn between separate sections of the text, for example between methods.
            </summary>
        </member>
        <member name="F:QWhale.Editor.SeparatorOptions.SeparateBeyondEof">
            <summary>
            Specifies that Line seprator is drawn between lines beyond end of file.
            </summary>
        </member>
        <member name="T:QWhale.Editor.OutlineOptions">
            <summary>
            Defines appearance and behaviour of the outline text sections.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Editor.OutlineOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Editor.OutlineOptions.DrawOnGutter">
            <summary>
            Specifies that control should paint outline images and lines on gutter.
            </summary>
        </member>
        <member name="F:QWhale.Editor.OutlineOptions.DrawLines">
            <summary>
            Specifies that control should paint lines for expanded outline section.
            </summary>
        </member>
        <member name="F:QWhale.Editor.OutlineOptions.DrawButtons">
            <summary>
            Specifies that control should paint the outline buttons substituting content of the collapsed section.
            </summary>
        </member>
        <member name="F:QWhale.Editor.OutlineOptions.ShowHints">
            <summary>
            Specifies that control should display text of the collapsed outline section in the popup window when mouse pointer is over the outline button.
            </summary>
        </member>
        <member name="T:QWhale.Editor.HitTestInfo">
            <summary>
            Contains information about an area of an Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.HitTestInfo.Reset">
            <summary>
            Resets <c>HitTestInfo</c> members to their default values.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.HitTest">
            <summary>
            Gets or sets the <c>HitTest</c> that represents the area of the Edit control evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.Line">
            <summary>
            Gets or sets the index of line evaluated by the hit-test operation. 
            Contains index of line if mouse is over text line in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.Pos">
            <summary>
            Gets or sets the index of character within the line evaluated by the hit-test operation. 
            Contains index of line if mouse is over some text in Edit control; -1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.Item">
            <summary>
            Gets or sets the <c>IStrItem</c> object evaluated by the hit-test operation. 
            Contains instance of <c>IStrItem</c> object if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.String">
            <summary>
            Gets or sets the text string evaluated by the hit-test operation. 
            Contains string if mouse is over text line in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.Word">
            <summary>
            Gets or sets the word evaluated by the hit-test operation. 
            Contains string if mouse is over some word in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.Url">
            <summary>
            Gets or sets the hypertext string evaluated by the hit-test operation. 
            Contains string if mouse is over hypertext section in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.GutterImage">
            <summary>
            Gets or sets the <c>Gutter</c> ImageIndex, evaluated by the hit-test operation. 
            Contains index of image if mouse is over the gutter image; - 1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.OutlineIndex">
            <summary>
            Gets or sets the index of line where outline image is displayed, evaluated by the hit-test operation. 
            Contains index of line if mouse is over the outline button; - 1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.OutlineRange">
            <summary>
            Gets or sets the <c>IOutlineRange</c> object evaluated by the hit-test operation. 
            Contains instance of <c>IOutlineRange</c> object if mouse is over outline button; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.Page">
            <summary> 
            Gets or sets the index of page evaluated by the hit-test operation. 
            Contains index of page if mouse is over text page in Edit control; null otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.Style">
            <summary> 
            Gets or sets the index of lexical style evaluated by the hit-test operation. 
            Contains index of lexical style if mouse is over the text; - 1 otherwise.
            </summary>
        </member>
        <member name="P:QWhale.Editor.HitTestInfo.TextStyle">
            <summary> 
            Gets or sets the set of additional flags for the text fragment evaluated by the hit-test operation.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlEditHyperTextInfo">
            <summary>
            Contains information about <c>IEditHyperText</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditHyperTextInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditHyperTextInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditHyperTextInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlEditHyperTextInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditHyperTextInfo.#ctor(QWhale.Editor.IEditHyperText)">
            <summary>
            Initializes a new instance of the <c>XmlEditHyperTextInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IEditHyperText</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditHyperTextInfo.ShouldSerializeUrlColor">
            <summary>
            Indicates whether the <c>UrlColor</c> property should be persisted.
            </summary>
            <returns>True if <c>UrlColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlEditHyperTextInfo.ShouldSerializeUrlStyle">
            <summary>
            Indicates whether the <c>UrlStyle</c> property should be persisted.
            </summary>
            <returns>True if <c>UrlStyle</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditHyperTextInfo.UrlStyle">
            <summary>
            Stores <c>IEditHyperText.UrlStyle</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditHyperTextInfo.UrlColor">
            <summary>
            Stores <c>IEditHyperText.UrlColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Editor.Serialization.XmlEditHyperTextInfo.ShowHints">
            <summary>
            Stores <c>IEditHyperText.ShowHints</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Editor.EditSpelling">
            <summary>
            Represents properties and methods allowing to visually highlight mispelled words in the control.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSpelling.#ctor(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>Spelling</c> class with specified owner.
            </summary>
            <param name="owner"><c>ISyntaxEdit</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Editor.EditSpelling.ShouldSerializeSpellColor">
            <summary>
            Indicates whether the <c>SpellColor</c> property should be persisted.
            </summary>
            <returns>True if <c>SpellColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSpelling.Assign(QWhale.Editor.IEditSpelling)">
            <summary>
            Copies the contents from another <c>IEditSpelling</c> object.
            </summary>
            <param name="source">Specifies <c>IEditSpelling</c> to assign.</param>
        </member>
        <member name="M:QWhale.Editor.EditSpelling.ResetSpellColor">
            <summary>
            Resets the <c>SpellColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSpelling.IsWordCorrect(System.String)">
            <summary>
            Checks whether spelling for the given word is correct.
            </summary>
            <param name="text">Specifies text to check-up.</param>
            <returns>True if correct; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSpelling.ResetCheckSpelling">
            <summary>
            Resets the <c>CheckSpelling</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSpelling.ResetSpellDelimiters">
            <summary>
            Resets the <c>SpellDelimiters</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSpelling.SpellColor">
            <summary>
            Gets or sets a value representing color to draw wavy underlines under mispelled words.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSpelling.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>Spelling</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="P:QWhale.Editor.EditSpelling.CheckSpelling">
            <summary>
            Gets or sets a value indicating whether the document can check spelling for its content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSpelling.SpellDelimiters">
            <summary>
            Gets or sets an array of chars used to separate words in a text.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSpelling.SpellDelimiterString">
            <summary>
            Gets or sets <c>Delimiters</c> as a single string.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSpelling.HasSpelling">
            <summary>
            Gets boolean value indicating that editor has external spell checker assigned
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSpelling.SpellTable">
            <summary>
            Represents a hash table containing delimiters
            </summary>
        </member>
        <member name="E:QWhale.Editor.EditSpelling.WordSpell">
            <summary>
            Occurs when spelling of some word within the text needs checking.
            </summary>
        </member>
        <member name="T:QWhale.Editor.Serialization.XmlImport">
            <summary>
            Represents class that can import Edit control's content stored in XML format.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.XmlImport.Read">
            <summary>
            Loads entire content.
            </summary>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Editor.Serialization.RtfExport">
            <summary>
            Represents class that can export Edit control's content to rich text format.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.RtfExport.#ctor">
            <summary>
            Initializes a new instance of the <c>RtfExport</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Editor.Serialization.RtfExport.BeginWrite(System.IO.TextWriter,System.Object)">
            <summary>
            Starts writing routine.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <param name="userData">Data to be saved.</param>
        </member>
        <member name="M:QWhale.Editor.Serialization.RtfExport.EndWrite">
            <summary>
            Finalizes writing routine.
            </summary>
        </member>
        <member name="T:QWhale.Editor.EditSyntaxPaint">
            <summary>
            Represents properties and methods, used to draw text and graphic primitives.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.#ctor(QWhale.Common.IPainter,QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes a new instance of the <c>EditSyntaxPaint</c> class with specified parameters.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="owner">Specifies control being painted.</param>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.GetFontStyle(System.Drawing.FontStyle,QWhale.Syntax.TextStyle)">
            <summary>
            Retrieves font style corresponding to given state.
            </summary>
            <param name="fontStyle">Default style.</param>
            <param name="textStyle">Additional color flags.</param>
            <returns>New value of font style.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.GetFontColor(System.Drawing.Color,QWhale.Syntax.TextStyle)">
            <summary>
            Retrieves font color corrsponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="textStyle">Additional color flags.</param>
            <returns>New value of font color.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.GetBackColor(System.Drawing.Color,QWhale.Syntax.TextStyle)">
            <summary>
            Retrieves background color corresponding to given state.
            </summary>
            <param name="color">Default color.</param>
            <param name="state">Additional color flags.</param>
            <returns>New value of background color.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.DrawLine(System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Int32@)">
            <summary>
            Draws line given by its index at the specified position.
            </summary>
            <param name="index">Index of line to draw.</param>
            <param name="position">Position to start drawing.</param>
            <param name="clipRect">Rectangular area of the control to draw line in.</param>
            <param name="realLine">Real line index.</param>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.PaintSyntax(QWhale.Common.IPainter,System.Int32,System.Int32,System.Drawing.Point,System.Drawing.Rectangle,System.Drawing.Point,System.Boolean)">
            <summary>
            Paints a specified part of the control.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies first line of content to paint.</param>
            <param name="endLine">Specifies last line of content to paint.</param>
            <param name="position">The Point value that specifies start position to draw content from.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="location">The Point value that specifies start position to draw page from.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.PaintLineBookMarks(QWhale.Common.IPainter,System.Drawing.Rectangle)">
            <summary>
            Paints collection of line bookmark.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="rect">Rectangular area of control to draw line bookmarks.</param>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.PaintLineBookMark(QWhale.Common.IPainter,QWhale.Editor.TextSource.IBookMark,System.Drawing.Rectangle)">
            <summary>
            Paint specified line bookmark.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="bookMark"><c>IBookMark</c> to draw.</param>
            <param name="rect">Rectangular area of control to draw line bookmark.</param>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.GetForeColor(System.Boolean)">
            <summary>
            Retrieves foreground color in accordance with specified parameter and editor settings.
            </summary>
            <param name="readOnly">Specifies whether method should return foregorund color for readonly state.</param>
            <returns>Appropriate foreground color.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.GetBackColor(System.Boolean)">
            <summary>
            Retrieves background color in accordance with specified parameter and editor settings.
            </summary>
            <param name="readOnly">Specifies whether method should return backgorund color for readonly state.</param>
            <returns>Appropriate background color.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.GetRectRegion(QWhale.Editor.SelectionType,System.Drawing.Rectangle,System.Boolean,System.Boolean)">
            <summary>
            Returns region corresponding to given rectangle.
            </summary>
            <param name="selectionType">Specifies selection type.</param>
            <param name="rect">Rectangle to check.</param>
            <param name="atTopLeftEnd">Boolean value indicating if the region's topleft corner should be calculated taking into account end of the wrapped line.</param>
            <param name="atBottomRightEnd">Boolean value indicating if the region's bottomright corner should be calculated taking into account end of the wrapped line.</param>
            <returns>Region corresponding to given rectangle.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.GetRectRegion(System.Drawing.Rectangle)">
            <summary>
            Returns region corresponding to given rectangle.
            </summary>
            <param name="rect">Rectangle to check.</param>
            <returns>Region corresponding to given rectangle</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.PaintWindow(QWhale.Common.IPainter,System.Int32,System.Drawing.Rectangle,System.Drawing.Point,System.Single,System.Single,System.Boolean,System.Boolean)">
            <summary>
            When implemented by a class, paints editor's content.
            </summary>
            <param name="painter">Specifies <c>IPainter</c> object used to draw text and graphic primitives.</param>
            <param name="startLine">Specifies first line of content to paint.</param>
            <param name="rect">Rectangular area of control to draw.</param>
            <param name="location">The Point value that specifies start position to draw content from.</param>
            <param name="scaleX">Horizontal scale of the transformation.</param>
            <param name="scaleY">Vertical scale of the transformation.</param>
            <param name="specialPaint">Reserved for internal use. Used for Print and Print preview.</param>
            <param name="inPrinting">Reserved for internal use. Used for Print and Print preview.</param>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ShouldSerializeColumnsIndentForeColor">
            <summary>
            Indicates whether the <c>ColumnsIndentForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ColumnsIndentForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ShouldSerializeReadonlyForeColor">
            <summary>
            Indicates whether the <c>ReadonlyForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ReadonlyForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ShouldSerializeReadonlyBackColor">
            <summary>
            Indicates whether the <c>ReadonlyBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>ReadonlyBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ShouldSerializeDisabledForeColor">
            <summary>
            Indicates whether the <c>DisabledForeColor</c> property should be persisted.
            </summary>
            <returns>True if <c>DisabledForeColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ShouldSerializeDisabledBackColor">
            <summary>
            Indicates whether the <c>DisabledBackColor</c> property should be persisted.
            </summary>
            <returns>True if <c>DisabledBackColor</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ResetDrawColumnsIndent">
            <summary>
            Resets the <c>DrawColumnsIndent</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ResetColumnsIndentForeColor">
            <summary>
            Resets the <c>ColumnsIndentForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ResetDisabledForeColor">
            <summary>
            Resets the <c>DisabledForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ResetDisabledBackColor">
            <summary>
            Resets the <c>DisabledBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ResetReadonlyForeColor">
            <summary>
            Resets the <c>ReadonlyForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ResetReadonlyBackColor">
            <summary>
            Resets the <c>ReadonlyBackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Editor.EditSyntaxPaint.ResetSyntaxErrorsHints">
            <summary>
            When implemented by a class, resets the <c>SyntaxErrorsHints</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.Owner">
            <summary>
            Represents <c>SyntaxEdit</c> object that owns this <c>EditSyntaxPaint</c>.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.Lexer">
            <summary>
            Gets or sets object that can make lexical analysis for the control's content.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.ReadonlyForeColor">
            <summary>
            Gets or sets foreground color used in the readonly state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.ReadonlyBackColor">
            <summary>
            Gets or sets background color used in the readonly state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.DisabledForeColor">
            <summary>
            Gets or sets foreground color used in the disabled state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.DisabledBackColor">
            <summary>
            Gets or sets background color used in the disabled state.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.DrawColumnsIndent">
            <summary>
            Indicates whether edit control should draw columns indentation marks.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.ColumnsIndentForeColor">
            <summary>
            Specifies columns indentation color.
            </summary>
        </member>
        <member name="P:QWhale.Editor.EditSyntaxPaint.SyntaxErrorsHints">
            <summary>
            Gets or sets a boolean value that indicates whether Edit control should display hint over each syntax error in it's content.
            </summary>
        </member>
        <member name="T:QWhale.Editor.EditorPrintDocument">
            <summary>
            Defines a reusable object that sends output to a printer.
            </summary>
            <remarks>Normally you do not need to use this class. It's used internally by Edit control.</remarks>
        </member>
        <member name="M:QWhale.Editor.EditorPrintDocument.#ctor(QWhale.Editor.IPrinting,System.Drawing.Printing.PrinterSettings)">
            <summary>
            Initializes a new instance of the <c>EditorPrintDocument</c> class with specified parameters.
            </summary>
            <param name="printing">Specifies <c>IPrinting</c> object for print document.</param>
            <param name="settings">Specifies PrinterSettings for print document.</param>
        </member>
        <member name="M:QWhale.Editor.EditorPrintDocument.Init(QWhale.Editor.ISyntaxEdit)">
            <summary>
            Initializes <c>EditorPrintDocument</c> content with content of Edit control.
            </summary>
            <param name="edit">Represents an <c>ISyntaxEdit</c> object owning <c>EditorPrintDocument</c>.</param>
        </member>
        <member name="M:QWhale.Editor.EditorPrintDocument.Init(QWhale.Editor.ISyntaxEdit,System.Boolean)">
            <summary>
            Initializes <c>EditorPrintDocument</c> content with content of Edit control.
            </summary>
            <param name="edit">Represents an <c>ISyntaxEdit</c> object owning <c>EditorPrintDocument</c>.</param>
            <param name="calcPages">Indicates whether <c>EditorPrintDocument</c> should calculate count of pages to print.</param>
        </member>
    </members>
</doc>
