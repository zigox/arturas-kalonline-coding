<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QWhale.Syntax</name>
    </assembly>
    <members>
        <member name="T:QWhale.Syntax.CodeCompletion.IParameterInfo">
            <summary>
            Represents Parameter Info data related to popup hint controls.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.IListMembers">
            <summary>
            Represents data collection related to popup list box controls.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider">
            <summary>
            Represents properties and methods to provide data related to Code Completion popup listbox and popup hint controls.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.IExport">
            <summary>
            Represents methods to save text content.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.IExport.SaveFile(System.String)">
            <summary>
            When implemented by a class, saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.IExport.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves text content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.IExport.SaveStream(System.IO.TextWriter)">
            <summary>
            When implemented by a class, saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.IExport.SaveStream(System.IO.Stream)">
            <summary>
            When implemented by a class, saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.IExport.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            When implemented by a class, saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Syntax.IImport">
            <summary>
            Represents methods to load text content.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.IImport.LoadFile(System.String)">
            <summary>
            When implemented by a class, loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.IImport.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.IImport.LoadStream(System.IO.TextReader)">
            <summary>
            When implemented by a class, loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.IImport.LoadStream(System.IO.Stream)">
            <summary>
            When implemented by a class, loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.IImport.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            When implemented by a class, loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.ColumnVisible(System.Int32)">
            <summary>
            When implemented by a class, indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.GetColumnText(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns text from given item in the specified column.
            </summary>
            <param name="index">Specifies index of item.</param>
            <param name="column">Specifies index of column.</param>
            <returns>Text representing specified item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.GetText(System.Int32)">
            <summary>
            When implemented by a class, returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.GetImageIndex(System.Int32)">
            <summary>
            When implemented by a class, returns number of image that is displayed for item given by index.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Index of image corresponding to given item.</returns>
            <remarks>In this class method always return -1. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.GetDescription(System.Int32)">
            <summary>
            When implemented by a class, returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.GetName(System.Int32)">
            <summary>
            When implemented by a class, returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.GetPriority(System.Int32)">
            <summary>
            When implemented by a class, returns priority of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Integer representing priority of specified item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.IndexOfName(System.String,System.Boolean)">
            <summary>
            When implemented by a class, returns index of item within collection by it's name.
            </summary>
            <param name="name">Specifies Name property of item to find.</param>
            <param name="caseSensitive">Indicates whether search should be case sensitive.</param>
            <returns>Index of found item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.GetParent">
            <summary>
            When implemented by a class, returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.Sort">
            <summary>
            When implemented by a class, sorts elements in the list
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.Sort(System.Collections.Generic.IComparer{QWhale.Syntax.CodeCompletion.ICodeCompletionProviderItem})">
            <summary>
            When implemented by a class, sorts elements in the list using the specified comparer.
            </summary>
            <param name="comparer">The <c>IComparer</c> implementation to use when comparing elements.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.OnShowPopup(System.Object,QWhale.Syntax.ShowingEventArgs)">
            <summary>
            When implemented by a class, raises <c>ShowPopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ShowingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.OnClosePopup(System.Object,QWhale.Syntax.ClosingEventArgs)">
            <summary>
            When implemented by a class, raises <c>ClosePopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.ColumnCount">
            <summary>
            When implemented by a class, represents number of the columns.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.Strings">
            <summary>
            When implemented by a class, provides an indexed access to the text of default column.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.ImageIndexes">
            <summary>
            When implemented by a class, provides an indexed access to the image index of each column.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.Descriptions">
            <summary>
            When implemented by a class, provides an indexed access to the description of each column.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.ShowDescriptions">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether provider should display Description part in a form of tooltip near the popup control.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.SelIndex">
            <summary>
            When implemented by a class, represents the index specifying the currently selected item of the popup control.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.Images">
            <summary>
            When implemented by a class, gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.UseIndent">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether the multi-line text should be indented when inserting to the edit control.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.UseHtmlFormatting">
            <summary>
            When implemented by a class, gets or sets a boolean value indicating whether html formatting tags may appear in the text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.EditField">
            <summary>
            When implemented by a class, gets or sets a value indicating editable field of the code completion provider.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.EditPath">
            <summary>
            When implemented by a class, gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.FormatDisplayText">
            <summary>
            When implemented by a class, gets a boolean value indicating that rich text formatting should be applied to display text.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.ClosePopup">
            <summary>
            When implemented by a class, occurs when popup control is closed.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.CodeCompletion.ICodeCompletionProvider.ShowPopup">
            <summary>
            When implemented by a class, occurs when popup control is displayed.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMembers.CreateListMember">
            <summary>
            Initializes a new instance of the <c>ListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMembers.AddListMember">
            <summary>
            When implemented by a class, adds a new item to the <c>IListMembers</c> collection.
            </summary>
            <returns><c>IListMember</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMembers.InsertListMember(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>IListMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>IListMember</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMembers.ResetShowQualifiers">
            <summary>
            When implemented by a class, resets the <c>ShowQualifiers</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMembers.ResetShowResults">
            <summary>
            When implemented by a class, resets the <c>ShowResults</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMembers.ResetShowParams">
            <summary>
            When implemented by a class, resets the <c>ShowParams</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMembers.ResetShowHints">
            <summary>
            When implemented by a class, resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMembers.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>IListMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMembers.ShowQualifiers">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the "Qualifiers" column is visible.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMembers.ShowResults">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the "Results" column is visible.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMembers.ShowParams">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the "Params" column is visible.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMembers.ShowHints">
            <summary>
            When implemented by a class, gets or sets a value indicating whether popup listbox should display additional information for selected list member.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippets">
            <summary>
            Represents collection containing list of code snippets.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetsProvider">
            <summary>
            Represents base interface for code snippets provider.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetsProvider.FindByShortcut(System.String,System.Boolean)">
            <summary>
            When implemented by a class, gets a code snippet by its shortcut.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetsProvider.ShouldIndent(QWhale.Syntax.CodeCompletion.ICodeSnippet)">
            <summary>
            When implemented by a class, gets a boolean value indicating whether the multi-line snippet code should be indented when inserting to the edit control.
            </summary>
            <param name="snippet">Specifies given snippet</param>
            <returns>True if code should be indented, otherwise False</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippets.AddSnippet">
            <summary>
            When implemented by a class, adds a new item to the <c>ICodeSnippets</c> collection.
            </summary>
            <returns><c>ICodeSnippet</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippets.InsertSnippet(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippets</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippet</c> that is inserted.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippets.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippet</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider">
            <summary>
            Represents collection containing list of code snippets.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeCompletionProvider">
            <summary>
            Represents properties and methods to provide data related to Code Completion popup listbox and popup hint controls.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file into the snippet.
            </summary>
            <param name="fileName">Name of file to load.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file into the snippet.
            </summary>
            <param name="fileName">Name of file to load.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream into the snippet.
            </summary>
            <param name="reader">The TextReader object to read.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the given stream into the snippet.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the given stream into the snippet.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.SaveFile(System.String)">
            <summary>
            Saves content of the snippet to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves content of the snippet to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves content of the snippet to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.SaveStream(System.IO.Stream)">
            <summary>
            Saves content of the snippet to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves content of the snippet to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
            <remarks>In this class method always return false. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from given item in the specified column.
            </summary>
            <param name="index">Specifies index of the item.</param>
            <param name="column">Specifies index of the column.</param>
            <returns>Text representing specified item.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.GetText(System.Int32)">
            <summary>
            Returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.GetName(System.Int32)">
            <summary>
            Returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.GetPriority(System.Int32)">
            <summary>
            Returns priority of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Integer representing priority of specified item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.IndexOfName(System.String,System.Boolean)">
            <summary>
            Returns index of the item within collection by it's name.
            </summary>
            <param name="name">Specifies Name property of item to locate.</param>
            <param name="caseSensitive">Indicates whether search should be case sensitive.</param>
            <returns>Index of found item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.GetParent">
            <summary>
            Returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.OnClosePopup(System.Object,QWhale.Syntax.ClosingEventArgs)">
            <summary>
            Raises <c>ClosePopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.OnShowPopup(System.Object,QWhale.Syntax.ShowingEventArgs)">
            <summary>
            Raises <c>ShowPopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ShowingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.GetImageIndex(System.Int32)">
            <summary>
            Returns number of image that is displayed for item given by index.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Index of image corresponding to given item.</returns>
            <remarks>In this class method always return -1. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.GetDescription(System.Int32)">
            <summary>
            Returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
            <remarks>In this class method always return empty string. Descendant classes can override this method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.QWhale#Syntax#CodeCompletion#ICodeCompletionProvider#Sort">
            <summary>
            Represents properties and methods to provide data related to Code Completion popup listbox and popup hint controls.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.QWhale#Syntax#CodeCompletion#ICodeCompletionProvider#Sort(System.Collections.Generic.IComparer{QWhale.Syntax.CodeCompletion.ICodeCompletionProviderItem})">
            <summary>
            Represents properties and methods to provide data related to Code Completion popup listbox and popup hint controls.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.ColumnCount">
            <summary>
            Returns number of the columns.
            </summary>
            <remarks>In this class property value equals to 0. Descendant classes can override this method.</remarks>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.Strings">
            <summary>
            Provides an indexed access to the text of default column.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.ImageIndexes">
            <summary>
            Provides an indexed access to the image index of each column.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.Descriptions">
            <summary>
            Provides an indexed access to the description of each column.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.ShowDescriptions">
            <summary>
            Gets or sets a boolean value that indicates whether provider should display Description part in a form of tooltip near the popup control.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.SelIndex">
            <summary>
            Represents the index specifying the currently selected item of the popup control.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.Images">
            <summary>
            Gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.UseIndent">
            <summary>
            Gets or sets a value indicating whether the multi-line text should be indented when inserting to the edit control.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.UseHtmlFormatting">
            <summary>
            Gets or sets a boolean value indicating whether html formatting tags may appear in the text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.FormatDisplayText">
            <summary>
            Gets a boolean value indicating that rich text formatting should be applied to display text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.EditField">
            <summary>
            Gets or sets a value indicating editable field of the code completion provider.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.EditPath">
            <summary>
            Gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeCompletionProvider</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.ClosePopup">
            <summary>
            Occurs when popup control is closed.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.CodeCompletion.CodeCompletionProvider.ShowPopup">
            <summary>
            Occurs when popup control is displayed.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetMember)">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with specified parent.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.FindByShortcut(System.String,System.Boolean)">
            <summary>
            Gets a code snippet by its shortcut.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.ShouldIndent(QWhale.Syntax.CodeCompletion.ICodeSnippet)">
            <summary>
            Gets a boolean value indicating whether the multi-line snippet code should be indented when inserting to the edit control.
            </summary>
            <param name="snippet">Specifies given snippet</param>
            <returns>True if code should be indented, otherwise False</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.OnClosePopup(System.Object,QWhale.Syntax.ClosingEventArgs)">
            <summary>
            Checks for nested members and raises <c>ClosePopup</c> event if they are not found.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.GetDescription(System.Int32)">
            <summary>
            Returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.GetImageIndex(System.Int32)">
            <summary>
            Returns <c>ICodeSnippet.ImageIndex</c> from the snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from specified column and snippet.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
            <param name="column">Specifies index of the snippet.</param>
            <returns>Text representing specified snippet.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.GetText(System.Int32)">
            <summary>
            Returns value of <c>ICodeSnippetCode.Code</c> of the code snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.GetName(System.Int32)">
            <summary>
            Returns value <c>ICodeSnippetHeader.Title</c> of the code snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.GetParent">
            <summary>
            Returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.ColumnCount">
            <summary>
            Returns number of the columns. In this class <c>ColumnCount</c> always return 1.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.EditPath">
            <summary>
            Gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetsProvider.Images">
            <summary>
            Gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo">
            <summary>
            Contains information about <c>ICodeSnippetMember</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetMemberInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetMember)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetMemberInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetMember</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.Name">
            <summary>
            Stores <c>ICodeSnippetMember.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.Path">
            <summary>
            Stores <c>ICodeSnippetMember.Path</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.ImageIndex">
            <summary>
            Stores <c>ICodeSnippetMember.ImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.Members">
            <summary>
            Stores <c>ICodeSnippetMember.Members</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetMemberInfo.Snippets">
            <summary>
            Stores <c>ICodeSnippetMember.Snippets</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexScheme">
            <summary>
            When implemented by a class, represents properties and methods to specify rules for text lexical analysis.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexScheme.IsEmpty">
            <summary>
            When implemented by a class, indicates whether <c>ILexScheme</c> is empty , that is does not contain any styles, states, author, copyright, and description information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexScheme.Clear">
            <summary>
            When implemented by a class, removes all states and styles from this <c>LexScheme</c> and sets other properties to default values.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexScheme.Update">
            <summary>
            When implemented by a class, causes associated <c>ILexer</c> to update its state.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexScheme.IsPlainText(System.Int32)">
            <summary>
            When implemented by a class, indicates whether <c>PlainText</c> property of lexical style given by its index is true.
            </summary>
            <param name="style">index of lexical style to check-up.</param>
            <returns>True if lexical style <c>PlainText</c> property is true; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.Author">
            <summary>
            When implemented by a class, gets or sets author of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.Name">
            <summary>
            When implemented by a class, gets or sets <c>ILexScheme</c> name.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.Desc">
            <summary>
            When implemented by a class, gets or sets description of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.Copyright">
            <summary>
            When implemented by a class, gets or sets copyright of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.FileExtension">
            <summary>
            When implemented by a class, gets or sets string value indicating associated file extension of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.FileType">
            <summary>
            When implemented by a class, gets or sets string value indicating associated file type of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.Version">
            <summary>
            When implemented by a class, gets or sets version of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.Styles">
            <summary>
            When implemented by a class, gets or sets collection of lexical styles.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.States">
            <summary>
            When implemented by a class, gets or sets collection of lexical states.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexScheme.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ILexScheme</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetImport">
            <summary>
            Represents imported namespace used by an IntelliSense Code Snippet.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeCompletionProviderItem">
            <summary>
            Stores particular code completion item.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionProviderItem.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of this <c>ICodeCompletionProviderItem</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetImport.Namespace">
            <summary>
            When inplemented by a class, specifies the namespace used by the code snippet
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Design.SyntaxBuilderConsts">
            <summary>
            Contains default constants related to Syntax Builder editor
            </summary>
        </member>
        <member name="T:QWhale.Syntax.SyntaxAttributes">
            <summary>
            Represents collection containing list of syntax attributes.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ISyntaxAttributes">
            <summary>
            Represents collection containing list of syntax attributes.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxAttributes.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, updates all syntax errors starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxAttributes.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all syntax errors from the error collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax errors.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxAttributes.Sort">
            <summary>
            Sorts the syntax errors.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxAttributes.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates specified position by DeltaX and DeltaY values for any attributes in the collection.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxAttributes.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all attributes from specified region.
            </summary>
            <param name="rect">Specifies rectangle to remove nodes from.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxAttributes.QWhale#Syntax#ISyntaxAttributes#Sort">
            <summary>
            Represents collection containing list of syntax attributes.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ListMembers">
            <summary>
            Represents data collection related to popup list box controls.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.#ctor">
            <summary>
            Initializes a new instance of the <c>ListMembers</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.GetImageIndex(System.Int32)">
            <summary>
            Returns index of image that is displayed for item given by Index.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Index of image corresponding to given item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.GetDescription(System.Int32)">
            <summary>
            Returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.GetName(System.Int32)">
            <summary>
            Returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.GetPriority(System.Int32)">
            <summary>
            Returns priority of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Integer representing priority of specified item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.GetText(System.Int32)">
            <summary>
            Returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
            <remarks>In this class method returns the same value with <c>GetName</c> method.</remarks>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from given list member in the specified column.
            </summary>
            <param name="index">Specifies index of list member.</param>
            <param name="column">Specifies index of column.</param>
            <returns>Text representing specified list member.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.CreateListMember">
            <summary>
            Initializes a new instance of the <c>ListMember</c> class with default settings.
            </summary>
            <returns><c>IListMember</c> that represents this new instance.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.AddListMember">
            <summary>
            Adds a new item to the <c>ListMembers</c> collection.
            </summary>
            <returns><c>IListMember</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.InsertListMember(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ListMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>IListMember</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.ResetShowQualifiers">
            <summary>
            Resets the <c>ShowQualifiers</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.ResetShowResults">
            <summary>
            Resets the <c>ShowResults</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.ResetShowParams">
            <summary>
            Resets the <c>ShowParams</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMembers.ResetShowHints">
            <summary>
            Resets the <c>ShowHints</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMembers.ColumnCount">
            <summary>
            Represents number of the columns. In this class <c>ColumnCount</c> always return 4.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMembers.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>IListMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMembers.ShowQualifiers">
            <summary>
            Gets or sets a value indicating whether the "Qualifiers" column is visible.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMembers.ShowResults">
            <summary>
            Gets or sets a value indicating whether the "Results" column is visible.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMembers.ShowParams">
            <summary>
            Gets or sets a value indicating whether the "Params" column is visible.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMembers.ShowHints">
            <summary>
            Gets or sets a value indicating whether popup listbox should display additional information for selected list member.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMembers.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ListMembers</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetTypes">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetTypes">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetTypes.AddSnippetType">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetTypes</c> collection.
            </summary>
            <returns><c>ICodeSnippetType</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetTypes.InsertSnippetType(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetTypes</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetType</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetTypes.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetTypes</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetTypes.AddSnippetType">
            <summary>
            Adds new item to the specified position within the <c>ICodeSnippetTypes</c> collection.
            </summary>
            <returns><c>ICodeSnippetType</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetTypes.InsertSnippetType(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetTypes</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetType</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlParameterMemberInfo">
            <summary>
            Contains information about <c>IParameterMember</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlParameterMemberInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlParameterMemberInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlParameterMemberInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlParameterMemberInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlParameterMemberInfo.#ctor(QWhale.Syntax.CodeCompletion.IParameterMember)">
            <summary>
            Initializes a new instance of the <c>XmlParameterMemberInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IParameterMember</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlParameterMemberInfo.Name">
            <summary>
            Stores <c>IParameterMember.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlParameterMemberInfo.Description">
            <summary>
            Stores <c>IParameterMember.Description</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlParameterMemberInfo.Qualifier">
            <summary>
            Stores <c>IParameterMember.Qualifier</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlParameterMemberInfo.DataType">
            <summary>
            Stores <c>IParameterMember.DataType</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlParameterMemberInfo.Modifiers">
            <summary>
            Stores <c>IParameterMember.Modifiers</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlListMemberInfo">
            <summary>
            Contains information about <c>IListMember</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMemberInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMemberInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMemberInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlListMemberInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMemberInfo.#ctor(QWhale.Syntax.CodeCompletion.IListMember)">
            <summary>
            Initializes a new instance of the <c>XmlListMemberInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IListMember</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMemberInfo.ShouldSerializeParameters">
            <summary>
            Indicates whether the <c>Parameters</c> property should be persisted.
            </summary>
            <returns>True if <c>Parameters</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.Name">
            <summary>
            Stores <c>IListMember.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.Description">
            <summary>
            Stores <c>IListMember.Description</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.Qualifier">
            <summary>
            Stores <c>IListMember.Qualifier</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.ParamText">
            <summary>
            Stores <c>IListMember.ParamText</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.DisplayText">
            <summary>
            Stores <c>IListMember.DisplayText</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.DataType">
            <summary>
            Stores <c>IListMember.DataType</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.Overloads">
            <summary>
            Stores <c>IListMember.Overloads</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.MemberType">
            <summary>
            Stores <c>IListMember.MemberType</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.Attributes">
            <summary>
            Stores <c>IListMember.Attributes</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.ImageIndex">
            <summary>
            Stores <c>IListMember.ImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.Priority">
            <summary>
            Stores <c>IListMember.ImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.CurrentParamIndex">
            <summary>
            Stores <c>IListMember.CurrentParamIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMemberInfo.Parameters">
            <summary>
            Stores <c>ICodeSnippets</c> indexer.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexToken">
            <summary>
            Defines types of lexical token that represents result lexical analysis of each element within the text.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.Identifier">
            <summary>
            Specifies that lexical element represents identifier.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.Number">
            <summary>
            Specifies that lexical element represents number.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.Resword">
            <summary>
            Specifies that lexical element represents key word.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.Comment">
            <summary>
            Specifies that lexical element represents comment.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.XmlComment">
            <summary>
            Specifies that lexical element represents xml comment.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.Symbol">
            <summary>
            Specifies that lexical element represents particular symbol.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.Whitespace">
            <summary>
            Specifies that lexical element represents blank space between other lexical tokens.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.String">
            <summary>
            Specifies that lexical element represents string literal.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.Directive">
            <summary>
            Specifies that lexical element represents directive.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.LexToken.Include">
            <summary>
            Specifies that lexical element represents include header.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexer">
            <summary>
            Represents properties and methods for performing lexical analysis of the specified text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexer.ParseText(System.Int32,System.Int32,System.String,System.Int16[]@)">
            <summary>
            When implemented by a class, performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="colorData">Receives color data representing lexical information of the given text.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexer.ParseText(System.Int32,System.Int32,System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            When implemented by a class, performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="pos">Starting position.</param>
            <param name="len">Integer value to receive length of parsed element.</param>
            <param name="style">Retrieves style of text being parsed.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexer.RemovePlainText(System.String,System.Int16[])">
            <summary>
            When implemented by a class, removes all plain (string constants or comments) parst of text from specified text.
            </summary>
            <param name="s">text to process.</param>
            <param name="textData">color information of given text.</param>
            <returns>String without plain parts.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexer.ResetDefaultState">
            <summary>
            When implemented by a class, resets the <c>DefaultState</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexer.DefaultState">
            <summary>
            When implemented by a class, gets or sets default state of the <c>ILexer</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexer.Scheme">
            <summary>
            When implemented by a class, gets or sets list of rules for lexical analysis.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexer.SerializationInfo">
            <summary>
            When implemented by a class, gets or sets an xml representation of ILexer
            </summary>
        </member>
        <member name="E:QWhale.Syntax.Lexer.ILexer.Parse">
            <summary>
            When implemented by a class, occurs when text line is parsed, allowing to modify colors/styles information for the parsed line.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ISyntaxAttribute">
            <summary>
            Represents properties to describe a particular attribute of language element.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxAttribute.Name">
            <summary>
            When implemented by a class, get or sets attribute name.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxAttribute.Value">
            <summary>
            When implemented by a class, get or sets value of the attribute.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxAttribute.Position">
            <summary>
            When implemented by a class, get or sets attribute position in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxAttribute.EndPosition">
            <summary>
            When implemented by a class, get attribute end position in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxAttribute.Range">
            <summary>
            When implemented by a class, gets attribute scope.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.TextStyle">
            <summary>
            Defines additional flags for text fragments.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.WhiteSpace">
            <summary>
            Indicates that text fragment consists of whitespace symbol.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.Tabulation">
            <summary>
            Indicates that text fragment consists of tab symbol.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.OutlineSection">
            <summary>
            Indicates that text fragment contains outline section.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.MisSpelledWord">
            <summary>
            Indicates that text fragment contains misspelled word.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.HyperText">
            <summary>
            Indicates that text fragment contains hypertext.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.Brace">
            <summary>
            Indicates that text fragment contains matching brace.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.WaveLine">
            <summary>
            Indicates that text fragment contains wave line.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.TextStyle.CodeSnippet">
            <summary>
            Indicates that text fragment contains code snippet.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ItemState">
            <summary>
            Defines state of the <c>StrItem</c> object, represening individual line in the Source.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ItemState.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ItemState.Parsed">
            <summary>
            Specifies that <c>StrItem</c> object is already parsed.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ItemState.ReadOnly">
            <summary>
            Specifies that <c>StrItem</c> object is read-only.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.IStringItem">
            <summary>
            Represents properties and methods of individual line in the Text Source.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.IStringItem.SetTextStyle(System.Int32,System.Int32,QWhale.Syntax.TextStyle)">
            <summary>
            When implemented by a class, sets text style to text fragment.
            </summary>
            <param name="start">Specifies the first character in the string.</param>
            <param name="len">Specifies number of characters in the string.</param>
            <param name="style">Specifies style to set.</param>
        </member>
        <member name="M:QWhale.Syntax.IStringItem.ClearTextStyle(System.Int32,System.Int32,QWhale.Syntax.TextStyle)">
            <summary>
            When implemented by a class, removes color information from text fragment.
            </summary>
            <param name="start">Specifies the first character in the string.</param>
            <param name="len">Specifies number of characters in in the string.</param>
            <param name="style">Specifies style to clear.</param>
        </member>
        <member name="M:QWhale.Syntax.IStringItem.TextStyleAt(System.Int32)">
            <summary>
            When implemented by a class, retrieves text style from the text.
            </summary>
            <param name="pos">Specifies position in the string to get text style.</param>
            <return>TextStyle at given position</return>
        </member>
        <member name="P:QWhale.Syntax.IStringItem.String">
            <summary>
            When implemented by a class, gets or sets string content of the <c>IStrItem</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IStringItem.TextData">
            <summary>
            When implemented by a class, gets or sets color information of the <c>IStrItem</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IStringItem.State">
            <summary>
            When implemented by a class, gets or sets current state of the <c>IStrItem</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IStringItem.LexState">
            <summary>
            When implemented by a class, gets or sets index of lexical state at item end.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IStringItem.PrevLexState">
            <summary>
            When implemented by a class, gets or sets index of lexical state at item start.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.MemberAttribute.None">
            <summary>
            No attributes
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.MemberAttribute.CanRead">
            <summary>
            Specifies that property readable
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.MemberAttribute.CanWrite">
            <summary>
            Specifies that property writeable
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.MemberAttribute.NoDescription">
            <summary>
            Specifies that no description should be generated for a member
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.MemberAttribute.NoIntellisense">
            <summary>
            Specifies that member is hidden for intellisense
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.IListMember">
            <summary>
            Represents properties and methods for a particular list member in the data collection of the code completion popups.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMember.GetTemplate(System.Boolean)">
            <summary>
            When implemented by a class, return member's template.
            </summary>
            <param name="compact">Indicates if template is in a compact form.</param>
            <returns>String value that represents member template.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMember.GetParamText(System.Boolean)">
            <summary>
            When implemented by a class, converts <c>Parameters</c> property to a single string.
            </summary>
            <param name="useFormatting">Specifies whether to use html formatting.</param>
            <returns>Returns <c>Parameters</c> in the form of comma separated text, framed by parens.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IListMember.AddDescription(System.String)">
            <summary>
            When implemented by a class, appends text to the member description.
            </summary>
            <param name="text">text to add</param>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of the <c>IListMember</c>. Useful to find necessary item within the <c>IListMember</c> collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.DisplayText">
            <summary>
            When implemented by a class, gets or sets a string value displayed as a "name" part of <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.DataType">
            <summary>
            When implemented by a class, gets or sets a string value that specifies data type of the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.Qualifier">
            <summary>
            When implemented by a class, gets or sets a string value that specifies access modifiers of the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.Overloads">
            <summary>
            When implemented by a class, gets or sets number of overloading members <c>IListMember</c> in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.CustomData">
            <summary>
            When implemented by a class, gets or sets an object that can hold a user defined data attached to the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.ParamText">
            <summary>
            When implemented by a class, gets or sets a string value that specifies comma separated list of parameters of the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.Attributes">
            <summary>
            When implemented by a class, gets or sets additional attributes associated with a member.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.Parameters">
            <summary>
            When implemented by a class, gets or sets a collection of parameters of this <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.CurrentParamIndex">
            <summary>
            When implemented by a class, gets or sets index of current parameter in the parameters collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the <c>IListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.MemberType">
            <summary>
            When implemented by a class, gets or sets the integer value representing type of the member.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.Owner">
            <summary>
            Wnen implemented by a class, gets IListMembers instance owning the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IListMember.Priority">
            <summary>
            When implemented by a class, gets or sets priority of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetObjects">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetObject</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetObjects.AddObject">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetObjects</c> collection.
            </summary>
            <returns><c>ICodeSnippetObject</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetObjects.InsertObject(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetObject</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetObject</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetLiterals">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetLiteral</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetLiterals.AddLiteral">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetLiterals</c> collection.
            </summary>
            <returns><c>ICodeSnippetLiteral</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetLiterals.InsertLiteral(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetLiterals</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetLiteral</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletionType">
            <summary>
            Specifies types of code completion window used to complete language elements.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionType.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionType.CompleteWord">
            <summary>
            Specifies that code completion window displayed to complete the rest of a variable, command, or function name once you have entered enough characters to disambiguate the term.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionType.ListMembers">
            <summary>
            Specifies that code completion window displayed with a list of valid member variables or functions for the appropriate class, struct, union or namespace.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionType.ParameterInfo">
            <summary>
            Specifies that code completion window displayed with information about the number, names, and types of parameters required by a function or attribute.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionType.QuickInfo">
            <summary>
            Specifies that code completion window displayed with information in a form of short description.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionType.CodeSnippets">
            <summary>
            Specifies that code completion window displayed with a list of templates with commonly used programming statements that can be inserted into the code.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionType.SpecialListMembers">
            <summary>
            Specifies spcial cases for code completion window.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionType.CompleteComment">
            <summary>
            Specifies that xml comment template to be inserted.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletionArgs">
            <summary>
            Provides data for the code completion events.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.Provider">
            <summary>
            Represents the object that provides data for code completion.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.KeyChar">
            <summary>
            Represents the character typed in the Edit control.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.CompletionType">
            <summary>
            Represents type of code completion window.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.Interval">
            <summary>
            Represents the delay, in miliiseconds before displaying code completion window. Set Interval to 0 to make code completion window appearing immediately.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.Handled">
            <summary>
            Represents a value indicating whether the CodeCompletion event is handled. If the event is handled, code completion box will not appear.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.NeedShow">
            <summary>
            Represents a value indicating whether the code completion popup need showing.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.ToolTip">
            <summary>
            Represents a value indicating whether code completion window should popup in the form of the tooltip.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.SelIndex">
            <summary>
            Represents the index specifying the currently selected item of code completion box.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.UseFormat">
            <summary>
            Represents a value indicating whether the multi-line text should be formatted when inserting to the edit control.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.StartPosition">
            <summary>
            Specifies position within the text where code competion window is valid.
            <seealso cref="F:QWhale.Syntax.CodeCompletionArgs.EndPosition"/>
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.EndPosition">
            <summary>
            Specifies position within the text where code competion window is valid.
            <seealso cref="F:QWhale.Syntax.CodeCompletionArgs.StartPosition"/>
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.DisplayPosition">
            <summary>
            Specifies position within the text where code competion window is displayed.
            <seealso cref="F:QWhale.Syntax.CodeCompletionArgs.StartPosition"/>
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.NeedReparse">
            <summary>
            Specifies whether current scope should be reparsed when executing code completion request.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionArgs.Lexer">
            <summary>
            Specifies lexer used for drawing code completion windows.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletionArgs.Init">
            <summary>
            Initializes <c>CodeCompletionArgs</c> with default values.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletionArgs.Init(QWhale.Syntax.CodeCompletionType,System.Drawing.Point,System.Boolean)">
            <summary>
            Initializes <c>CodeCompletionArgs</c> with specified parameters.
            </summary>
            <param name="completionType">Specifies code completion type.</param>
            <param name="position">Specifies start position.</param>
            <param name="needReparse">Specifies whether current scope should be reparsed when executing code completion request.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletionArgs.Init(QWhale.Syntax.CodeCompletionType,System.Drawing.Point)">
            <summary>
            Initializes <c>CodeCompletionArgs</c> with specified parameters.
            </summary>
            <param name="completionType">Specifies code completion type.</param>
            <param name="position">Specifies start position.</param>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletionEvent">
            <summary>
            Represents a method that will handle the <c>SyntaxEdit.NeedCodeCompletion</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>CodeCompletionArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral">
            <summary>
            Represents literal that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetLiteral">
            <summary>
            Represents properties and methods describing literal that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetLiteral.Default">
            <summary>
            When implemented by a class, specifies the default value of the literal or object for an IntelliSense Code Snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetLiteral.Function">
            <summary>
            When implemented by a class, specifies a function to execute when the literal or object receives focus in the Editor.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetLiteral.ID">
            <summary>
            When implemented by a class, specifies the unique identifier for the object or literal.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetLiteral.Type">
            <summary>
            When implemented by a class, Specifies the type of the object.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetLiteral.ToolTip">
            <summary>
            When implemented by a class, specifies the ToolTip description to be associated with the literal in the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetLiteral.Editable">
            <summary>
            When implemented by a class, specifies whether literal is editable or not.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetLiteral</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.Default">
            <summary>
            Specifies the default value of the literal or object for an IntelliSense Code Snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.Function">
            <summary>
            Specifies a function to execute when the literal or object receives focus in the Editor.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.ID">
            <summary>
            Specifies the unique identifier for the object or literal..
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.Type">
            <summary>
            Specifies the type of the object.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.ToolTip">
            <summary>
            Specifies the ToolTip description to be associated with the literal in the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.Editable">
            <summary>
            Specifies whether literal is editable or not.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetLiteral.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetLiteral</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetImports">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetImport</c> objects.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetImports">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetImport</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetImports.AddImport">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetImports</c> collection.
            </summary>
            <returns><c>ICodeSnippetImport</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetImports.InsertImport(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetImports</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetImport</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetImports.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetImports</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetImports.AddImport">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetImports</c> collection.
            </summary>
            <returns><c>ICodeSnippetImport</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetImports.InsertImport(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetImports</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetImport</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.IQuickInfoItem">
            <summary>
            Stores simple text data related to popup hint.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IQuickInfoItem.Text">
            <summary>
            When implemented by a class, gets or sets content of the <c>IQuickInfoItem</c>.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetTypeInfo">
            <summary>
            Contains information about <c>ICodeSnippetType</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetTypeInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetTypeInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetTypeInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetTypeInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetTypeInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetType)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetTypeInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetType</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetTypeInfo.SnippetType">
            <summary>
            Stores <c>ICodeSnippetType.SnippetType</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetCodeInfo">
            <summary>
            Contains information about <c>ICodeSnippetCode</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetCodeInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetCodeInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetCodeInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetCodeInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetCodeInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetCode)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetCodeInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetCode</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetCodeInfo.Code">
            <summary>
            Stores <c>ICodeSnippetCode.Code</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexSyntaxBlock">
            <summary>
            Represents properties and methods for individual syntax block with collection of syntax blocks.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexSyntaxBlock.FindResword(System.String)">
            <summary>
            Locates <c>LexReswordSet</c> containing given resword.
            </summary>
            <param name="resword">The resword to search for.</param>
            <returns>Index of <c>LexReswordSet</c> if resword collection contains specified resword; otherwise - 1.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexSyntaxBlock.AddExpression(System.String)">
            <summary>
            When implemented by a class, adds new element to the expression collection.
            </summary>
            <param name="expression">Regular expression to add.</param>
            <returns>Index of added element in the expression collection.</returns>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.Desc">
            <summary>
            When implemented by a class, gets or sets description of the <c>ILexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.Style">
            <summary>
            When implemented by a class, gets or sets an <c>ILexStyle</c> object, applicable for text that matches <c>ILexSyntaxBlock</c> expression.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.LeaveState">
            <summary>
            When implemented by a class, gets or sets <c>ILexState</c> object that specifies lexical resulting state after lexical analyzer locates text, that matches to the <c>ILexSyntaxBlock.Expression</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.ReswordSets">
            <summary>
            When implemented by a class, gets or sets collection of the <c>ILexReswordSet</c> object containing reserwed words.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.Expressions">
            <summary>
            When implemented by a class, gets or sets collection of the expressions used by <c>ILexer</c> to parse the text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.Expression">
            <summary>
            When implemented by a class, represents a collective regular expression pattern for the <c>ILexSyntaxBlock.Expressions</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.Index">
            <summary>
            When implemented by a class, represents index of the <c>ILexSyntaxBlock</c> within the lexical syntax block collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.CaseSensitive">
            <summary>
            When implemented by a class, gets or sets a value indicating whether <c>ILexSyntaxBlock</c> is case-sensitive or not.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.State">
            <summary>
            When implemented by a class, gets or sets <c>ILexState</c> owning this <c>ILexSyntaxBlock</c>
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexSyntaxBlock.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ILexSyntaxBlock</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexStyles">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexStyle</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStyles.AddLexStyle">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ILexStyles</c> collection.
            </summary>
            <returns><c>ILexStyle</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStyles.InsertLexStyle(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ILexStyles</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexStyle</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStyles.FindLexStyle(System.String)">
            <summary>
            When implemented by a class, finds <c>ILexStyle</c> by its name.
            </summary>
            <param name="name">Name of the <c>ILexStyle</c>.</param>
            <returns><c>ILexStyle</c> that is found.</returns>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexState">
            <summary>
            Represents an individual lexical state with collection of lexical states.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexState">
            <summary>
            Represents properties and methods for individual lexical state with collection of lexical states.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexState.ResetCaseSensitive">
            <summary>
            When implemented by a class, resets the <c>CaseSensitive</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.Desc">
            <summary>
            When implemented by a class, gets or sets description of the <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.CaseSensitive">
            <summary>
            When implemented by a class, gets or sets a value indicating whether the analizer should perform case sensitive parsing for this <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.Expression">
            <summary>
            When implemented by a class, represents a collective regular expression pattern for the <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.SyntaxBlocks">
            <summary>
            When implemented by a class, gets or sets a collection of lexical syntax blocks.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.Regex">
            <summary>
            When implemented by a class, represents a regular expression that contains <c>Expression</c> as a pattern.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.Index">
            <summary>
            When implemented by a class, represents index of the <c>ILexState</c> within the lexical state collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.Scheme">
            <summary>
            When implemented by a class, gets or sets <c>ILexScheme</c> that owns this <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.Blocks">
            <summary>
            When implemented by a class, represents collection of Syntax Blocks associated with this <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexState.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ILexState</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexState.#ctor">
            <summary>
            Initializes a new instance of the <c>LexState</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexState.#ctor(QWhale.Syntax.Lexer.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexState</c> class with specified owner.
            </summary>
            <param name="scheme"><c>ILexScheme</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexState.ResetCaseSensitive">
            <summary>
            Resets the <c>CaseSensitive</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.Scheme">
            <summary>
            Gets or sets <c>ILexScheme</c> that owns this <c>LexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.Name">
            <summary>
            Gets or sets name of the <c>LexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.Desc">
            <summary>
            Gets or sets description of the <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether the analizer should perform case sensitive parsing for this <c>LexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.Expression">
            <summary>
            Represents a collective regular expression pattern for the <c>LexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.SyntaxBlocks">
            <summary>
            Gets or sets a collection of lexical syntax blocks.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.Regex">
            <summary>
            Represents a regular expression that contains <c>Expression</c> as a pattern.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.Index">
            <summary>
            Represents index of the <c>LexState</c> within the lexical state collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.Blocks">
            <summary>
            Represents collection of Syntax Blocks associated with this <c>ILexState</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexState.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>LexState</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing LexScheme's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Design.SyntaxBuilderEditor">
            <summary>
            Provides a user interface to edit lexer scheme in design time.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Design.SyntaxBuilderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            Edits the specified object's value using the scheme editor.
            </summary>
            <param name="context">An <c>ITypeDescriptorContext</c> that can be used to gain additional context information.</param>
            <param name="provider">An <c>IServiceProvider</c> that this editor can use to obtain services. </param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:QWhale.Syntax.Design.SyntaxBuilderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            Gets the editor style used by the EditValue method.
            </summary>
            <param name="context">An ITypeDescriptorContext that can be used to gain additional context information. </param>
            <returns>UITypeEditorEditStyle.Modal if context instance is assgined</returns>
        </member>
        <member name="T:QWhale.Syntax.SyntaxErrors">
            <summary>
            Represents collection containing list of syntax errors.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ISyntaxErrors">
            <summary>
            Represents collection containing list of syntax errors.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxErrors.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, updates all syntax errors starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxErrors.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxError})">
            <summary>
            When implemented by a class, updates all syntax errors starting from specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxErrors.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all syntax errors from the error collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax errors.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxErrors.BlockDeleting(System.Drawing.Rectangle,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxError})">
            <summary>
            When implemented by a class, removes all syntax errors from the error collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax errors.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxErrors.FindErrorAt(System.Drawing.Point,System.Boolean,System.Int32@,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxError})">
            <summary>
            Locates error at specified position.
            </summary>
            <param name="position">Position to locate error.</param>
            <param name="exact">Specifies whether search should be precise.</param>
            <param name="index">Receives index of syntax error in the error collection.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxErrors.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Updates specified position by DeltaX and DeltaY values for any errors in the collection.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxErrors.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all errors from specified region.
            </summary>
            <param name="rect">Specifies rectangle to remove errors from.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxErrors.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxError})">
            <summary>
            Updates all syntax errors starting from specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxErrors.BlockDeleting(System.Drawing.Rectangle,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxError})">
            <summary>
            Removes all syntax errors from the error collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax errors.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxErrors.FindErrorAt(System.Drawing.Point,System.Boolean,System.Int32@,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxError})">
            <summary>
            When implemented by a class, locates error at specified position.
            </summary>
            <param name="position">Position to locate error.</param>
            <param name="exact">Specifies whether search should be precise.</param>
            <param name="index">Receives index of syntax error in the error collection.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Syntax.IOutlineRange">
            <summary>
            Represents individual outlining section that can appear in the Edit control.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IOutlineRange.Text">
            <summary>
            When implemented by a class, represents text substituting collapsed outline section.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IOutlineRange.DisplayText">
            <summary>
            When implemented by a class, represents text substituting collapsed outline section if outline buttons are displayed.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IOutlineRange.Visible">
            <summary>
            When implemented by a class, gets or sets a value indicating whether outline section is visible (expanded).
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IOutlineRange.Level">
            <summary>
            When implemented by a class, represents level of outline nesting for the outline section.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.TextUndo">
            <summary>
            Represents single change of the text fragment
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ITextUndo">
            <summary>
            Represents single change of the text fragment
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ITextUndo.Start">
            <summary>
            When implemented by a class, represents starting position of the text fragment being changed.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ITextUndo.Len">
            <summary>
            When implemented by a class, specifies length of the text fragment to delete.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ITextUndo.Text">
            <summary>
            When implemented by a class, specifies text fragment to insert.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.TextUndo.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            Initializes TextUndo class with specified parameters.
            </summary>
            <param name="start">Specifies start position of text fragment to delete.</param>
            <param name="len">Specifies length of the text fragment to delete.</param>
            <param name="text">Specifies text fragment to insert</param>
        </member>
        <member name="P:QWhale.Syntax.TextUndo.Start">
            <summary>
            Represents starting position of the text fragment being changed.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.TextUndo.Len">
            <summary>
            Specifies length of the text fragment to delete.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.TextUndo.Text">
            <summary>
            Specifies length of the text fragment to insert.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlLexSchemeInfo">
            <summary>
            Contains information about <c>ILexScheme</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSchemeInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSchemeInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSchemeInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLexSchemeInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSchemeInfo.#ctor(QWhale.Syntax.Lexer.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>XmlLexSchemeInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexScheme</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSchemeInfo.ShouldSerializeStyles">
            <summary>
            Indicates whether the <c>Styles</c> property should be persisted.
            </summary>
            <returns>True if <c>Styles</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSchemeInfo.ShouldSerializeStates">
            <summary>
            Indicates whether the <c>States</c> property should be persisted.
            </summary>
            <returns>True if <c>States</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.Author">
            <summary>
            Stores <c>ILexScheme.Author</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.Name">
            <summary>
            Stores <c>ILexScheme.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.Desc">
            <summary>
            Stores <c>ILexScheme.Desc</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.Copyright">
            <summary>
            Stores <c>ILexScheme.Copyright</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.FileExtension">
            <summary>
            Stores <c>ILexScheme.FileExtension</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.FileType">
            <summary>
            Stores <c>ILexScheme.FileType</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.Version">
            <summary>
            Stores <c>ILexScheme.Version</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.Styles">
            <summary>
            Stores <c>ILexScheme.Styles</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSchemeInfo.States">
            <summary>
            Stores <c>ILexScheme.States</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippet">
            <summary>
            Represents properties and methods describing particular code snippet in the snippets collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.Header">
            <summary>
            When implemented by a class, gets a header associated with the snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.Declarations">
            <summary>
            When implemented by a class, specifies the literals and objects that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.Imports">
            <summary>
            When implemented by a class, contains the imported namespaces for the code snippet
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.References">
            <summary>
            When implemented by a class, contains information about assembly references for the code snippet
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.Code">
            <summary>
            When implemented by a class, gets or sets a string value that specifies code of the template. The code completion control, that holds a templates collection inserts code when user accepts the input.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.Description">
            <summary>
            When implemented by a class, gets description of the <c>ICodeSnippet</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the template.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.CustomData">
            <summary>
            When implemented by a class, gets or sets an object that can hold a user defined data attached to the template.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippet.Parent">
            <summary>
            When implemented by a class, gets or sets a parent of the <c>ICodeSnippet</c>.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.SyntaxConsts">
            <summary>
            Contains default constants related to lexical and syntax analyzers.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ListMember">
            <summary>
            Implements properties and methods for a particular list member in the data collection of the code completion popups.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMember.#ctor">
            <summary>
            Initializes a new instance of the <c>ListMember</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMember.#ctor(QWhale.Syntax.CodeCompletion.IListMembers)">
            <summary>
            Initializes a new instance of the <c>ListMember</c> class with specified owner.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMember.GetTemplate(System.Boolean)">
            <summary>
            Return member's template.
            </summary>
            <param name="addBase">Indicates if template includes base element</param>
            <returns>String value that represents member template.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMember.GetParamText(System.Boolean)">
            <summary>
            Converts <c>Parameters</c> property to a single string.
            </summary>
            <param name="useFormatting">Specifies whether to use html formatting tags</param>
            <param name="addTypes">Specifies whether to use parameter types.</param>
            <returns>Returns <c>Parameters</c> in the form of comma separated text, framed by parens.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMember.AddDescription(System.String)">
            <summary>
            Appends text to the member description.
            </summary>
            <param name="text">text to add</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ListMember.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.Name">
            <summary>
            Gets or sets a string value that specifies the name of the <c>ListMember</c>. Useful to find necessary item within the <c>ListMember</c> collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.DisplayText">
            <summary>
            Gets or sets a string value displayed as a "name" part of <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.DataType">
            <summary>
            Gets or sets a string value that specifies data type of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.Description">
            <summary>
            Gets or sets a string value that specifies short description of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.Qualifier">
            <summary>
            Gets or sets a string value that specifies access modifiers of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.Overloads">
            <summary>
            Gets or sets number of overloading members <c>ListMember</c> in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.CustomData">
            <summary>
            Gets or sets an object that can hold a user defined data attached to the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.ParamText">
            <summary>
            Gets or sets a string value that specifies comma separated list of parameters of the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.Parameters">
            <summary>
            Gets or sets a collection of parameters of this <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.CurrentParamIndex">
            <summary>
            Gts or sets index of current parameter in the parameters collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.MemberType">
            <summary>
            Gets or sets the integer value representing type of the member.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.Priority">
            <summary>
            Gets or sets priority for the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.Attributes">
            <summary>
            Gets or sets additional attributes associated with a member.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.Owner">
            <summary>
            Gets IListMembers instance owning the <c>ListMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ListMember.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ListMember</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetReferences">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetReference</c> objects.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetReferences">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetReference</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetReferences.AddReference">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetReferences</c> collection.
            </summary>
            <returns><c>ICodeSnippetReference</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetReferences.InsertReference(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetReferences</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetReference</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetReferences.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetReferences</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetReferences.AddReference">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetReferences</c> collection.
            </summary>
            <returns><c>ICodeSnippetReference</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetReferences.InsertReference(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetReferences</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetReference</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetReference">
            <summary>
            Contains information about assembly references for the code snippet.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetReference">
            <summary>
            Contains information about assembly references for the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetReference.Assembly">
            <summary>
            When inplemented by a class, contains the name of the assembly referenced by the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetReference.Url">
            <summary>
            When inplemented by a class, contains a URL that provides more information about the referenced assembly.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetReference.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetReference</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetReference.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetReference.Assembly">
            <summary>
            Contains the name of the assembly referenced by the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetReference.Url">
            <summary>
            Contains a URL that provides more information about the referenced assembly.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetReference.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetReference</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetLiterals">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetLiteral</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetLiterals.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetLiterals</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetLiterals.AddLiteral">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetLiterals</c> collection.
            </summary>
            <returns><c>ICodeSnippetLiteral</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetLiterals.InsertLiteral(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetLiterals</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetLiteral</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetHeader">
            <summary>
            Represents code snippet header.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetHeader">
            <summary>
            Represents properties and methods describing code snippet header.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetHeader.Assign(QWhale.Syntax.CodeCompletion.ICodeSnippetHeader)">
            <summary>
            When implemented by a class, copies the contents of another <c>ICodeSnippetHeader</c> object.
            </summary>
            <param name="source">Specifies <c>ICodeSnippetHeader</c> to assign.</param>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetHeader.Title">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the title of the code snippet. Useful to find necessary item within the snippets collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetHeader.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of the code snippet, that can help user to choose snippet from the popup window.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetHeader.Author">
            <summary>
            When implemented by a class, gets or sets a string value that specifies author of the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetHeader.Shortcut">
            <summary>
            When implemented by a class, gets or sets a string value that specifies shortut of the code snippet.
            This shortuct is replaced by entire snippet when user presses Tab in the editor.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetHeader.Types">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetHeader</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.Assign(QWhale.Syntax.CodeCompletion.ICodeSnippetHeader)">
            <summary>
            Copies the contents of another <c>ICodeSnippetHeader</c> object.
            </summary>
            <param name="source">Specifies <c>ICodeSnippetHeader</c> to assign.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.Title">
            <summary>
            Gets or sets a string value that specifies the title of the code snippet. Useful to find necessary item within the snippets collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.Description">
            <summary>
            Gets or sets a string value that specifies short description of the code snippet, that can help user to choose snippet from the popup window.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.Author">
            <summary>
            Gets or sets a string value that specifies author of the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.Shortcut">
            <summary>
            Gets or sets a string value that specifies shortut of the code snippet.
            This shortuct is replaced by entire snippet when user presses Tab in the editor.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.Types">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetHeader.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetHeader</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeCompletionRepository">
            <summary>
            Represents properties and methods to perform code completion functionality.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository">
            <summary>
            Represents properties and methods to perform code completion functionality.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.GetNodeType(System.String,QWhale.Syntax.ISyntaxNode,System.Drawing.Point)">
            <summary>
            When implemented by a class,o btains information type of the <c>SyntaxNode</c>
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies starting position to search</param>
            <returns>Object represening type of found member.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.GetMemberType(System.String,QWhale.Syntax.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,QWhale.Syntax.CodeCompletionScope@)">
            <summary>
            When implemented by a class, obtains information about some language element to perform code completion related operations.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="endPos">Specifies end position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.GetSpecialMemberType(System.String,QWhale.Syntax.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,QWhale.Syntax.CodeCompletionScope@)">
            <summary>
            When implemented by a class, obtains information about some language element to perform code completion related operations in special cases.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="endPos">Specifies end position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.GetMethodType(System.String,QWhale.Syntax.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,System.Int32@,System.Int32@,QWhale.Syntax.CodeCompletionScope@)">
            <summary>
            When implemented by a class, obtains information about some method of specified language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> represening current language element.</param>
            <param name="name">Retrieves name of found method.</param>
            <param name="position">Retrieves start positon of the method in the code text.</param>
            <param name="endPos">Retrieves end position of the method in the code text.</param>
            <param name="paramIndex">Retrieves index of current parameter in the code text.</param>
            <param name="paramCount">Retrieves number of the parameters.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about found method.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.FillMembers(QWhale.Syntax.ISyntaxNode,System.Drawing.Point,QWhale.Syntax.CodeCompletion.IListMembers,System.Object,System.String,QWhale.Syntax.CodeCompletionScope,System.Int32@)">
            <summary>
            When implemented by a class, fills list members provider with list of its member, providing available choices for the specified language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="position">Specifies position of language element in the text.</param>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies filter used to fill members.</param>
            <param name="scope">Specifies search constraints.</param>
            <param name="selIndex">Specifies index of default list member</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.FillMember(QWhale.Syntax.CodeCompletion.IListMembers,System.Object,System.String,System.Int32,QWhale.Syntax.CodeCompletionScope)">
            <summary>
            When implemented by a class, obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="paramIndex">Specifies index of current member parameter.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.GetMemberType(QWhale.Syntax.ISyntaxNode,System.Drawing.Point,System.Object,System.String,QWhale.Syntax.CodeCompletionScope@)">
            <summary>
            When implemented by a class, obtains information about a member of some language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of the member to locate.</param>
            <param name="scope">Retrieves information about search constraints for this language element.</param>
            <returns>Object represening information about found member.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.GetDescription(QWhale.Syntax.CodeCompletion.IListMembers,QWhale.Syntax.ISyntaxNode,System.Object,System.String,System.Boolean)">
            <summary>
            When implemented by a class, obtains description of some language element.
            </summary>
            <param name="members">Specifies ListMembers interface used to get language-specific description.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> that representing language element to describe.</param>
            <param name="member">Specifies language element to describe.</param>
            <param name="name">Specifies name of described language element.</param>
            <param name="fullDescription">Specifies whether description should include name and type of the found element.</param>
            <returns>String that describes specified language element.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.GetPriority(System.Object)">
            <summary>
            When implemented by a class, obtains priority of the given language element.
            <param name="member">Specifies language element</param>
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.FindDeclaration(System.String,QWhale.Syntax.ISyntaxNode,System.Drawing.Point)">
            <summary>
            When implemented by a class, obtains information about where the language element is declared.
            </summary>
            <param name="text">Specifies the source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <returns><c>object</c> representing declaration of the language element.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.FindReferences(QWhale.Syntax.ISyntaxNode,QWhale.Syntax.ISyntaxNodes)">
            <summary>
            When implemented by a class, locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.RegisterSyntaxTree(QWhale.Syntax.ISyntaxTree)">
            <summary>
            When implemented by a class, adds specified tree to the list of syntax trees for code-completion related purposes.
            </summary>
            <param name="tree">Specifies <c>ISyntaxTree</c> to add.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.UnregisterSyntaxTree(QWhale.Syntax.ISyntaxTree)">
            <summary>
            When implemented by a class, removes specified tree from the list of syntax trees.
            </summary>
            <param name="tree">Specifies <c>ISyntaxTree</c> to remove.</param>
            <returns>True if succeed (tree is present in the tree list); otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.RegisterSnippet(System.String,System.Boolean)">
            <summary>
            When implemented by a class, registers snippet to be displayed in code completion window
            </summary>
            <param name="snippet">Specifies name of snippet to be displayed</param>
            <param name="isStatement">Specifies whether snippet will have statement image index</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.UnregisterSnippet(System.String)">
            <summary>
            When implemented by a class, removes specified snippet from the list of snippets.
            </summary>
            <param name="snippet">Specifies name of snippet to be removed</param>
            <returns>True if succeed; otherwise false</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.GetCodeSnippets(System.String)">
            <summary>
            When implemented by a class, returns code snippets for the given language.
            </summary>
            <param name="language">Represents a language</param>
            <returns>ICodeSnippetsProvider instance for a given language.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.FillBaseMembers">
            <summary>
            When implemented by a class, indicates whether members of <c>Object</c> class should be present in the member collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.CaseSensitive">
            <summary>
            When implemented by a class, indicates whether searching for language element's members should be case sensitive.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.SyntaxTree">
            <summary>
            When implemented by a class, gets or sets a hierarchical collection of <c>ISyntaxNode</c> elements.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.SyntaxTrees">
            <summary>
            When implemented by a class, gets or sets list of <c>ISyntaxTree</c> objects attached to this <c>ICodeCompletionRepository</c>.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.MemberLookup">
            <summary>
            When implemented by a class, occurs while trying to obtain information about some member of language element.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.CodeCompletion.ICodeCompletionRepository.DescriptionLookup">
            <summary>
            When implemented by a class, occurs while trying to obtain description of some language element.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.#ctor(System.Boolean,QWhale.Syntax.ISyntaxTree)">
            <summary>
            Initializes a new instance of the <c>CodeCompletionRepository</c> class with specified parameters.
            </summary>
            <param name="caseSensitive">Specifies CaseSensitive property of this new instance.</param>
            <param name="syntaxTree">Specifies SyntaxTree property of this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.FillMember(QWhale.Syntax.CodeCompletion.IListMembers,System.Object,System.String,QWhale.Syntax.CodeCompletionScope)">
            <summary>
            Obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.GetNodeType(System.String,QWhale.Syntax.ISyntaxNode,System.Drawing.Point)">
            <summary>
            Obtains information type of the <c>SyntaxNode</c>
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies starting position to search</param>
            <returns>Object represening type of found member.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.GetMemberType(System.String,QWhale.Syntax.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,QWhale.Syntax.CodeCompletionScope@)">
            <summary>
            Obtains information about some language element to perform code completion related operations.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="endPos">Specifies end position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.GetSpecialMemberType(System.String,QWhale.Syntax.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,QWhale.Syntax.CodeCompletionScope@)">
            <summary>
            Obtains information about some language element to perform code completion related operations in special cases.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="name">Retrieves name of found language element.</param>
            <param name="position">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="endPos">Specifies position of found language element in the code text and updates it if needed.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about language element to complete.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.GetMethodType(System.String,QWhale.Syntax.ISyntaxNode,System.String@,System.Drawing.Point@,System.Drawing.Point@,System.Int32@,System.Int32@,QWhale.Syntax.CodeCompletionScope@)">
            <summary>
            Obtains information about some method of specified language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> represening current language element.</param>
            <param name="name">Retrieves name of found method.</param>
            <param name="position">Retrieves start positon of the method in the code text.</param>
            <param name="endPos">Retrieves end position of the method in the code text.</param>
            <param name="paramIndex">Retrieves index of current parameter in the code text.</param>
            <param name="paramCount">Retrieves parameters count in the code text.</param>
            <param name="scope">Retrieves information about search constraints for the language element.</param>
            <returns>Object representing information about found method.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.FillMembers(QWhale.Syntax.ISyntaxNode,System.Drawing.Point,QWhale.Syntax.CodeCompletion.IListMembers,System.Object,System.String,QWhale.Syntax.CodeCompletionScope,System.Int32@)">
            <summary>
            Fills list members provider with list of its member, providing available choices for the specified language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing current language element.</param>
            <param name="position">Specifies position of language element in the text.</param>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies filter used to fill members.</param>
            <param name="scope">Specifies search constraints.</param>
            <param name="selIndex">Specifies index of default list member</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.FillMember(QWhale.Syntax.CodeCompletion.IListMembers,System.Object,System.String,System.Int32,QWhale.Syntax.CodeCompletionScope)">
            <summary>
            Obtains information about individual member of specified language element.
            </summary>
            <param name="members">Specifies provider to fill with available members.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of member to retrieve.</param>
            <param name="paramIndex">Specifies index of current member parameter.</param>
            <param name="scope">Specifies search constraints.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.GetMemberType(QWhale.Syntax.ISyntaxNode,System.Drawing.Point,System.Object,System.String,QWhale.Syntax.CodeCompletionScope@)">
            <summary>
            Obtains information about a member of some language element.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <param name="member">Specifies language element.</param>
            <param name="name">Specifies name of the member to locate.</param>
            <param name="scope">Retrieves information about search constraints for this language element.</param>
            <returns>Object represening information about found member.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.GetDescription(QWhale.Syntax.CodeCompletion.IListMembers,QWhale.Syntax.ISyntaxNode,System.Object,System.String,System.Boolean)">
            <summary>
            Obtains description of some language element.
            </summary>
            <param name="members">Specifies ListMembers interface used to get language-specific description.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> that representing language element to describe.</param>
            <param name="member">Specifies language element to describe.</param>
            <param name="name">Specifies name of described language element.</param>
            <param name="fullDescription">Specifies whether description should include name and type of the found element.</param>
            <returns>String that describes specified language element.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.GetPriority(System.Object)">
            <summary>
            Obtains priority of the given language element.
            <param name="member">Specifies language element</param>
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.FindDeclaration(System.String,QWhale.Syntax.ISyntaxNode,System.Drawing.Point)">
            <summary>
            Obtains information about where the language element is declared.
            </summary>
            <param name="text">Specifies the source text.</param>
            <param name="node">Specifies <c>ISyntaxNode</c> representing a current language element.</param>
            <param name="position">Specifies position of language element.</param>
            <returns><c>ISyntaxNode</c> representing declaration of the language element.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.FindReferences(QWhale.Syntax.ISyntaxNode,QWhale.Syntax.ISyntaxNodes)">
            <summary>
            Locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.RegisterSyntaxTree(QWhale.Syntax.ISyntaxTree)">
            <summary>
            Adds specified tree to the list of syntax trees for code-completion related purposes.
            </summary>
            <param name="tree">Specifies <c>ISyntaxTree</c> to add.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.UnregisterSyntaxTree(QWhale.Syntax.ISyntaxTree)">
            <summary>
            Removes specified tree from the list of syntax trees.
            </summary>
            <param name="tree">Specifies <c>ISyntaxTree</c> to remove.</param>
            <returns>True if succeed (tree is present in the tree list); otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.RegisterSnippet(System.String,System.Boolean)">
            <summary>
            When implemented by a class, registers snippet to be displayed in code completion window
            </summary>
            <param name="snippet">Specifies name of snippet to be displayed</param>
            <param name="isStatement">Specifies whether snippet will have statement image index</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.UnregisterSnippet(System.String)">
            <summary>
            When implemented by a class, removes specified snippet from the list of snippets.
            </summary>
            <param name="snippet">Specifies name of snippet to be removed</param>
            <returns>True if succeed; otherwise false</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.GetCodeSnippets(System.String)">
            <summary>
            Returns code snippets for the given language.
            </summary>
            <param name="language">Represents a language</param>
            <returns>ICodeSnippetsProvider instance for a given language.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.Snippets">
            <summary>
            Represents a collection of snippets that are displayed in code completion window.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.FillBaseMembers">
            <summary>
            Indicates whether members of <c>Object</c> class should be present in the member collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.CaseSensitive">
            <summary>
            Indicates whether searching for language element's members should be case sensitive.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.SyntaxTree">
            <summary>
            Gets or sets a hierarchical collection of <c>ISyntaxNode</c> elements.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.SyntaxTrees">
            <summary>
            Gets or sets list of <c>ISyntaxTree</c> objects attached to this <c>CodeCompletionRepository</c>.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.MemberLookup">
            <summary>
            Occurs while trying to obtain information about some member of language element.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.CodeCompletion.CodeCompletionRepository.DescriptionLookup">
            <summary>
            Occurs while trying to obtain description of some language element.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICommentInfo">
            <summary>
            Represents simple text data related to popup hint.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICommentInfo.Text">
            <summary>
            When implemented by a class, gets or sets content of the <c>IQuickInfo</c>.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCommentInfoItemInfo">
            <summary>
            Contains information about <c>ICommentInfoItem</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCommentInfoItemInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCommentInfoItemInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCommentInfoItemInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCommentInfoItemInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCommentInfoItemInfo.#ctor(QWhale.Syntax.CodeCompletion.ICommentInfoItem)">
            <summary>
            Initializes a new instance of the <c>XmlCommentInfoItemInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICommentInfoItem</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCommentInfoItemInfo.Text">
            <summary>
            Stores <c>ICommentInfoItem.Text</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexReswordSets">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexReswordSet</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexReswordSets.AddLexReswordSet">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ILexReswordSets</c> collection.
            </summary>
            <returns><c>ILexReswordSet</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexReswordSets.InsertLexReswordSet(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ILexReswordSets</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexReswordSet</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexReswordSets.FindResword(System.String)">
            <summary>
            When implemented by a class, locates <c>ILexReswordSet</c> containing given resword.
            </summary>
            <param name="resword">The resword to search for.</param>
            <returns>Index of <c>ILexReswordSet</c> if resword collection contains specified resword; otherwise - 1.</returns>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexStyle">
            <summary>
            Represents an individual lexical style with the collection of lexical styles.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexStyle">
            <summary>
            Represents properties and methods for individual lexical style with the collection of lexical styles.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStyle.Assign(QWhale.Syntax.Lexer.ILexStyle)">
            <summary>
            When implemented by a class, copies the contents of another <c>ILexStyle</c> object.
            </summary>
            <param name="source">Specifies <c>ILexStyle</c> to assign.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStyle.ResetForeColor">
            <summary>
            When implemented by a class, resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStyle.ResetBackColor">
            <summary>
            When implemented by a class, resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStyle.ResetFontStyle">
            <summary>
            When implemented by a class, resets the <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStyle.ResetPlainText">
            <summary>
            When implemented by a class, resets the <c>PlainText</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.Name">
            <summary>
            When implemented by a class, gets or sets name of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.Desc">
            <summary>
            When implemented by a class, gets or sets a description of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.ForeColor">
            <summary>
            When implemented by a class, gets or sets a foreground color of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.BackColor">
            <summary>
            When implemented by a class, gets or sets a background color of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.FontStyle">
            <summary>
            When implemented by a class, gets or sets a font style of the <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.ForeColorEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the ForeColor property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.BackColorEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the BackColor property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.BoldEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Bold property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.ItalicEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Italic property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.UnderlineEnabled">
            <summary>
            When implemented by a class, gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Underline property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.PlainText">
            <summary>
            When implemented by a class, gets or sets value indicating whether Edit control should use text formatting rules, like checking spelling.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.Index">
            <summary>
            When implemented by a class, represents index of the <c>ILexStyle</c> within the lexical style collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.Scheme">
            <summary>
            When implemented by a class, gets or sets <c>ILexScheme</c> that owns this <c>ILexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexStyle.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ILexStyle</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyle.#ctor">
            <summary>
            Initializes a new instance of the <c>LexStyle</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyle.#ctor(QWhale.Syntax.Lexer.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexStyle</c> class with specified owner.
            </summary>
            <param name="scheme"><c>ILexScheme</c> that contains this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyle.Assign(QWhale.Syntax.Lexer.ILexStyle)">
            <summary>
            Copies the contents of another <c>ILexStyle</c> object.
            </summary>
            <param name="source">Specifies <c>ILexStyle</c> to assign.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyle.ResetBackColor">
            <summary>
            Resets the <c>BackColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyle.ResetForeColor">
            <summary>
            Resets the <c>ForeColor</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyle.ResetFontStyle">
            <summary>
            Resets the <c>FontStyle</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyle.ResetPlainText">
            <summary>
            Resets the <c>PlainText</c> to the default value.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.Name">
            <summary>
            Gets or sets name of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.Desc">
            <summary>
            Gets or sets a description of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.ForeColor">
            <summary>
            Gets or sets a foreground color of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.BackColor">
            <summary>
            Gets or sets a background color of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.FontStyle">
            <summary>
            Gets or sets a font style of the <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.Index">
            <summary>
            Gets or sets index of this <c>LexStyle</c> within the lexical style collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.PlainText">
            <summary>
            Gets or sets value indicating whether Edit control should use text formatting rules, like checking spelling.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.Scheme">
            <summary>
            Gets or sets <c>ILexScheme</c> that owns this <c>LexStyle</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.ForeColorEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the ForeColor property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.BackColorEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the BackColor property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.BoldEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Bold property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.ItalicEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Italic property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.UnderlineEnabled">
            <summary>
            Gets or sets a flag that indicates whether the GUI control 
            that corresponds to the Underline property should be enabled or disabled.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexStyle.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>LexStyle</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing LexScheme's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlLexStateInfo">
            <summary>
            Contains information about <c>ILexState</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStateInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStateInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStateInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLexStateInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStateInfo.#ctor(QWhale.Syntax.Lexer.ILexState)">
            <summary>
            Initializes a new instance of the <c>XmlLexStateInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexState</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStateInfo.ShouldSerializeSyntaxBlocks">
            <summary>
            Indicates whether the <c>SyntaxBlocks</c> property should be persisted.
            </summary>
            <returns>True if <c>SyntaxBlocks</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStateInfo.Name">
            <summary>
            Stores <c>ILexState.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStateInfo.Desc">
            <summary>
            Stores <c>ILexState.Desc</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStateInfo.CaseSensitive">
            <summary>
            Stores <c>ILexState.CaseSensitive</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStateInfo.SyntaxBlocks">
            <summary>
            Stores <c>ILexState.SyntaxBlocks</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ISyntaxError">
            <summary>
            Represents properties to describe a particular syntax error in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxError.Name">
            <summary>
            When implemented by a class, gets or sets error name.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxError.Description">
            <summary>
            When implemented by a class, gets or sets error description (reason).
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxError.Position">
            <summary>
            When implemented by a class, gets or sets error position in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxError.Size">
            <summary>
            When implemented by a class, gets or sets error dimension.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxError.Range">
            <summary>
            When implemented by a class, gets or sets error scope.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxError.ErrorType">
            <summary>
            When implemented by a class, gets or sets error type.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.IStringList">
            <summary>
            Represents collection containing list of strings.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IStringList.Text">
            <summary>
            When implemented by a class, gets or sets the strings in the <c>IStringList</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Design.Dialogs.DlgSyntaxBuilder">
            <summary>
            Represents a dialog box used to edit lexical scheme in design time.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Design.Dialogs.DlgSyntaxBuilder.#ctor">
            <summary>
            Initializes a new instance of the <c>DlgSyntaxBuilder</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Design.Dialogs.DlgSyntaxBuilder.#ctor(QWhale.Syntax.Design.SyntaxBuilderEditor)">
            <summary>
            Initializes a new instance of the <c>DlgSyntaxBuilder</c> class with specified parameters.
            </summary>
            <param name="editor">Editor owning the dialog box</param>
        </member>
        <member name="P:QWhale.Syntax.Design.Dialogs.DlgSyntaxBuilder.Scheme">
            <summary>
            Represents lexer scheme being edited
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlColorInfo">
            <summary>
            Represents methods to serialize color structure to XML.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlColorInfo.SerializeColor(System.Drawing.Color)">
            <summary>
            Serializes specified color.
            </summary>
            <param name="color">Color to serialize.</param>
            <returns>String representation of given color.</returns>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlColorInfo.DeserializeColor(System.String)">
            <summary>
            Deserializes specified string representation of color to Color structure.
            </summary>
            <param name="color">Specifies string to deserialize.</param>
            <returns>Color structure obtained from stirng representation.</returns>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetsInfo">
            <summary>
            Contains information about <c>ICodeSnippets</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetsInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetsInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetsInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetsInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetsInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippets)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetsInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippets</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetsInfo.Snippets">
            <summary>
            Stores <c>ICodeSnippets</c> indexer.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetDeclarations">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetDeclaration</c> objects.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetDeclarations">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ICodeSnippetDeclaration</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetDeclarations.AddDeclaration">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ICodeSnippetDeclarations</c> collection.
            </summary>
            <returns><c>ICodeSnippetDeclaration</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetDeclarations.InsertDeclaration(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetDeclarations</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetDeclaration</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetDeclarations.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetDeclarations</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetDeclarations.AddDeclaration">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetDeclarations</c> collection.
            </summary>
            <returns><c>ICodeSnippetDeclaration</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetDeclarations.InsertDeclaration(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetDeclarations</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetDeclaration</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexSyntaxBlock">
            <summary>
            Represents an individual syntax block in the collection of syntax blocks.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexSyntaxBlock.#ctor">
            <summary>
            Initializes a new instance of the <c>LexSyntaxBlock</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexSyntaxBlock.#ctor(QWhale.Syntax.Lexer.ILexState)">
            <summary>
            Initializes a new instance of the <c>LexSyntaxBlock</c> class with specified owner.
            </summary>
            <param name="state"><c>ILexState</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexSyntaxBlock.FindResword(System.String)">
            <summary>
            Locates <c>LexReswordSet</c> containing given resword.
            </summary>
            <param name="resword">The resword to search for.</param>
            <returns>Index of <c>LexReswordSet</c> if resword collection contains specified resword; otherwise - 1.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexSyntaxBlock.AddExpression(System.String)">
            <summary>
            Adds new element to the expression collection.
            </summary>
            <param name="expression">Regular expression to add.</param>
            <returns>Index of added element in the expression collection.</returns>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether <c>ILexSyntaxBlock</c> is case-sensitive or not.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.State">
            <summary>
            Gets or sets <c>ILexState</c> owning this <c>ILexSyntaxBlock</c>
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.Name">
            <summary>
            Gets or sets name of the <c>LexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.Desc">
            <summary>
            Gets or sets description of the <c>LexSyntaxBlock</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.Style">
            <summary>
            Gets or sets an <c>ILexStyle</c> object, applicable for text that matches <c>LexSyntaxBlock</c> expression.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.LeaveState">
            <summary>
            Gets or sets <c>ILexState</c> object that specifies lexical resulting state after lexical analyzer locates text, that matches to the <c>LexSyntaxBlock.Expression</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.ReswordSets">
            <summary>
            Gets or sets collection of the <c>ILexReswordSet</c> object containing reserwed words.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.Expressions">
            <summary>
            Represents a list of regular expression patterns for the <c>LexSyntaxBlock.Expressions</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.Expression">
            <summary>
            Represents a collective regular expression pattern for the <c>LexSyntaxBlock.Expressions</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.Index">
            <summary>
            Represents index of the <c>LexSyntaxBlock</c> within the lexical syntax block collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexSyntaxBlock.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>LexSyntaxBlock</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing LexScheme's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexScheme">
            <summary>
            Represents class contains rules for text lexical analysis.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.#ctor(QWhale.Syntax.Lexer.ILexer)">
            <summary>
            Initializes a new instance of the <c>LexScheme</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.IsEmpty">
            <summary>
            Indicates whether <c>LexScheme</c> is empty , that is does not contain any styles, states, author, copyright, and description information.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.IsPlainText(System.Int32)">
            <summary>
            Indicates whether <c>PlainText</c> property of lexical style given by its index is true.
            </summary>
            <param name="style">index of lexical style to check-up.</param>
            <returns>True if lexical style <c>PlainText</c> property is true; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.Clear">
            <summary>
            Removes all states and styles from this <c>LexScheme</c> and sets other properties to default values.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.Update">
            <summary>
            When implemented by a class, causes associated <c>ILexer</c> to update its state.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load scheme.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load scheme.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read scheme.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read scheme.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read scheme.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save scheme.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves scheme content to the specific file with specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the scheme content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write scheme to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.SaveStream(System.IO.Stream)">
            <summary>
            Saves the scheme content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexScheme.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.Author">
            <summary>
            Gets or sets author of the <c>LexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.Name">
            <summary>
            Gets or sets <c>LexScheme</c> name.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.Desc">
            <summary>
            Gets or sets description of the <c>LexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.Copyright">
            <summary>
            Gets or sets copyright of the <c>LexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.FileExtension">
            <summary>
            Gets or sets string value indicating associated file extension of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.FileType">
            <summary>
            Gets or sets string value indicating associated file type of the <c>ILexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.Version">
            <summary>
            Gets or sets version of the <c>LexScheme</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.Styles">
            <summary>
            Gets or sets collection of lexical styles.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.States">
            <summary>
            Gets or sets collection of lexical states.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexScheme.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>LexScheme</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing LexScheme's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexReswordSet">
            <summary>
            Represents class to specify keywords for <c>ILexSyntaxBlock.LexReswordSets</c> collection.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexReswordSet">
            <summary>
            Represents properties and methods to specify keywords for <c>ILexSyntaxBlock.LexReswordSets</c> collection.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexReswordSet.AddResword(System.String)">
            <summary>
            When implemented by a class, adds a new element to the resword collection.
            </summary>
            <param name="resword">Resword to add.</param>
            <returns>Index of added element in the resword collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexReswordSet.FindResword(System.String)">
            <summary>
            When implemented by a class, locates given resword in Reswords collection.
            </summary>
            <param name="resword">Resword to locate.</param>
            <returns>True if resword presents in the Reswords collection; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexReswordSet.Clear">
            <summary>
            When implemented in a class, removes all items from Reswords collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexReswordSet.Name">
            <summary>
            When implemented in a class, gets or set name for the <c>ILexReswordSet</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexReswordSet.ReswordStyle">
            <summary>
            When implemented by a class, gets or sets an <c>ILexStyle</c> of resword collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexReswordSet.Reswords">
            <summary>
            When implemented by a class, gets or sets a collection of keywords for the <c>ILexReswordSet</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexReswordSet.Index">
            <summary>
            When implemented by a class, represents index of the <c>ILexReswordSet</c> within the reswords collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexReswordSet.Block">
            <summary>
            When implemented by a class, gets or sets <c>ILexSyntaxBlock</c> owning this <c>ILexReswordSet</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexReswordSet.CaseSensitive">
            <summary>
            When implemented by a class, gets or sets a value indicating whether <c>ILexReswordSet</c> is case-sensitive or not.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.ILexReswordSet.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ILexReswordSet</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexReswordSet.#ctor(QWhale.Syntax.Lexer.ILexSyntaxBlock)">
            <summary>
            Initializes a new instance of the <c>LexReswordSet</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexReswordSet.AddResword(System.String)">
            <summary>
            Adds a new element to the resword collection.
            </summary>
            <param name="resword">Resword to add.</param>
            <returns>Index of added element in the resword collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexReswordSet.FindResword(System.String)">
            <summary>
            Locates given resword in Reswords collection.
            </summary>
            <param name="resword">Resword to locate.</param>
            <returns>True if resword presents in the Reswords collection; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexReswordSet.Clear">
            <summary>
            Removes all items from Reswords collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexReswordSet.Name">
            <summary>
            Gets or set name for the <c>LexReswordSet</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexReswordSet.ReswordStyle">
            <summary>
            Gets or sets an <c>ILexStyle</c> of resword collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexReswordSet.CaseSensitive">
            <summary>
            Gets or sets a value indicating whether <c>ILexReswordSet</c> is case-sensitive or not.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexReswordSet.Index">
            <summary>
            Represents index of the <c>LexReswordSet</c> within the reswords collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexReswordSet.Block">
            <summary>
            Gets or sets <c>ILexSyntaxBlock</c> owning this <c>ILexReswordSet</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexReswordSet.Reswords">
            <summary>
            Represents a list of reswords for the <c>LexReswordSet.Reswords</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.LexReswordSet.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>LexReswordSet</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing LexScheme's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.ITextUndoList">
            <summary>
            Represents collection containing list of <c>ITextUndo</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ITextUndoList.Sort(System.Collections.Generic.IComparer{QWhale.Syntax.ITextUndo})">
            <summary>
            Sorts the elements in the entire sort list using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing elements.</param>
        </member>
        <member name="T:QWhale.Syntax.SyntaxOptions">
            <summary>
            Defines possibilities of formatting Edit control's content.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.Outline">
            <summary>
            Specifies that information about outline sections within the text is available.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.SmartIndent">
            <summary>
            Specifies that information about indent level of each line in the text is available.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.CodeCompletion">
            <summary>
            Specifies that information about code completion for language elements within the text is available.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.SyntaxErrors">
            <summary>
            Specifies that information about syntax errors within the text is available.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.ReparseOnLineChange">
            <summary>
            Specifies that text should be reparsed when the current line changes.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.QuickInfoTips">
            <summary>
            Specifies that text quick info tooltip should be displayed when mouse is moved over control.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.AutoComplete">
            <summary>
            Specifies that parser will complete statements if possible.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.FormatCase">
            <summary>
            Specifies that parser will change resword case.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.FormatSpaces">
            <summary>
            Specifies that parser will format line spacing.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.CodeCompletionTabs">
            <summary>
            Specifies that code completion can be filtered based on priorty.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.WorkInThread">
            <summary>
            Specifies that code completion and code outlining tasks to be performed in separate thread.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxOptions.EvaluateConditionals">
            <summary>
            Specifies that code parser should evaluate conditional defines.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ISyntaxParser">
            <summary>
            Represents properties and methods to perform syntax analysis of the text.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.IParser">
            <summary>
            Represents properties and methods for perform lexical analysis of the text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.IParser.Reset">
            <summary>
            When implemented by a class, resets <c>IParser</c> to the start position.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.IParser.Reset(System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, resets <c>IParser</c> to the specified position.
            </summary>
            <param name="line">Specifies new line index.</param>
            <param name="pos">Specifies new position of character within the line.</param>
            <param name="state">Specifies new <c>State</c>.</param>
        </member>
        <member name="M:QWhale.Syntax.IParser.NextToken">
            <summary>
            When implemented by a class, parses text from current position to the next token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:QWhale.Syntax.IParser.NextToken(System.String@)">
            <summary>
            When implemented by a class, parses text from current position to the next token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <param name="str">Retrieves token string for the next token.</param>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:QWhale.Syntax.IParser.PeekToken">
            <summary>
            When implemented by a class, parses next portion of the text, remaning current position unchanged.
            </summary>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:QWhale.Syntax.IParser.PeekToken(System.String@)">
            <summary>
            When implemented by a class, parses next portion of the text, remaning current position unchanged.
            </summary>
            <param name="str">Retrieves token string for the next token.</param>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:QWhale.Syntax.IParser.PeekValidToken">
            <summary>
            When implemented by a class, parses to the next valid (non-whitespace, non-comment) portion of the text, remaning current position unchanged.
            </summary>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:QWhale.Syntax.IParser.PeekValidToken(System.String@)">
            <summary>
            When implemented by a class, parses to the next valid (non-whitespace, non-comment) portion of the text, remaning current position unchanged.
            </summary>
            <param name="str">Retrieves token string for the next valid token.</param>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:QWhale.Syntax.IParser.NextValidToken">
            <summary>
            When implemented by a class, parses text from current position to the next valid (non-whitespace, non-comment) token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:QWhale.Syntax.IParser.NextValidToken(System.String@)">
            <summary>
            When implemented by a class, parses text from current position to the next valid (non-whitespace, non-comment) token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <param name="str">Retrieves token string for the next valid token.</param>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:QWhale.Syntax.IParser.SaveState">
            <summary>
            When implemented by a class, saves current <c>IParser</c> state and position.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.IParser.RestoreState">
            <summary>
            When implemented by a class, restores <c>IParser</c> state and position stored by <c>SaveState</c> method.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.IParser.RestoreState(System.Boolean)">
            <summary>
            hen implemented by a class, restores <c>IParser</c> state and position stored by <c>SaveState</c> method.
            </summary>
            <param name="restore">Indicates whether <c>IParser</c> should restore it's state to previous position or simply delete information about previously stored state.</param>
        </member>
        <member name="P:QWhale.Syntax.IParser.Token">
            <summary>
            When implemented by a class, represents token (index of style in the class style collection) related to the current position in the parsed text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IParser.State">
            <summary>
            When implemented by a class, represents current <c>IParser</c> state.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IParser.TokenString">
            <summary>
            When implemented by a class, represents text of the current syntax token.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IParser.TokenPosition">
            <summary>
            When implemented by a class, represents start position of the current token.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IParser.CurrentPosition">
            <summary>
            When implemented by a class, represents position of current character within the current line.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IParser.Eof">
            <summary>
            When implemented by a class, indicates whether current position is out of the text, signalling that whole text is parsed.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IParser.Strings">
            <summary>
            When implemented by a class, gets or sets a list of strings to parse.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.IParser.Lines">
            <summary>
            When implemented by a class, gets or sets a list of string to parse represented as string array.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ReparseText">
            <summary>
            When implemented by a class, reparses entire text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ReparseText(System.Boolean)">
            <summary>
            When implemented by a class, reparses entire text.
            <param name="useThread">Specifies whether parser should perform the task in the separate thread</param>
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.Prepare(QWhale.Syntax.IStringList,QWhale.Syntax.ISyntaxTree,System.Boolean)">
            <summary>
            When implemented by a class, sets lines to parse.
            <param name="lines">Strings to parse</param>
            <param name="syntaxTree">Specifies current parser tree.</param>
            <param name="useThread">Specifies whether parser should perform the task in the separate thread</param>
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.FinishParsing">
            <summary>
            When implemented by a class, commits parsing process.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.StopParsing">
            <summary>
            When implemented by a class, aborts parsing process.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.Abort">
            <summary>
            When implemented by a class, aborts parsing process by raising StopParseException exception.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ReparseBlock(System.Drawing.Point)">
            <summary>
            When implemented by a class, reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ReparseBlock(System.Drawing.Point,System.String,QWhale.Syntax.ISyntaxNode@,QWhale.Syntax.CodeCompletionType)">
            <summary>
            Reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <param name="text">Specifies source text.</param>
            <param name="node">Returns node corresponding to the block being reparsed</param>
            <param name="completionType">Specifies code completion reason.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.Outline(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            When implemented by a class, creates outlined sections for parsed text using result of syntax analysis and fills ranges parameter by the collection of the outlined sections.
            </summary>
            <param name="ranges">Retrieves <c>IOutlineRange</c> collection for outlined sections.</param>
            <returns>Number of outlined sections.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.GetSmartIndent(System.Int32,System.Boolean)">
            <summary>
            When implemented by a class, returns indentation level of specified line.
            </summary>
            <param name="index">Specifies index of line to obtain indentation level.</param>
            <param name="autoIndent">Indicates whether indentation level should be caculated automatically, or obtained from the previous line.</param>
            <returns>Indentation level at line specified by index.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.GetSmartIndent(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            When implemented by a class, returns indentation level of specified line.
            </summary>
            <param name="index">Specifies index of line to obtain indentation level.</param>
            <param name="autoIndent">Indicates whether indentation level should be caculated automatically, or obtained from the previous line.</param>
            <param name="actualPosition">If true, the indentation position will be returned, otherwise, the level</param>
            <returns>Indentation level at line specified by index.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.SmartFormatLine(System.Int32,System.String,System.Int16[],QWhale.Syntax.ITextUndoList)">
            <summary>
            When implemented by a class, formats line according to the parser rules.
            </summary>
            <param name="index">Specifies index of line to format.</param>
            <param name="text">specifies string representation of the line</param>
            <param name="textData">specifies data containing color information for the given string</param>
            <param name="operations">List containing insertion or deletion of text fragments</param>
            <returns>Indentation level at given line.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.SmartFormatLine(System.Int32,System.String,System.Int16[],QWhale.Syntax.ITextUndoList,System.Boolean@)">
            <summary>
            When implemented by a class, formats line according to the parser rules.
            </summary>
            <param name="index">Specifies index of line to format.</param>
            <param name="text">specifies string representation of the line</param>
            <param name="textData">specifies data containing color information for the given string</param>
            <param name="operations">List containing insertion or deletion of text fragments</param>
            <param name="actualPosition">If true, the indentation position will be returned, otherwise, the level</param>
            <returns>Indentation level at given line.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.GetSyntaxErrors(System.Collections.Generic.IList{QWhale.Syntax.ISyntaxError})">
            <summary>
            When implemented by a class, retrieves all syntax errors that <c>ISyntaxParser</c> found while analysing the text.
            </summary>
            <param name="errors">Retrieves a collection of syntax error.</param>
            <returns>Number of syntax errors that are found.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.CodeCompletion(System.String,System.Int16[],System.Drawing.Point,QWhale.Syntax.CodeCompletionArgs)">
            <summary>
            When implemented by a class, performs code completion for the specified text representing language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies current position in text.</param>
            <param name="textData">specifies data containing color information for the given string</param>
            <param name="e">Contains data for the code completion.</param>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.CodeCompletion(System.String,System.Int16[],System.Drawing.Point,System.Boolean,QWhale.Syntax.CodeCompletionArgs)">
            <summary>
            When implemented by a class, performs code completion for the specified text representing language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies current position in text.</param>
            <param name="textData">specifies data containing color information for the given string</param>
            <param name="useThread">Specifies whether parser should perform the task in the separate thread</param>
            <param name="e">Contains data for the code completion.</param>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ProcessAutoComplete(System.String,System.Drawing.Point,System.String@)">
            <summary>
            Checks whether end-of-block code needs inserting.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies current position in text.</param>
            <param name="code">output prameter to return code fragment to be insered</param>
            <returns>true if autocompletion of end-of-block needed; otherwise false</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.GetSingleLineComment">
            <summary>
            When implemented by a class, gets the string that represents start symbol of single line comment.
            </summary>
            <returns>Single line comment string.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.GetMultiLineComment(System.String@,System.String@)">
            <summary>
            When implemented by a class, gets the start and and symbols multi-line comment.
            </summary>
            <param name="start">start symbol of multi-line comment</param>
            <param name="start">end symbol of multi-line comment</param>
            <returns>True if parser supports multi-line comment; otherwise false.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:QWhale.Syntax.ISyntaxParser.GetAutoFormatNode(System.Drawing.Point,System.Boolean,System.Drawing.Point@)" -->
        <member name="M:QWhale.Syntax.ISyntaxParser.GetNodeAt(System.Drawing.Point)">
            <summary>
            When implemented by a class, gets <c>ISyntaxNode</c> that corresponds to the specified position.
            </summary>
            <param name="position">Position to find node.</param>
            <returns><c>ISyntaxNode</c> at specified position.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.IsDeclaration(QWhale.Syntax.ISyntaxNode)">
            <summary>
            When implemented by a class, indicates whether specified node represents declaration elements.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns>True if specified node represents declaration element; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.FindDeclaration(System.String,System.Drawing.Point)">
            <summary>
            When implemented by a class, finds the declaration node or type at given position.
            </summary>
            <param name="text">Contains string used to perform search.</param>
            <param name="position">Specifies position to find node.</param>
            <returns><c>object</c> that is found.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.FindReferences(QWhale.Syntax.ISyntaxNode,QWhale.Syntax.ISyntaxNodes)">
            <summary>
            When implemented by a class, locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.IsCodeCompletionChar(System.Char,System.Byte,System.Int32@)">
            <summary>
            When implemented by a class, returns boolean value indicating that given character initializes a code completion procedure when typing.
            </summary>
            <param name="ch">given character</param>
            <param name="style">Specifies text style at cursor</param>
            <param name="interval">Represents the delay, in miliiseconds before displaying code completion window.</param>
            <returns>true if given character is code completion character; otherwise false</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.SupportsCodeCompletionFiltering(QWhale.Syntax.CodeCompletionType)">
            <summary>
            When implemented by a class, returns boolean value indicating that information can be filtered for given code completion type.
            </summary>
            <param name="completionType">given code completion type</param>
            <returns>true if code completion output can be filtered; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ResetOptions">
            <summary>
            When implemented by a class, resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ResetCodeCompletionChars">
            <summary>
            When implemented by a class, resets <c>CodeCompletionChars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ResetCodeCompletionStopChars">
            <summary>
            When implemented by a class, resets <c>CodeCompletionStopChars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ResetAutoIndentChars">
            <summary>
            When implemented by a class, resets <c>AutoIndentChars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.ResetSmartFormatChars">
            <summary>
            When implemented by a class, resets <c>SmartFormatChars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.IsContentDivider(System.Int32)">
            <summary>
            When implemented by a class, gets boolean value indicating whether text content is divided at given line.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxParser.OnTextParsed">
            <summary>
            When implemented by a class, raises TextParsed event.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.Options">
            <summary>
            When implemented by a class, gets or sets a flags determining syntax parsing and formatting behavior.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.ExpressionEvaluator">
            <summary>
            When implemented by a class, gets or sets an <c>IExpressionEvaluator</c> instance using to evaluate conditional defines.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.SyntaxTree">
            <summary>
            When implemented by a class, gets or sets a hierarchical collection of <c>ISyntaxNode</c> elements representing abstract syntax tree of the text being parsed.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.CompletionRepository">
            <summary>
            When implemented by a class, gets or sets an <c>ICodeCompletionRepository</c> that holds methods for code completion purposes.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.CodeSnippets">
            <summary>
            When implemented by a class, returns code snippets for the given parser.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.CaseSensitive">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether <c>ISyntaxParser</c> should perform case-sensitive analysis if its content.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.UseScheme">
            <summary>
            When implemented by a class, gets or sets a boolean value that indicates whether <c>ISyntaxParser</c> should perform lexical analysis based on it's rules rather than using internal method.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.CodeCompletionChars">
            <summary>
            When implemented by a class, gets or sets a collection of characters that initializes a code completion procedure when typing.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.CodeCompletionStopChars">
            <summary>
            When implemented by a class, gets or sets a collection of characters that finalizes a code completion procedure when typing.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.AutoIndentChars">
            <summary>
            When implemented by a class, gets or sets a collection of characters that initializes an indentation procedure when typing.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.SmartFormatChars">
            <summary>
            When implemented by a class, gets or sets a collection of characters that initializes a smart formatting procedure when typing.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.Aborted">
            <summary>
            When implemented by a class, gets or sets boolean value indicating whether parsing process has been aborted.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxParser.SupportsThread">
            <summary>
            When implemented by a class, gets boolean value indicating whether parser supports working in thread.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.ISyntaxParser.TextReparsed">
            <summary>
            When implemented by a class, occurs when <c>ISyntaxParser</c> text content is fully parsed.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetObject">
            <summary>
            Represents properties and methods describing literal that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetMember">
            <summary>
            Represents properties and methods for a particular code snippet member in the data collection of the code completion popups.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMember.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the name of the <c>IListMember</c>. Useful to find necessary item within the <c>ICodeSnippetMember</c> collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMember.EditPath">
            <summary>
            When implemented by a class, gets a string value that specifies the full path of the <c>IListMember</c>. 
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMember.Path">
            <summary>
            When implemented by a class, gets or sets a string value that specifies the path to the file containing source of the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMember.ImageIndex">
            <summary>
            When implemented by a class, gets or sets the index of the image displayed for the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMember.Members">
            <summary>
            When implemented by a class, provides an indexed access to the nested <c>ICodeSnippetMember</c> objects.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMember.Snippets">
            <summary>
            When implemented by a class, provides an indexed access to the nested <c>ICodeSnippet</c> objects.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMember.SnippetsAndMembers">
            <summary>
            When implemented by a class, provides an indexed access to the nested <c>ICodeSnippet</c> and <c>ICodeSnippetMember</c> objects.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMember.Parent">
            <summary>
            When implemented by a class, gets or sets a parent of the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Parser">
            <summary>
            Represents class that performs lexical analysis of specified text.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.Lexer">
            <summary>
            Represents class that performs lexical analysis of the specified text.
            </summary>
            <remarks>Lexer class is designed to recognize source code syntax, such as reserved words, comments, numbers, strings and any other syntax structures. Use Scheme property to specify lexical analisys rules.</remarks>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <c>Lexer</c> class with specified container.
            </summary>
            <param name="container">Specifies IContainer that contains this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.#ctor">
            <summary>
            Initializes a new instance of the <c>Lexer</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.BeginUpdate">
            <summary>
            Prevents object state updating until calling <c>EndUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.EndUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>BeginUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.DisableUpdate">
            <summary>
            Prevents object state updating until calling <c>EnableUpdate</c> method.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.EnableUpdate">
            <summary>
            Re-enables object state updating, that was turn of by calling <c>DisableUpdate</c> method.
            Using DisableUpdate/EnableUpdate to prevent notifying about updating the object state.
            </summary>
            <returns>Number of object state updating locks.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.AddNotifier(QWhale.Common.INotifier)">
            <summary>
            Adds new handler to respond a notification.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.RemoveNotifier(QWhale.Common.INotifier)">
            <summary>
            Exclude specified handler from notification handlers list.
            </summary>
            <param name="sender">Specifies an object that can respond a notification.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.Update">
            <summary>
            When implemented by a class, updates an object state.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.Notify">
            <summary>
            Notifies all notifiers about updating object state.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.ParseText(System.Int32,System.Int32,System.String,System.Int16[]@)">
            <summary>
            Performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="colorData">Receives color data representing lexical information of the given text.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.ParseText(System.Int32,System.Int32,System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="pos">Starting position.</param>
            <param name="len">Integer value to receive length of parsed element.</param>
            <param name="style">Retrieves style of text being parsed.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.ResetDefaultState">
            <summary>
            Resets the <c>DefaultState</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.Lexer.RemovePlainText(System.String,System.Int16[])">
            <summary>
            Removes all plain (string constants or comments) parst of text from specified text.
            </summary>
            <param name="s">text to process.</param>
            <param name="textData">color information of given text.</param>
            <returns>String without plain parts.</returns>
        </member>
        <member name="P:QWhale.Syntax.Lexer.Lexer.UpdateCount">
            <summary>
            Keeps track of calls to <c>BeginUpdate</c> and <c>EndUpdate</c> so that they can be nested.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.Lexer.XmlScheme">
            <summary>
            Gets or sets an xml representation of <c>Scheme</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.Lexer.DefaultState">
            <summary>
            Gets or sets default state of the <c>Lexer</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.Lexer.Scheme">
            <summary>
            Gets or sets list of rules for lexical analysis.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Lexer.Lexer.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>Lexer</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="E:QWhale.Syntax.Lexer.Lexer.Parse">
            <summary>
            Occurs when text line is parsed, allowing to modify colors/styles information about the parsed line.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Parser.#ctor">
            <summary>
            Initializes a new instance of the <c>Parser</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Parser.Reset">
            <summary>
            Resets <c>Parser</c> to the start position.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Parser.Reset(System.Int32,System.Int32,System.Int32)">
            <summary>
            Resets <c>Parser</c> to the specified position.
            </summary>
            <param name="line">Specifies new line index.</param>
            <param name="pos">Specifies new position of character within the line.</param>
            <param name="state">Specifies new <c>State</c>.</param>
        </member>
        <member name="M:QWhale.Syntax.Parser.NextToken">
            <summary>
            Parses text from current position to the next token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:QWhale.Syntax.Parser.NextToken(System.String@)">
            <summary>
            Parses text from current position to the next token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <param name="str">Retrieves token string for the next token.</param>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:QWhale.Syntax.Parser.PeekToken">
            <summary>
            Parses next portion of the text, remaning current position unchanged.
            </summary>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:QWhale.Syntax.Parser.PeekToken(System.String@)">
            <summary>
            Parses next portion of the text, remaning current position unchanged.
            </summary>
            <param name="str">Retrieves token string for the next token.</param>
            <returns>Token that corresponds to the next position.</returns>
        </member>
        <member name="M:QWhale.Syntax.Parser.PeekValidToken">
            <summary>
            Parses to the next valid (non-whitespace, non-comment) portion of the text, remaning current position unchanged.
            </summary>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:QWhale.Syntax.Parser.PeekValidToken(System.String@)">
            <summary>
            Parses to the next valid (non-whitespace, non-comment) portion of the text, remaning current position unchanged.
            </summary>
            <param name="str">Retrieves token string for the next valid token.</param>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:QWhale.Syntax.Parser.NextValidToken">
            <summary>
            Parses text from current position to the next valid (non-whitespace, non-comment) token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:QWhale.Syntax.Parser.NextValidToken(System.String@)">
            <summary>
            Parses text from current position to the next valid (non-whitespace, non-comment) token and updates <c>TokenPos</c>, <c>CurrentPos</c> and <c>TokenString</c> properties.
            </summary>
            <param name="str">Retrieves token string for the next valid token.</param>
            <returns>Next valid token.</returns>
        </member>
        <member name="M:QWhale.Syntax.Parser.SaveState">
            <summary>
            Saves current <c>Parser</c> state and position.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Parser.RestoreState">
            <summary>
            Restores <c>Parser</c> state and position stored by <c>SaveState</c> method.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Parser.RestoreState(System.Boolean)">
            <summary>
            Restores <c>Parser</c> state and position stored by <c>SaveState</c> method.
            </summary>
            <param name="restore">Indicates whether <c>Parser</c> should restore it's state to previous position or simply delete information about previously stored state.</param>
        </member>
        <member name="P:QWhale.Syntax.Parser.Token">
            <summary>
            Represents token (number of style in the class style collection) related to the current position in the parsed text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Parser.State">
            <summary>
            Represents current <c>Parser</c> state.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Parser.TokenString">
            <summary>
            Represents text of the current syntax token.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Parser.TokenPosition">
            <summary>
            Represents start position of the current token.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Parser.CurrentPosition">
            <summary>
            Represents position of current character within the current line.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Parser.Eof">
            <summary>
            Indicates whether current position is out of the text, signalling that whole text is parsed.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Parser.Strings">
            <summary>
            Gets or sets a list of strings to parse.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Parser.Lines">
            <summary>
            Gets or sets a list of string to parse represented as string array.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ClosingEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionProvider.ClosePopup</c> event.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.KeyChar">
            <summary>
            Represents key code causing code completion window to close.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.Accepted">
            <summary>
            Represents a value indicating whether the value displayed in CodeCompletion window should be accepted.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.UseIndent">
            <summary>
            Represents a value indicating whether the multi-line text should be indented when inserting to the edit control.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.UseFormat">
            <summary>
            Represents a value indicating whether the multi-line text should be formatted when inserting to the edit control.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.Handled">
            <summary>
            Represents the boolean value indicating whether popup should be closed or not.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.Text">
            <summary>
            Represents the string value that returned by popup being closed.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.StartPosition">
            <summary>
            Specifies position within the text where code competion window is valid.
            <seealso cref="F:QWhale.Syntax.CodeCompletionArgs.EndPosition"/>
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.EndPosition">
            <summary>
            Specifies position within the text where code competion window is valid.
            <seealso cref="F:QWhale.Syntax.CodeCompletionArgs.StartPosition"/>
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ClosingEventArgs.Provider">
            <summary>
            Represents the object that provides data for code completion.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ClosingEventArgs.#ctor(System.Boolean,QWhale.Syntax.CodeCompletion.ICodeCompletionProvider)">
            <summary>
            Initializes a new instance of the <c>ClosingEventArgs</c> class with the specific parameters.
            </summary>
            <param name="accepted">The boolean value that specifies whether the popup window input is accepted.</param>
            <param name="provider">Specifies the object that provides data for code completion.</param>
        </member>
        <member name="T:QWhale.Syntax.ClosePopupEvent">
            <summary>
            Represents a method that will handle the <c>CodeCompletionProvider.ClosePopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCommentInfo">
            <summary>
            Contains information about <c>ICommentInfo</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCommentInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCommentInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCommentInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCommentInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCommentInfo.#ctor(QWhale.Syntax.CodeCompletion.ICommentInfo)">
            <summary>
            Initializes a new instance of the <c>XmlCommentInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICommentInfo</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCommentInfo.Text">
            <summary>
            Stores <c>ICommentInfo.Text</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetReferenceInfo">
            <summary>
            Contains information about <c>ICodeSnippetReference</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetReferenceInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetReferenceInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetReferenceInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetReferenceInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetReferenceInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetReference)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetReferenceInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetReference</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetReferenceInfo.Assembly">
            <summary>
            Stores <c>ICodeSnippetReference.Assembly</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetReferenceInfo.Url">
            <summary>
            Stores <c>ICodeSnippetReference.Url</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetInfo">
            <summary>
            Contains information about <c>ICodeSnippet</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippet)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippet</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.ImageIndex">
            <summary>
            Stores <c>ICodeSnippet.ImageIndex</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.Header">
            <summary>
            Stores <c>ICodeSnippet.Header</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.Code">
            <summary>
            Stores <c>ICodeSnippet.Code</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.Declarations">
            <summary>
            Stores <c>ICodeSnippet.Declarations</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.Imports">
            <summary>
            Stores <c>ICodeSnippet.Imports</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetInfo.References">
            <summary>
            Stores <c>ICodeSnippet.Imports</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexSyntaxBlocks">
            <summary>
            Provides an indexed access to individual <c>ILexSyntaxBlock</c> objects.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexSyntaxBlocks">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexSyntaxBlock</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexSyntaxBlocks.AddLexSyntaxBlock">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ILexReswordSets</c> collection.
            </summary>
            <returns><c>ILexSyntaxBlock</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexSyntaxBlocks.InsertLexSyntaxBlock(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ILexSyntaxBlocks</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexSyntaxBlock</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexSyntaxBlocks.FindSyntaxBlock(System.String)">
            <summary>
            When implemented by a class, finds <c>ILexSyntaxBlock</c> by its name.
            </summary>
            <param name="name">Specifis name of the <c>ILexSyntaxBlock</c>.</param>
            <returns><c>ILexSyntaxBlock</c> that is found.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexSyntaxBlocks.#ctor(QWhale.Syntax.Lexer.ILexState)">
            <summary>
            Initializes a new instance of the <c>LexSyntaxBlocks</c> class with specifies parameters.
            </summary>
            <param name="state">Specifies <c>ILexState</c> to which this new instance belongs.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexSyntaxBlocks.AddLexSyntaxBlock">
            <summary>
            Creates new <c>ILexSyntaxBlock</c> and adds it to the <c>LexSyntaxBlocks</c> collection.
            </summary>
            <returns><c>ILexSyntaxBlock</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexSyntaxBlocks.InsertLexSyntaxBlock(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ILexSyntaxBlocks</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexSyntaxBlock</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexSyntaxBlocks.FindSyntaxBlock(System.String)">
            <summary>
            Finds <c>ILexSyntaxBlock</c> by its name.
            </summary>
            <param name="name">Specifis name of the <c>ILexSyntaxBlock</c>.</param>
            <returns><c>ILexSyntaxBlock</c> that is found.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletionScope">
            <summary>
            Specifies the way in which the search for members and types is conducted by code completion repository.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Static">
            <summary>
            Specifies that member to search is a static (belongs to the type itself rather than to a specific object).
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Instance">
            <summary>
            Specifies that member is instance (belongs to the object).
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Global">
            <summary>
            Specifies that member is global (belongs to the global module).
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Protected">
            <summary>
            Specifies that member may be protected.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.TypeName">
            <summary>
            Specifies that member should display type name in code completion window.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Delegate">
            <summary>
            Specifies that member should display event handler code completion window.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Method">
            <summary>
            Specifies that member represents Reflection MethodBase.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Property">
            <summary>
            Specifies that member represents Reflection PropertyInfo.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Field">
            <summary>
            Specifies that member represents Reflection FieldInfo.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.ShortType">
            <summary>
            Specifies that member should display type short name in rather full name. 
            Appropriate only if TypeName flag is on
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Private">
            <summary>
            Specifies that member may be private.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Overrides">
            <summary>
            Specifies that member to search virtual members in a base class.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.BaseType">
            <summary>
            Specifies that member to search is declaraed in a base class.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Friend">
            <summary>
            Specifies that member may be friend.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletionScope.Snippets">
            <summary>
            Specifies that code snippets should be displayed
            </summary>
        </member>
        <member name="T:QWhale.Syntax.MemberLookupEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionRepository.MemberLookup</c> event,
            used to search for the specified member.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.MemberLookupEventArgs.Member">
            <summary>
            Represents an object containing members.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.MemberLookupEventArgs.Name">
            <summary>
            The String containing the name of the member to get. 
            </summary>
        </member>
        <member name="F:QWhale.Syntax.MemberLookupEventArgs.Result">
            <summary>
            An object representing the member with the specified name, if found; otherwise, a null reference.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.MemberLookupEventArgs.Scope">
            <summary>
            Specifies the search constraints. 
            </summary>
        </member>
        <member name="M:QWhale.Syntax.MemberLookupEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <c>MemberLookupEventArgs</c> class with specified parameters.
            </summary>
            <param name="member">Specifies Member property of this new instance.</param>
            <param name="name">Specifies Name property of this new instance.</param>
        </member>
        <member name="T:QWhale.Syntax.MemberLookupEvent">
            <summary>
            Represents a method that will handle the <c>CodeCompletionRepository.MemberLookup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>MemberLookupEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlLexReswordSetInfo">
            <summary>
            Contains information about <c>ILexReswordSet</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexReswordSetInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexReswordSetInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexReswordSetInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLexReswordSetInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexReswordSetInfo.#ctor(QWhale.Syntax.Lexer.ILexReswordSet)">
            <summary>
            Initializes a new instance of the <c>XmlLexReswordSetInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexReswordSet</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexReswordSetInfo.ShouldSerializeReswords">
            <summary>
            Indicates whether the <c>Reswords</c> property should be persisted.
            </summary>
            <returns>True if <c>Reswords</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexReswordSetInfo.Name">
            <summary>
            Stores <c>ILexReswordSet.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexReswordSetInfo.ReswordStyle">
            <summary>
            Stores <c>ILexReswordSet.ReswordStyle.Index</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexReswordSetInfo.Reswords">
            <summary>
            Stores <c>ILexReswordSet.Reswords</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.StringList">
            <summary>
            Represents collection containing list of strings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.StringList.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetList</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.StringList.#ctor(System.IO.TextReader)">
            <summary>
            Initializes a new instance of the <c>CodeSnippetList</c> class with specified reader.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.StringList.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.SaveFile(System.String)">
            <summary>
            Saves text content to the specific file.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.SaveFile(System.String,System.Text.Encoding)">
            <summary>
            Saves content to the given file with specified exported and specific encoding.
            </summary>
            <param name="fileName">Name of file to save content.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.SaveStream(System.IO.Stream)">
            <summary>
            Saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.SaveStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Saves the text content to the given stream with specified exporter.
            </summary>
            <param name="stream">The Stream object to write the text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.StringList.SaveStream(System.IO.TextWriter)">
            <summary>
            Saves the text content to the specified stream.
            </summary>
            <param name="writer">The TextWriter object to write text to stream.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.StringList.Item(System.Int32)">
            <summary>
            Provides an indexed access to individual strings stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.StringList.Text">
            <summary>
            Gets or sets the strings in the <c>SyntaxStrings</c> as a single string with the individual strings delimited by carriage returns.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.StringList.LineTerminator">
            <summary>
            Gets or sets a string value that terminates line.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetObjects">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetObject</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetObjects.AddObject">
            <summary>
            Adds a new item to the specified position within the <c>ICodeSnippetObjects</c> collection.
            </summary>
            <returns><c>ICodeSnippetObject</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetObjects.InsertObject(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetObject</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetObject</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexStyles">
            <summary>
            Provides an indexed access to individual <c>ILexStyle</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyles.#ctor(QWhale.Syntax.Lexer.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexStyles</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexScheme</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyles.AddLexStyle">
            <summary>
            Creates new <c>ILexStyle</c> and adds it to <c>LexScheme.LexStyles</c> collection.
            </summary>
            <returns><c>ILexStyle</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyles.InsertLexStyle(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ILexStyles</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexStyle</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStyles.FindLexStyle(System.String)">
            <summary>
            Finds <c>ILexStyle</c> by its name.
            </summary>
            <param name="name">Name of the <c>ILexStyle</c>.</param>
            <returns><c>ILexStyle</c> that is found.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ParameterMembers">
            <summary>
            Provides an indexed access to individual <c>ICodeSnippetLiteral</c> objects.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.IParameterMembers">
            <summary>
            Represents collection containing list of parameters.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IParameterMembers.AddParameterMember">
            <summary>
            When implemented by a class, adds a new item to the <c>IParameterMembers</c> collection.
            </summary>
            <returns><c>IParameterMember</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.IParameterMembers.InsertParameterMember(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>IParameterMember</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>IParameterMember</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ParameterMembers.#ctor">
            <summary>
            Initializes a new instance of the <c>ParameterMembers</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ParameterMembers.AddParameterMember">
            <summary>
            Adds a new item to the specified position within the <c>IParameterMembers</c> collection.
            </summary>
            <returns><c>IParameterMember </c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ParameterMembers.InsertParameterMember(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>IParameterMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>IParameterMember</c> that is inserted.</returns>
        </member>
        <member name="T:QWhale.Syntax.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ParameterInfo">
            <summary>
            Represents Parameter Info data related to popup window and popup hint controls.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ParameterInfo.FormatDisplayText">
            <summary>
            Gets a boolean value indicating that rich text formatting should be applied to display text.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexReswordSets">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexReswordSet</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexReswordSets.#ctor(QWhale.Syntax.Lexer.ILexSyntaxBlock)">
            <summary>
            Initializes a new instance of the <c>LexReswordSets</c> class with specified settings.
            </summary>
            <param name="block"><c>ILexSyntaxBlock</c> holds this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexReswordSets.AddLexReswordSet">
            <summary>
            Adds a new item to the end of the <c>ILexReswordSets</c> collection.
            </summary>
            <returns><c>ILexReswordSet</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexReswordSets.InsertLexReswordSet(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ILexReswordSets</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexReswordSet</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexReswordSets.FindResword(System.String)">
            <summary>
            Locates <c>ILexReswordSet</c> containing given resword.
            </summary>
            <param name="resword">The resword to search for.</param>
            <returns>Index of <c>ILexReswordSet</c> if resword collection contains specified resword; otherwise - 1.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ParameterModifer">
            <summary>
            Defines parameter modifiers.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.ParameterModifer.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.ParameterModifer.Optional">
            <summary>
            Specifies that parameter is optional.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.ParameterModifer.In">
            <summary>
            Specifies that parameter is in.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.ParameterModifer.Out">
            <summary>
            Specifies that parameter is out.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.ParameterModifer.Retval">
            <summary>
            Specifies that parameter is retval.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.IParameterMember">
            <summary>
            Represents properties for a particular parameter member within list member parameters.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IParameterMember.Name">
            <summary>
            When implemented by a class, gets or sets a string value that specifies name of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IParameterMember.DataType">
            <summary>
            When implemented by a class, gets or sets a string value that specifies datatype of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IParameterMember.Description">
            <summary>
            When implemented by a class, gets or sets a string value that specifies short description of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IParameterMember.Qualifier">
            <summary>
            When implemented by a class, gets or sets a string value that specifies parameter modifier of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IParameterMember.Modifiers">
            <summary>
            When implemented by a class, gets or sets a string value that specifies parameter modifier.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IParameterMember.Text">
            <summary>
            When implemented by a class, gets or sets a string value that represents parameter text.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlQuickInfo">
            <summary>
            Contains information about <c>IQuickInfo</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlQuickInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlQuickInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlQuickInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlQuickInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlQuickInfo.#ctor(QWhale.Syntax.CodeCompletion.IQuickInfo)">
            <summary>
            Initializes a new instance of the <c>XmlQuickInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IQuickInfo</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlQuickInfo.Text">
            <summary>
            Stores <c>IQuickInfo.Text</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.SyntaxError">
            <summary>
            Describes a particular syntax error in the code text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxError.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxError</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxError.#ctor(System.Drawing.Point)">
            <summary>
            Initializes a new instance of the <c>SyntaxError</c> class at specified position.
            </summary>
            <param name="position">Specifies error Position.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxError.#ctor(System.Drawing.Point,System.String,System.String)">
            <summary>
            Initializes a new instance of the <c>SyntaxError</c> class with specified parameters.
            </summary>
            <param name="position">Specifies error Position.</param>
            <param name="name">Specifies error Name.</param>
            <param name="description">Specifies error Description.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxError.ToString">
            <summary>
            Returns a <c>String</c> that represents the current <c>SyntaxError</c>.
            </summary>
            <returns>A <c>String</c>> that represents the current <c>SyntaxError.</c></returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxError.Clone">
            <summary>
            Creates a new object that is a copy of the current <c>ISyntaxError</c> object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current SyntaxError object.</returns>
        </member>
        <member name="P:QWhale.Syntax.SyntaxError.Name">
            <summary>
            Gets or sets error name.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxError.Description">
            <summary>
            Gets or sets error description (reason).
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxError.Position">
            <summary>
            Gets or sets error position in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxError.Size">
            <summary>
            Gets or sets error dimension.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxError.Range">
            <summary>
            Gets or sets error scope.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxError.ErrorType">
            <summary>
            Gets or sets error type.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippets">
            <summary>
            Represents collection containing list of code snippets.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetMember)">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with specified parent.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.AddSnippet">
            <summary>
            Adds a new item to the <c>ICodeSnippets</c> collection.
            </summary>
            <returns><c>ICodeSnippet</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.InsertSnippet(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippets</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippet</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.FindByShortcut(System.String,System.Boolean)">
            <summary>
            Gets a code snippet by its shortcut.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.ShouldIndent(QWhale.Syntax.CodeCompletion.ICodeSnippet)">
            <summary>
            Gets a boolean value indicating whether the multi-line snippet code should be indented when inserting to the edit control.
            </summary>
            <param name="snippet">Specifies given snippet</param>
            <returns>True if code should be indented, otherwise False</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.GetDescription(System.Int32)">
            <summary>
            Returns a content of the column, named 'Description', of the specified item from the collection.
            </summary>
            <param name="index">Index of the item within the collection.</param>
            <returns>String content of specified column.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.GetImageIndex(System.Int32)">
            <summary>
            Returns <c>ICodeSnippet.ImageIndex</c> from the snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from specified column and snippet.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
            <param name="column">Specifies index of the snippet.</param>
            <returns>Text representing specified snippet.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.GetText(System.Int32)">
            <summary>
            Returns value of <c>ICodeSnippetCode.Code</c> of the code snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.GetName(System.Int32)">
            <summary>
            Returns value <c>ICodeSnippetHeader.Title</c> of the code snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippets.GetParent">
            <summary>
            Returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippets.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippet</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippets.ColumnCount">
            <summary>
            Returns number of the columns. In this class <c>ColumnCount</c> always return 1.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippets.Images">
            <summary>
            Gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippets.EditPath">
            <summary>
            Gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippets.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippets</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetImport">
            <summary>
            Represents imported namespace used by an IntelliSense Code Snippet.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetImport.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetImport</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetImport.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetImport.Namespace">
            <summary>
            Specifies the namespace used by the code snippet
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetImport.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetImport</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetDeclaration">
            <summary>
            Represents literals and objects that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetDeclaration">
            <summary>
            Represents properties and methods describing literals and objects that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetDeclaration.Literals">
            <summary>
            When implemented by a class, defines the literals of the code snippet that you can edit
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetDeclaration.Objects">
            <summary>
            When implemented by a class, defines the objects of the code snippet that you can edit. 
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetDeclaration.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetDeclaration</c> with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetDeclaration.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetDeclaration.Literals">
            <summary>
            Defines the literals of the code snippet that you can edit
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetDeclaration.Objects">
            <summary>
            Defines the objects of the code snippet that you can edit. 
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetDeclaration.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetDeclaration</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.ISyntaxNodes">
            <summary>
            Represents collection containing list of syntax nodes.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNodes.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, updates all syntax nodes starting from specified position.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNodes.BlockDeleting(System.Drawing.Rectangle,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, removes all syntax nodes from the nodes collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove nodes.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlLexerInfo">
            <summary>
            Contains information about <c>ILexer</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexerInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexerInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexerInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLexerInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexerInfo.#ctor(QWhale.Syntax.Lexer.ILexer)">
            <summary>
            Initializes a new instance of the <c>XmlLexerInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexer</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexerInfo.Scheme">
            <summary>
            Stores <c>ILexer.Scheme</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexerInfo.DefaultState">
            <summary>
            Stores <c>ILexer.DefaultState</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.SyntaxAttribute">
            <summary>
            Represents a particular attribute of language element.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxAttribute.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxAttribute</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxAttribute.#ctor(System.Drawing.Point,System.String,System.Object)">
            <summary>
            Initializes a new instance of the <c>SyntaxAttribute</c> class with specified parameters.
            </summary>
            <param name="position">Specified attribute Position.</param>
            <param name="name">Specifies attribute Name.</param>
            <param name="value">Specifies attribute Value.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxAttribute.ToString">
            <summary>
            Returns a <c>String</c> that represents the current <c>SyntaxAttribute</c>.
            </summary>
            <returns>A <c>String</c>> that represents the current <c>SyntaxAttribute.</c></returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxAttribute.Clone">
            <summary>
            Creates a new object that is a copy of the current <c>ISyntaxAttribute</c> object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current SyntaxAttribute object.</returns>
        </member>
        <member name="P:QWhale.Syntax.SyntaxAttribute.Name">
            <summary>
            Get or sets attribute name.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxAttribute.Value">
            <summary>
            Get or sets value of the attribute.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxAttribute.Position">
            <summary>
            Get or sets attribute position in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxAttribute.EndPosition">
            <summary>
             get attribute end position in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxAttribute.Range">
            <summary>
            Gets attribute scope.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ParameterMember">
            <summary>
            Implements properties for a particular parameter member within list member parameters.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ParameterMember.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ParameterMember.Name">
            <summary>
            Gets or sets a string value that specifies name of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ParameterMember.DataType">
            <summary>
            Gets or sets a string value that specifies datatype of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ParameterMember.Description">
            <summary>
            Gets or sets a string value that specifies short description of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ParameterMember.Qualifier">
            <summary>
            Gets or sets a string value that specifies parameter modifier of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ParameterMember.Modifiers">
            <summary>
            Gets or sets a string value that specifies parameter modifier.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ParameterMember.Text">
            <summary>
            Gets or sets a string value that specifies parameter modifier of the <c>IParameterMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ParameterMember.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>ParameterMember</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICommentInfoItem">
            <summary>
            Stores simple text data related to popup hint.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICommentInfoItem.Text">
            <summary>
            When implemented by a class, gets or sets content of the <c>CommentInfoItem</c>.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.QuickInfoItem">
            <summary>
            Stores simple text data related to popup hint.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.QuickInfoItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>QuickInfoItem</c> class with specified settings.
            </summary>
            <param name="text">Test to store in this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.QuickInfoItem.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.QuickInfoItem.Text">
            <summary>
            Gets or sets content of the <c>IQuickInfoItem</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.QuickInfoItem.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>QuickInfoItem</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.IQuickInfo">
            <summary>
            Represents simple text data related to popup hint.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.IQuickInfo.Text">
            <summary>
            When implemented by a class, gets or sets content of the <c>IQuickInfo</c>.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.SnippetType">
            <summary>
            Defines snippet behaviour.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.SnippetType.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.SnippetType.SurroundsWith">
            <summary>
            Allows the code snippet to be placed around a selected piece of code
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.SnippetType.Expansion">
            <summary>
            Allows the code snippet to be inserted at the cursor.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.CodeCompletion.SnippetType.Refactoring">
            <summary>
            Specifies that the code snippet is used during Visual C# refactoring. Refactoring cannot be used in custom code snippets.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetType">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetType.SnippetType">
            <summary>
            When inplemented by a class, specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetMembers">
            <summary>
            Represents collection containing list of code snippets.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetMembers.AddSnippetMember">
            <summary>
            When implemented by a class, adds a new item to the <c>ICodeSnippetMembers</c> collection.
            </summary>
            <returns><c>ICodeSnippetMember</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetMembers.InsertSnippetMember(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ICodeSnippetMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetMember</c> that is inserted.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMembers.Parent">
            <summary>
            When implemented by a class, gets or sets a parent of the <c>ICodeSnippetMembers</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetMembers.Item(System.Int32)">
            <summary>
            When implemented by a class, provides an indexed access to <c>ICodeSnippetMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.HtmlLexerToken">
            <summary>
            Represents lexical tokens for Html parser.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.WhiteSpace">
            <summary>
            Specifies that lexical token corresponds to whitespace symbol.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.Body">
            <summary>
            Specifies that lexical token corresponds to html body.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.OpenTag">
            <summary>
            Specifies that lexical token corresponds to open tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.CloseTag">
            <summary>
            Specifies that lexical token corresponds to close tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.OpenEndTag">
            <summary>
            Specifies that lexical token corresponds to open end tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.CloseEndTag">
            <summary>
            Specifies that lexical token corresponds to close end tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.Equal">
            <summary>
            Specifies that lexical token corresponds to equality symbol.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.TagName">
            <summary>
            Specifies that lexical token corresponds to name of tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.ParamName">
            <summary>
            Specifies that lexical token corresponds to name of parameter.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.ParamValue">
            <summary>
            Specifies that lexical token corresponds to parameter value.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.HtmlLexerToken.Comment">
            <summary>
            Specifies that lexical token corresponds to html comment.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.HtmlParser">
            <summary>
            Represents properties and methods to perform syntax analysis of specified html code text.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.XmlParser">
            <summary>
            Represents properties and methods to perform syntax analysis of specified xml code text.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.SyntaxParser">
            <summary>
            Represents properties and methods to perform syntax analysis of the text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxParser</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ShouldSerializeCodeCompletionChars">
            <summary>
            Indicates whether the <c>CodeCompletionChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ShouldSerializeCodeCompletionStopChars">
            <summary>
            Indicates whether the <c>CodeCompletionStopChars</c> property should be persisted.
            </summary>
            <returns>True if <c>CodeCompletionStopChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ShouldSerializeSmartFormatChars">
            <summary>
            Indicates whether the <c>SmartFormatChars</c> property should be persisted.
            </summary>
            <returns>True if <c>SmartFormatChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ShouldSerializeAutoIndentChars">
            <summary>
            Indicates whether the <c>AutoIndentChars</c> property should be persisted.
            </summary>
            <returns>True if <c>AutoIndentChars</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ParseText(System.Int32,System.Int32,System.String,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="s">Text to analyse.</param>
            <param name="pos">Starting position.</param>
            <param name="len">Integer value to receive length of parsed element.</param>
            <param name="token">Retrieves style of text being parsed.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ParseText(System.Int32,System.Int32,System.String,System.Int16[]@)">
            <summary>
            Performs lexical analysis of given text.
            </summary>
            <param name="state">Specifies start lexical state.</param>
            <param name="line">Specifies current line within the text.</param>
            <param name="str">Text to analyse.</param>
            <param name="colorData">Receives color data representing lexical information of the given text.</param>
            <returns>Final lexical state.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.Reset">
            <summary>
            Resets <c>SyntaxParser</c> to the start position.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.Prepare(QWhale.Syntax.IStringList,QWhale.Syntax.ISyntaxTree,System.Boolean)">
            <summary>
            Sets lines to parse.
            <param name="lines">Strings to parse</param>
            <param name="syntaxTree">Specifies current parser tree.</param>
            <param name="useThread">Specifies whether parser should perform the task in the separate thread</param>
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ReparseText(System.Boolean)">
            <summary>
            Reparses entire text.
            <param name="useThread">Specifies whether parser should perform the task in the separate thread</param>
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.FinishParsing">
            <summary>
            Commits parsing process.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.StopParsing">
            <summary>
            When implemented by a class, aborts parsing process.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.Abort">
            <summary>
            Aborts parsing process by raising StopParseException exception.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.OnTextParsed">
            <summary>
            Raises TextParsed event.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ReparseText">
            <summary>
            Reparses entire text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ReparseBlock(System.Drawing.Point)">
            <summary>
            Reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ReparseBlock(System.Drawing.Point,System.String,QWhale.Syntax.ISyntaxNode@,QWhale.Syntax.CodeCompletionType)">
            <summary>
            Reparses syntax block at specified position.
            </summary>
            <param name="position">Specifies position to find syntax block.</param>
            <param name="text">Specifies source text.</param>
            <param name="node">Returns node corresponding to the block being reparsed</param>
            <param name="completionType">Specifies code completion reason.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.Outline(System.Collections.Generic.IList{QWhale.Common.IRange})">
            <summary>
            Creates outlined sections for parsed text using result of syntax analysis and fills ranges parameter by the collection of the outlined sections.
            </summary>
            <param name="ranges">Retrieves <c>IOutlineRange</c> collection for outlined sections.</param>
            <returns>Number of outlined sections.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetSmartIndent(System.Int32,System.Boolean)">
            <summary>
            Returns indentation level of specified line.
            </summary>
            <param name="index">Specifies index of line to obtain indentation level.</param>
            <param name="autoIndent">Indicates whether indentation level should be caculated automatically, or obtained from the previous line.</param>
            <returns>Indentation level at line specified by index.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetSmartIndent(System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Returns indentation level of specified line.
            </summary>
            <param name="index">Specifies index of line to obtain indentation level.</param>
            <param name="autoIndent">Indicates whether indentation level should be caculated automatically, or obtained from the previous line.</param>
            <param name="actualPosition">If true, the indentation position will be returned, otherwise, the level</param>
            <returns>Indentation level at line specified by index.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.SmartFormatLine(System.Int32,System.String,System.Int16[],QWhale.Syntax.ITextUndoList)">
            <summary>
            Formats line according to the parser rules.
            </summary>
            <param name="index">Specifies index of line to format.</param>
            <param name="text">specifies string representation of the line</param>
            <param name="textData">specifies data containing color information for the given string</param>
            <param name="operations">List containing insertion or deletion of text fragments</param>
            <returns>Indentation level at given line.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.SmartFormatLine(System.Int32,System.String,System.Int16[],QWhale.Syntax.ITextUndoList,System.Boolean@)">
            <summary>
            Formats line according to the parser rules.
            </summary>
            <param name="index">Specifies index of line to format.</param>
            <param name="text">specifies string representation of the line</param>
            <param name="textData">specifies data containing color information for the given string</param>
            <param name="operations">List containing insertion or deletion of text fragments</param>
            <param name="actualPosition">If true, the indentation position will be returned, otherwise, the level</param>
            <returns>Indentation level at given line.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetSyntaxErrors(System.Collections.Generic.IList{QWhale.Syntax.ISyntaxError})">
            <summary>
            Retrieves all syntax errors found while analysing the text.
            </summary>
            <param name="errors">Retrieves a collection of syntax error.</param>
            <returns>Number of syntax errors that are found.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.SupportsCodeCompletionFiltering(QWhale.Syntax.CodeCompletionType)">
            <summary>
            When implemented by a class, returns boolean value indicating that information can be filtered for given code completion type.
            </summary>
            <param name="completionType">given code completion type</param>
            <returns>true if code completion output can be filtered; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.CodeCompletion(System.String,System.Int16[],System.Drawing.Point,System.Boolean,QWhale.Syntax.CodeCompletionArgs)">
            <summary>
            When implemented by a class, performs code completion for the specified text representing language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies current position in text.</param>
            <param name="textData">specifies data containing color information for the given string</param>
            <param name="useThread">Specifies whether parser should perform the task in the separate thread</param>
            <param name="e">Contains data for the code completion.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.CodeCompletion(System.String,System.Int16[],System.Drawing.Point,QWhale.Syntax.CodeCompletionArgs)">
            <summary>
            Performs code completion for the specified text representing language element.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="textData">specifies data containing color information for the given string</param>
            <param name="position">Specifies current position in text.</param>
            <param name="e">Contains data for the code completion.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ProcessAutoComplete(System.String,System.Drawing.Point,System.String@)">
            <summary>
            Checks whether end-of-block code needs inserting.
            </summary>
            <param name="text">Specifies source text.</param>
            <param name="position">Specifies current position in text.</param>
            <param name="code">output prameter to return code fragment to be insered</param>
            <returns>true if autocompletion of end-of-block needed; otherwise false</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetSingleLineComment">
            <summary>
            Gets the string that represents start symbol of single line comment.
            </summary>
            <returns>Single line comment string.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetMultiLineComment(System.String@,System.String@)">
            <summary>
            Gets the start and and symbols multi-line comment.
            </summary>
            <param name="start">start symbol of multi-line comment</param>
            <param name="start">end symbol of multi-line comment</param>
            <returns>True if parser supports multi-line comment; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetAutoFormatNode(System.Drawing.Point,System.Boolean,System.Drawing.Point@)">
            <summary>
            Obtains block node at specified position.
            </summary>
            <param name="position">Position to check-up.</param>
            <param name="startPt">Retrieves position of block node.</param>
            <returns><c>ISyntaxNode</c> node representing block statement.</returns>
            <returns><c>ISyntaxNode</c> node representing block statement.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetNodeAt(System.Drawing.Point)">
            <summary>
            Gets <c>ISyntaxNode</c> that corresponds to the specified position.
            </summary>
            <param name="position">Position to find node.</param>
            <returns><c>ISyntaxNode</c> at specified position.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.IsDeclaration(QWhale.Syntax.ISyntaxNode)">
            <summary>
            Indicates whether specified node represents declaration elements.
            </summary>
            <param name="node">Specifies node to check-up.</param>
            <returns>True if specified node represents declaration element; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.FindDeclaration(System.String,System.Drawing.Point)">
            <summary>
            Finds the declaration node at given position.
            </summary>
            <param name="text">Contains string used to perform search.</param>
            <param name="position">Specifies position to find node.</param>
            <returns><c>ISyntaxNode</c> node representing declaration.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.FindReferences(QWhale.Syntax.ISyntaxNode,QWhale.Syntax.ISyntaxNodes)">
            <summary>
            Locates all references to the node in the text.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to find references.</param>
            <param name="references">Retrieves references to node.</param>
            <returns>Number of found references.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.IsCodeCompletionChar(System.Char,System.Byte,System.Int32@)">
            <summary>
            Returns boolean value indicating that given character initializes a code completion procedure when typing.
            </summary>
            <param name="ch">given character</param>
            <param name="style">Specifies text style at cursor</param>
            <param name="interval">Represents the delay, in miliiseconds before displaying code completion window.</param>
            <returns>true if given character is code completion character; otherwise false</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ResetCodeCompletionChars">
            <summary>
            Resets <c>CodeCompletionChars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ResetCodeCompletionStopChars">
            <summary>
            Resets <c>CodeCompletionStopChars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ResetAutoIndentChars">
            <summary>
            Resets <c>AutoIndentChars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.ResetSmartFormatChars">
            <summary>
            Resets <c>SmartFormatChars</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.IsContentDivider(System.Int32)">
            <summary>
            Gets boolean value indicating whether text content is divided at given line.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.CreateRepository">
            <summary>
            Creates <c>ICodeCompletionRepository</c> to perform code completion functionality for this parser.
            </summary>
            <returns><c>ICodeCompletionRepository</c> that is created.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetCompletionType(QWhale.Syntax.CodeCompletionArgs)">
            <summary>
            Obtains type of code completion window from specifies <c>CodeCompletionArgs</c> parameter.
            </summary>
            <param name="e">Contains data of code completion window.</param>
            <returns><c>CodeCompletionType</c> data of window to popup.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.GetCompletionType(System.Char)">
            <summary>
            Obtains type of code completion window from specifies <c>char</c> parameter.
            </summary>
            <param name="ch">Contains char beging typed.</param>
            <returns><c>CodeCompletionType</c> data of window to popup.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.LoadFile(System.String)">
            <summary>
            Loads the contents of the specified file.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.LoadFile(System.String,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified file with specified encoding.
            </summary>
            <param name="fileName">Name of file to load text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.LoadStream(System.IO.TextReader)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="reader">The TextReader object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.LoadStream(System.IO.Stream)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxParser.LoadStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Loads the contents of the specified stream.
            </summary>
            <param name="stream">The Stream object to read text.</param>
            <param name="encoding">Specifies the character encoding to use.</param>
            <returns>True is succeed; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.XmlScheme">
            <summary>
            Gets or sets an xml representation of <c>Scheme</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.Options">
            <summary>
            Gets or sets a flags determining syntax parsing and formatting behavior.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.ExpressionEvaluator">
            <summary>
            Gets or sets an <c>IExpressionEvaluator</c> instance using to evaluate conditional defines.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.SyntaxTree">
            <summary>
            Gets or sets a hierarchical collection of <c>ISyntaxNode</c> elements representing abstract syntax tree of the text being parsed.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.CompletionRepository">
            <summary>
            Gets or sets an <c>ICodeCompletionRepository</c> that holds methods for code completion purposes.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.CodeSnippets">
            <summary>
            When implemented by a class, returns code snippets for the given parser.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.CaseSensitive">
            <summary>
            Gets or sets a boolean value that indicates whether <c>SyntaxParser</c> should perform case-sensitive analysis of its content.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.UseScheme">
            <summary>
            Gets or sets a boolean value that indicates whether <c>ISyntaxParser</c> should perform lexical analysis based on it's rules rather than using internal method.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.CodeCompletionChars">
            <summary>
            Gets or sets a collection of characters that initializes a code completion procedure when typing.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.CodeCompletionStopChars">
            <summary>
            Gets or sets a collection of characters that finalizes a code completion procedure when typing.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.AutoIndentChars">
            <summary>
            Gets or sets a collection of characters that initializes an indentation procedure when typing.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.SmartFormatChars">
            <summary>
            Gets or sets a collection of characters that initializes a smart formatting procedure when typing.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.Aborted">
            <summary>
            Gets or sets boolean variable indicating whether parsing process has been aborted.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxParser.SupportsThread">
            <summary>
            Gets boolean value indicating whether parser supports working in thread.
            </summary>
        </member>
        <member name="E:QWhale.Syntax.SyntaxParser.TextReparsed">
            <summary>
            Occurs when <c>SyntaxParser</c> text content is fully parsed.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.XmlParser.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlParser</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.XmlParser.ReparseText">
            <summary>
            Reparses entire text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.XmlParser.ResetOptions">
            <summary>
            Resets <c>Options</c> to the default value.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.XmlParser.GetCompletionType(System.Char)">
            <summary>
            Obtains type of code completion window from specifies <c>char</c> parameter.
            </summary>
            <param name="ch">Contains char beging typed.</param>
            <returns><c>CodeCompletionType</c> data of window to popup.</returns>
        </member>
        <member name="M:QWhale.Syntax.XmlParser.GetMultiLineComment(System.String@,System.String@)">
            <summary>
            Gets the start and and symbols multi-line comment.
            </summary>
            <param name="start">start symbol of multi-line comment</param>
            <param name="start">end symbol of multi-line comment</param>
            <returns>True if parser supports multi-line comment; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.XmlParser.CaseSensitive">
            <summary>
            Gets or sets a boolean value that indicates whether <c>JavaScriptParser</c> should perform case-sensitive analysis of its content.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.HtmlParser.ResetAutoIndentChars">
            <summary>
            Resets <c>AutoIndentChars</c> to it's default value.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.HtmlParser.CaseSensitive">
            <summary>
            Gets or sets a boolean value that indicates whether <c>JavaScriptParser</c> should perform case-sensitive analysis of its content.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ILexStates">
            <summary>
            Represents properties and methods to provide an indexed access to individual <c>ILexState</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStates.AddLexState">
            <summary>
            When implemented by a class, adds a new item to the specified position within the <c>ILexStates</c> collection.
            </summary>
            <returns><c>ILexState</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStates.InsertLexState(System.Int32)">
            <summary>
            When implemented by a class, inserts a new item to the specified position within the <c>ILexStates</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexState</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.ILexStates.FindLexState(System.String)">
            <summary>
            When implemented by a class, finds <c>ILexState</c> by its name.
            </summary>
            <param name="name">Name of the <c>ILexState</c>.</param>
            <returns><c>ILexState</c> that is found.</returns>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CommentInfoItem">
            <summary>
            Stores simple text data related to popup hint.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CommentInfoItem.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>CommentInfoItem</c> class with specified settings.
            </summary>
            <param name="text">Test to store in this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CommentInfoItem.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CommentInfoItem.Text">
            <summary>
            Gets or sets content of the <c>ICommentInfoItem</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CommentInfoItem.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CommentInfoItem</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Design.LexSchemeConverter">
            <summary>
            Provides a type converter to convert <c>LineStyle</c> objects to and from various other representations.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Design.LexSchemeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert the object to the specified type, using the specified context.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="destinationType">A Type that represents the type you want to convert to.</param>
            <returns>True if this converter can perform the conversion; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Design.LexSchemeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts the given value object to the specified type, using the specified context and culture information.
            </summary>
            <param name="context">An ITypeDescriptorContext that provides a format context.</param>
            <param name="culture">A CultureInfo object. If a null reference, the current culture is assumed.</param>
            <param name="value">The Object to convert.</param>
            <param name="destinationType">The Type to convert the value parameter to.</param>
            <returns>An Object that represents the converted value.</returns>
        </member>
        <member name="T:QWhale.Syntax.SyntaxNodeOptions">
            <summary>
            Defines syntax node behavior.
            This enumeration has a <c>FlagsAttribute</c> attribute that allows a bitwise combination of its member values.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxNodeOptions.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxNodeOptions.Indentation">
            <summary>
            Specifies that syntax node increments indentation level.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxNodeOptions.BackIndentation">
            <summary>
            Specifies that syntax node decrements indentation level.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxNodeOptions.KeepIndentation">
            <summary>
            Specifies that syntax node preserves indentation level.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxNodeOptions.Outlining">
            <summary>
            Specifies that syntax node can be outlined.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.SyntaxNodeOptions.CodeCompletion">
            <summary>
            Specifies that syntax node supports code completion functionality.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ISyntaxNode">
            <summary>
            Represents properties and methods to describe a particular language element.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.Clear">
            <summary>
            When implemented by a class, removes all elements from child nodes, attribute and error collections.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.ClearAfter(System.Drawing.Point)">
            <summary>
            When implemented by a class, removes all elements from child nodes, attribute and error collections starting from given position.
            <param name="position">Specifies starting position</param>
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.Assign(QWhale.Syntax.ISyntaxNode)">
            <summary>
            Copies contents from another <c>ISyntaxNode</c> object.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddChild(QWhale.Syntax.ISyntaxNode)">
            <summary>
            When implemented by a class, adds specified node to the child collection.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to add.</param>
            <returns>Index of added node within the child collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddChild">
            <summary>
            When implemented by a class, creates a new <c>ISyntaxNode</c> and adds it to the child collection.
            </summary>
            <returns><c>ISyntaxNode</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.InsertChild(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, inserts specified node to the child collection.
            </summary>
            <param name="node">Specifies node to insert.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns>Index of inserted node in the child collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddChildren(QWhale.Syntax.ISyntaxNodes)">
            <summary>
            When implemented by a class, adds specified nodes to the child collection.
            </summary>
            <param name="nodes">Specifies list of nodes to add.</param>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddAttribute(QWhale.Syntax.ISyntaxAttribute)">
            <summary>
            When implemented by a class, adds specified attribute to the attribute collection.
            </summary>
            <param name="attr">Specifies <c>ISyntaxAttribute</c> to add.</param>
            <returns>Index of added attribute in the attribute collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddAttribute">
            <summary>
            When implemented by a class, creates a new <c>ISyntaxAttribute</c> and adds it to the attribute collection.
            </summary>
            <returns><c>ISyntaxAttribute</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddAttributes(QWhale.Syntax.ISyntaxAttributes)">
            <summary>
            When implemented by a class, adds specified attributes to the attribute collection.
            </summary>
            <param name="attrs">Specifies list of attributes to add.</param>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddError(QWhale.Syntax.ISyntaxError)">
            <summary>
            When implemented by a class, adds specified error to the error collection.
            </summary>
            <param name="err">Specifies <c>ISyntaxError</c> to add.</param>
            <returns>Number of added error in the error collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddError">
            <summary>
            When implemented by a class, creates a new <c>ISyntaxError</c> and add it to the error collection.
            </summary>
            <returns><c>ISyntaxError</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.AddErrors(QWhale.Syntax.ISyntaxErrors)">
            <summary>
            When implemented by a class, adds specified errors to the error collection.
            </summary>
            <param name="errs">Specifies list of errors to add.</param>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.HasAsParent(QWhale.Syntax.ISyntaxNode)">
            <summary>
            When implemented by a class, indicates whether the node has specified node as a parent node.
            </summary>
            <param name="node">node to test</param>
            <returns>true if node or one of its parents has a given node as a parent; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.FindNode(System.String)">
            <summary>
            When implemented by a class, finds child node by its name.
            </summary>
            <param name="name">Specifies name of node.</param>
            <returns>First occurence of <c>ISyntaxNode</c> with specified name.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.FindNode(System.Int32)">
            <summary>
            When implemented by a class, finds child node by its type.
            </summary>
            <param name="nodeType">Specifies type of node.</param>
            <returns>First occurence of <c>ISyntaxNode</c> with specified type.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.FindNode(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, finds specified child node.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns><c>ISyntaxNode</c> that is located.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.FindNodes(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode},QWhale.Syntax.ISyntaxNodes)">
            <summary>
            When implemented by a class, locates all nodes matching search criteria.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted node collection.</param>
            <returns>List of located nodes.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.FindAttribute(System.String)">
            <summary>
            When implemented by a class, finds attribute by its name.
            </summary>
            <param name="name">Specifies name of attribute</param>
            <returns>First occurence of <c>ISyntaxAttribute</c> with specified name.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.FindAttributes(System.String)">
            <summary>
            When implemented by a class, locates all attribute with given name.
            </summary>
            <param name="name">Specifies name of attribute</param>
            <returns>Array <c>ISyntaxAttribute</c> with specified name.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.Sort(System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, sorts the <c>ISyntaxNode</c> in the child list using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing nodes.</param>
            <remarks>This method is recursive, so if some node in the child collection has childs they are also sorted.</remarks>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.GetIndent(System.Int32,System.Int32)">
            <summary>
            When implemented by a class, returns indentation level of this syntax node.
            </summary>
            <param name="index">Specifies line to obtain indentation level.</param>
            <param name="indent">Default value of indentation level.</param>
            <returns>Indentation level of the node at the specified position.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.GetIndent(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            When implemented by a class, returns indentation level of this syntax node.
            </summary>
            <param name="index">Specifies line to obtain indentation level.</param>
            <param name="indent">Default value of indentation level.</param>
            <param name="actualPosition">If true, the indentation position will be returned, otherwise, the level</param>
            <returns>Indentation level of the node at the specified position.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.ContainsErrors">
            <summary>
            When implemented by a class, indicates whether node or its children contain errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, updates content of this <c>ISyntaxNode</c>.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxNode.BlockDeleting(System.Drawing.Rectangle,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, removes node's inside the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove node's content.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Range">
            <summary>
            When implemented by a class, gets or sets node scope.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Position">
            <summary>
            When implemented by a class, gets or sets node position in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Size">
            <summary>
            When implemented by a class, gets or sets node dimension.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Name">
            <summary>
            When implemented by a class, gets or sets node name.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.NodeType">
            <summary>
            When implemented by a class, gets or sets type of the node.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Parent">
            <summary>
            When implemented by a class, gets or sets <c>ISyntaxNode</c> that holds this node in its child list.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Root">
            <summary>
            When implemented by a class, represents root level <c>ISyntaxNode</c> in the syntax tree.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Options">
            <summary>
            When implemented by a class, gets or sets node options that defines its behavior.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Childs">
            <summary>
            When implemented by a class, gets or sets a collection of child nodes in the form of array.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Attributes">
            <summary>
            When implemented by a class, gets or sets an attribute collection in the form of array.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Errors">
            <summary>
            When implemented by a class, gets or sets an error collection in the form of array.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.ChildList">
            <summary>
            When implemented by a class, gets a list of child nodes.
            </summary>
            <remarks>If there is no child nodes, contains null reference.</remarks>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.AttributeList">
            <summary>
            When implemented by a class, gets a list of attributes
            </summary>
            <remarks>If there is no attributes, contains null reference.</remarks>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.ErrorList">
            <summary>
            When implemented by a class, gets a list of syntax errors
            </summary>
            <remarks>If there is no errors, contains null reference.</remarks>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.HasChildren">
            <summary>
            When implemented by a class, indicates whether node has children.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.HasAttributes">
            <summary>
            When implemented by a class, indicates whether node has attributes.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.HasErrors">
            <summary>
            When implemented by a class, indicates whether node has errors.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Level">
            <summary>
            When implemented by a class, represents node level inside SyntaxTree.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.ChildCount">
            <summary>
            When implemented by a class, represents number of children in the child collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.AttributeCount">
            <summary>
            When implemented by a class, represents number of attributes in the attribute collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.ErrorCount">
            <summary>
            When implemented by a class, represents number of syntax errors in the error collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxNode.Index">
            <summary>
            When implemented by a class, represents index of then node within its parent child collection.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetMembersInfo">
            <summary>
            Contains information about <c>ICodeSnippetMembers</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetMembersInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetMembersInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetMembersInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetMembersInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetMembersInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetMembers)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetMembersInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetMembers</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetMembersInfo.Members">
            <summary>
            Stores <c>ICodeSnippetMembers.Members</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetType">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetType.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetType</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetType.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetType.SnippetType">
            <summary>
            Specifies how the code snippet is inserted into the code.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetType.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetType</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.ReadFormattedTextEventArgs">
            <summary>
            Provides data for the <c>FmtImport.ReadFormattedText</c> handler.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ReadFormattedTextEventArgs.Text">
            <summary>
            Starting the text fragment.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ReadFormattedTextEventArgs.ForeColor">
            <summary>
            Foreground color of the text fragment.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ReadFormattedTextEventArgs.BackColor">
            <summary>
            Background color of the text fragment.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ReadFormattedTextEventArgs.FontStyle">
            <summary>
            FontStyle of the text fragment.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ReadFormattedTextEventArgs.UserData">
            <summary>
            User-defined data.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ReadFormattedTextEvent">
            <summary>
            Represents a method that will handle the <c>FmtImport.ReadFormattedText</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ReadFormattedTextEventArgs</c> that contains the event data.</param>	
        </member>
        <member name="T:QWhale.Syntax.Lexer.ParseTextEventArgs">
            <summary>
            Provides data for the <c>ILexer.TextParsed</c> event.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.ParseTextEventArgs.String">
            <summary>
            Represents parsed text line.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.Lexer.ParseTextEventArgs.ColorData">
            <summary>
            Represents color information for the parsed line.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.ParseTextEvent">
            <summary>
            Represents a method that will handle the <c>ILexer.Parse</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>ParseTextEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Syntax.OutlineRange">
            <summary>
            Represents individual outlining section that can appear in the Edit control.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.OutlineRange.#ctor">
            <summary>
            Initializes a new instance of the <c>OutlineRange</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.OutlineRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <c>OutlineRange</c> class with specified parameters.
            </summary>
            <param name="start">Specifies start position of the text to outline.</param>
            <param name="end">Specifies end position of the text to outline.</param>
            <param name="level">Specifies level of outline nesting for new instance.</param>
            <param name="text">Specifies text substituting collapsed outline section.</param>
        </member>
        <member name="M:QWhale.Syntax.OutlineRange.#ctor(System.Drawing.Point,System.Drawing.Point,System.Int32,System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <c>OutlineRange</c> class with specified parameters.
            </summary>
            <param name="start">Specifies start position of the text to outline.</param>
            <param name="end">Specifies end position of the text to outline.</param>
            <param name="level">Specifies level of outline nesting for new instance.</param>
            <param name="text">Specifies text substituting collapsed outline section.</param>
            <param name="visible">Indicates whether this new instance is visible (expanded).</param>
        </member>
        <member name="M:QWhale.Syntax.OutlineRange.Clone">
            <summary>
            Creates a new object that is a copy of the current <c>IOutlineRange</c> object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current OutlineRange object.</returns>
        </member>
        <member name="P:QWhale.Syntax.OutlineRange.Text">
            <summary>
            Represents text substituting collapsed outline section.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.OutlineRange.DisplayText">
            <summary>
            Represents text substituting collapsed outline section if outline buttons are displayed.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.OutlineRange.Visible">
            <summary>
            Gets or sets a value indicating whether outline section is visible (expanded).
            </summary>
        </member>
        <member name="P:QWhale.Syntax.OutlineRange.Level">
            <summary>
            Represents level of outline nesting for the outline section.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetObjectInfo">
            <summary>
            Contains information about <c>ICodeSnippetObject</c> object's settings.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo">
            <summary>
            Contains information about <c>ICodeSnippetLiteral</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetLiteralInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetLiteral)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetLiteralInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetLiteral</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.Default">
            <summary>
            Stores <c>ICodeSnippetLiteral.Default</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.Function">
            <summary>
            Stores <c>ICodeSnippetLiteral.Function</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.ID">
            <summary>
            Stores <c>ICodeSnippetLiteral.ID</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.ToolTip">
            <summary>
            Stores <c>ICodeSnippetLiteral.ToolTip</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.Editable">
            <summary>
            Stores <c>ICodeSnippetLiteral.Editable</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetLiteralInfo.Type">
            <summary>
            Stores <c>ICodeSnippetLiteral.Type</c> property.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetObjectInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetObjectInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetObjectInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetObject)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetObjectInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetObject</c> object to store settings.</param>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetDeclarationInfo">
            <summary>
            Contains information about <c>ICodeSnippetDeclaration</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetDeclarationInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetDeclarationInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetDeclarationInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetDeclarationInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetDeclarationInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetDeclaration)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetDeclarationInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetDeclaration</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetDeclarationInfo.Literals">
            <summary>
            Stores <c>ICodeSnippetLiteral.Literals</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetDeclarationInfo.Objects">
            <summary>
            Stores <c>ICodeSnippetLiteral.Literals</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ISyntaxTree">
            <summary>
            Represents properties and methods to describe syntax structure of code text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxTree.Clear">
            <summary>
            When implemented by a class, removes all nodes from <c>ISyntaxTree</c> node collection.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxTree.Push(QWhale.Syntax.ISyntaxNode)">
            <summary>
            When implemented by a class, adds specified node to the stack of nodes.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to add.</param>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxTree.Pop">
            <summary>
            When implemented by a class, removes last added node from the stack of nodes.
            </summary>
            <returns><c>ISyntaxNode</c> that is removed.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxTree.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            When implemented by a class, removes all nodes from the node collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax nodes.</param>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxTree.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            When implemented by a class, changes positions of any syntax nodes and its elements located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxTree.FindNode(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, finds specified node.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted node collection.</param>
            <returns><c>ISyntaxNode</c> that is located.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxTree.FindNodes(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode},QWhale.Syntax.ISyntaxNodes)">
            <summary>
            When implemented by a class, locates all nodes matching search criteria.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted node collection.</param>
            <returns>List of located nodes.</returns>
        </member>
        <member name="M:QWhale.Syntax.ISyntaxTree.Sort(System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, sorts all <c>ISyntaxNode</c> in the node collection using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing nodes.</param>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxTree.Root">
            <summary>
            When implemented by a class, represents root level <c>ISyntaxNode</c> in this syntax tree.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.ISyntaxTree.Current">
            <summary>
            When implemented by a class, represents current <c>ISyntaxNode</c> in the node collection.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.ICodeSnippetCode">
            <summary>
            Specifies the code that you want to insert into a file.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.ICodeSnippetCode.Assign(QWhale.Syntax.CodeCompletion.ICodeSnippetCode)">
            <summary>
            When implemented by a class, copies the contents of another <c>ICodeSnippetCode</c> object.
            </summary>
            <param name="source">Specifies <c>ICodeSnippetCode</c> to assign.</param>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetCode.Delimiter">
            <summary>
            When inplemented by a class, specifies the delimiter used to describe literals and objects in the code.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetCode.Kind">
            <summary>
            When inplemented by a class, specifies the kind of code the snippet contains, and thus, where the snippet can be inserted. 
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetCode.Language">
            <summary>
            When inplemented by a class, specifies the language of the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.ICodeSnippetCode.Code">
            <summary>
            When inplemented by a class, specifies the code that you want to insert into a file.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.SyntaxNodes">
            <summary>
            Represents collection containing list of syntax nodes.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNodes.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            Updates specified position by DeltaX and DeltaY values for any nodes in the collection.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNodes.BlockDeleting(System.Drawing.Rectangle,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            Removes all nodes from specified region.
            </summary>
            <param name="rect">Specifies rectangle to remove nodes from.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="T:QWhale.Syntax.SyntaxNode">
            <summary>
            Represents a particular language element.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxNode</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.#ctor(System.Drawing.Point,System.String)">
            <summary>
            Initializes a new instance of the <c>SyntaxNode</c> class with specified parameters.
            </summary>
            <param name="position">Specifies node Position.</param>
            <param name="name">Specifies node Name.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.#ctor(System.Drawing.Point,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <c>SyntaxNode</c> class with specified parameters.
            </summary>
            <param name="position">Specifies node Position.</param>
            <param name="name">Specifies node Name.</param>
            <param name="nodeType">Specifies node type.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.#ctor(System.Drawing.Point,System.String,System.Int32,QWhale.Syntax.SyntaxNodeOptions)">
            <summary>
            Initializes a new instance of the <c>SyntaxNode</c> class with specified parameters.
            </summary>
            <param name="position">Specifies node Position.</param>
            <param name="name">Specifies node Name.</param>
            <param name="nodeType">Specifies node type.</param>
            <param name="options">Specifies node options.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.ToString">
            <summary>
            Returns a <c>String</c> that represents the current <c>SyntaxNode</c>.
            </summary>
            <returns>A <c>String</c>> that represents the current <c>SyntaxNode.</c></returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            Updates content of this <c>ISyntaxNode</c>.
            </summary>
            <param name="x">Index of current character in the text.</param>
            <param name="y">Index of current line in the text.</param>
            <param name="deltaX">Horizontal displacement.</param>
            <param name="deltaY">Vertical displacement.</param>
            <param name="comparer">Object that exposes a method to compare two objects.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.BlockDeleting(System.Drawing.Rectangle,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            When implemented by a class, removes node's inside the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove node's content.</param>
            <param name="comparer">Search criteria.</param>
            <returns>True if succeed; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.Clear">
            <summary>
            Removes all elements from child nodes, attribute and error collections.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.ClearAfter(System.Drawing.Point)">
            <summary>
            Removes all elements from child nodes, attribute and error collections starting from given position.
            <param name="position">Specifies starting position</param>
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddChild(QWhale.Syntax.ISyntaxNode)">
            <summary>
            Adds specified node to the child collection.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to add.</param>
            <returns>Index of added node within the child collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddChild">
            <summary>
            Creates a new <c>ISyntaxNode</c> and adds it to the child collection.
            </summary>
            <returns><c>ISyntaxNode</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.InsertChild(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            Inserts specified node to the child collection.
            </summary>
            <param name="node">Specifies node to insert.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns>Index of inserted node in the child collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddChildren(QWhale.Syntax.ISyntaxNodes)">
            <summary>
            Adds specified nodes to the child collection.
            </summary>
            <param name="nodes">Specifies list of nodes to add.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddAttribute(QWhale.Syntax.ISyntaxAttribute)">
            <summary>
            Adds specified attribute to the attribute collection.
            </summary>
            <param name="attr">Specifies <c>ISyntaxAttribute</c> to add.</param>
            <returns>Index of added attribute in the attribute collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddAttribute">
            <summary>
            Creates a new <c>ISyntaxAttribute</c> and adds it to the attribute collection.
            </summary>
            <returns><c>ISyntaxAttribute</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddAttributes(QWhale.Syntax.ISyntaxAttributes)">
            <summary>
            Adds specified attributes to the attribute collection.
            </summary>
            <param name="attrs">Specifies list of attributes to add.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddError(QWhale.Syntax.ISyntaxError)">
            <summary>
            Adds specified error to the error collection.
            </summary>
            <param name="err">Specifies <c>ISyntaxError</c> to add.</param>
            <returns>Number of added error in the error collection.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddError">
             <summary>
            Creates a new <c>ISyntaxError</c> and add it to the error collection.
             </summary>
             <returns><c>ISyntaxError</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.AddErrors(QWhale.Syntax.ISyntaxErrors)">
            <summary>
            Adds specified errors to the error collection.
            </summary>
            <param name="errs">Specifies list of errors to add.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.HasAsParent(QWhale.Syntax.ISyntaxNode)">
            <summary>
            Indicates whether the node has specified node as a parent node.
            </summary>
            <param name="node">node to test</param>
            <returns>true if node or one of its parents has a given node as a parent; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.FindNode(System.String)">
            <summary>
            Finds child node by its name.
            </summary>
            <param name="name">Specifies name of node.</param>
            <returns>First occurence of <c>ISyntaxNode</c> with specified name.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.FindNode(System.Int32)">
            <summary>
            Finds child node by its type.
            </summary>
            <param name="nodeType">Specifies type of node.</param>
            <returns>First occurence of <c>ISyntaxNode</c> with specified type.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.FindNode(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            Finds child node by comparing nodes with the given object.
            </summary>
            <param name="node">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted child collection.</param>
            <returns><c>ISyntaxNode</c> that is located.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.FindNodes(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode},QWhale.Syntax.ISyntaxNodes)">
            <summary>
            Locates all nodes matching search criteria.
            </summary>
            <param name="node">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted node collection.</param>
            <returns>List of located nodes.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.FindAttribute(System.String)">
            <summary>
            Finds attribute by its name.
            </summary>
            <param name="name">Specifies name of attribute</param>
            <returns>First occurence of <c>ISyntaxAttribute</c> with specified name.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.FindAttributes(System.String)">
            <summary>
            Locates all attribute with given name.
            </summary>
            <param name="name">Specifies name of attribute</param>
            <returns>Array <c>ISyntaxAttribute</c> with specified name.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.Sort(System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            Sorts the <c>ISyntaxNode</c> in the child list using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing nodes.</param>
            <remarks>This method is recursive, so if some node in the child collection has childs they are also sorted.</remarks>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.GetIndent(System.Int32,System.Int32)">
            <summary>
            Returns indentation level of this syntax node.
            </summary>
            <param name="index">Specifies line to obtain indentation level.</param>
            <param name="indent">Default value of indentation level.</param>
            <returns>Indentation level of the node at the specified position.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.GetIndent(System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Returns indentation level of this syntax node.
            </summary>
            <param name="index">Specifies line to obtain indentation level.</param>
            <param name="indent">Default value of indentation level.</param>
            <param name="actualPosition">If true, the indentation position will be returned, otherwise, the level</param>
            <returns>Indentation level of the node at the specified position.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.ContainsErrors">
            <summary>
            Indicates whether node or its children contain errors.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.Assign(QWhale.Syntax.ISyntaxNode)">
            <summary>
            Copies contents from another <c>ISyntaxNode</c> object.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxNode.Clone">
            <summary>
            Creates a new object that is a copy of the current <c>ISyntaxNode</c> object.
            </summary>
            <returns>A new instance of System.Object that is the memberwise clone of the current SyntaxNode object.</returns>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Range">
            <summary>
            Gets or sets node scope.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Position">
            <summary>
            Gets or sets node position in the code text.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Size">
            <summary>
            Gets or sets node dimension.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Name">
            <summary>
            Gets or sets node name.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.NodeType">
            <summary>
            Gets or sets type of the node.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Parent">
            <summary>
            Gets or sets <c>ISyntaxNode</c> that holds this node in its child list.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Root">
            <summary>
            Represents root level <c>ISyntaxNode</c> in the syntax tree.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Options">
            <summary>
            Gets or sets node options that defines its behavior.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Childs">
            <summary>
            Gets or sets a collection of child nodes in the form of array.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Attributes">
            <summary>
            Gets or sets an attribute collection in the form of array.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Errors">
            <summary>
            Gets or sets an error collection in the form of array.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.ChildList">
            <summary>
            Gets a list of child nodes.
            </summary>
            <remarks>If there is no child nodes, contains null reference.</remarks>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.AttributeList">
            <summary>
            Gets a list of attributes.
            </summary>
            <remarks>If there is no attributes, contains null reference.</remarks>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.ErrorList">
            <summary>
            Gets a list of syntax errors.
            </summary>
            <remarks>If there is no errors, contains null reference.</remarks>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.HasChildren">
            <summary>
            Indicates whether node has children.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.HasAttributes">
            <summary>
            Indicates whether node has attributes.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.HasErrors">
            <summary>
            Indicates whether node has errors.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Level">
            <summary>
            Represents node level inside SyntaxTree.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.ChildCount">
            <summary>
            Represents number of children in the child collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.AttributeCount">
            <summary>
            Represents number of attributes in the attribute collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.ErrorCount">
            <summary>
            Represents number of syntax errors in the error collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxNode.Index">
            <summary>
            Represents index of then node within its parent child collection.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.QuickInfo">
            <summary>
            Represents simple text data related to popup hint.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.QuickInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>QuickInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.QuickInfo.GetName(System.Int32)">
            <summary>
            Returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.QuickInfo.GetText(System.Int32)">
            <summary>
            Returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
            <remarks>In this class method returns the same value with <c>GetName</c> method.</remarks>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.QuickInfo.Text">
            <summary>
            Gets or sets content of the <c>IQuickInfo</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.QuickInfo.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>QuickInfo</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetObject">
            <summary>
            Represents literal that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetObject.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetObject</c> class with default settings.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetMember">
            <summary>
            Represents properties and methods for a particular code snippet member in the data collection of the code completion popups.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMember.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetMember</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMember.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetMembers)">
            <summary>
            Initializes a new instance of the <c>CodeSnippetMembers</c> class with specified parent.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMember.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.Name">
            <summary>
            Gets or sets a string value that specifies the name of the <c>IListMember</c>. Useful to find necessary item within the <c>ICodeSnippetMember</c> collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.EditPath">
            <summary>
            Gets a string value that specifies the full path of the <c>IListMember</c>. 
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.Path">
            <summary>
            Gets or sets a string value that specifies the path to the file containing source of the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the <c>ICodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.Members">
            <summary>
            Provides an indexed access to the nested <c>ICodeSnippetMember</c> objects.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.Snippets">
            <summary>
            Provides an indexed access to the nested<c>ICodeSnippet</c> objects.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.SnippetsAndMembers">
            <summary>
            Provides an indexed access to the nested snippets and members objects.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.Parent">
            <summary>
            Gets or sets a parent of the <c>CodeSnippetMember</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMember.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetMember</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetImportInfo">
            <summary>
            Contains information about <c>ICodeSnippetImport</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetImportInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetImportInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetImportInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetImportInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetImportInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetImport)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetImportInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetImport</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetImportInfo.Namespace">
            <summary>
            Stores <c>ICodeSnippetImport.Namespace</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo">
            <summary>
            Contains information about <c>ICodeSnippetHeader</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetHeaderInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetHeader)">
            <summary>
            Initializes a new instance of the <c>XmlCodeSnippetHeaderInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ICodeSnippetHeader</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.ShouldSerializeSnippetTypes">
            <summary>
            Indicates whether the <c>SnippetTypes</c> property should be persisted.
            </summary>
            <returns>True if <c>SnippetTypes</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.Title">
            <summary>
            Stores <c>ICodeSnippetHeader.Title</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.Description">
            <summary>
            Stores <c>ICodeSnippetHeader.Description</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.Author">
            <summary>
            Stores <c>ICodeSnippetHeader.Author</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.Shortcut">
            <summary>
            Stores <c>ICodeSnippetHeader.Shortcut</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlCodeSnippetHeaderInfo.SnippetTypes">
            <summary>
            Stores <c>ICodeSnippetHeader.SnippetTypes</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexerProc">
            <summary>
            Represents a method intendent to perform lexical analysis.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CommentInfo">
            <summary>
            Represents simple text data related to popup hint.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CommentInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>QuickInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CommentInfo.GetName(System.Int32)">
            <summary>
            Returns string reperesenting name of the item.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>String representing name of specified item.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CommentInfo.GetText(System.Int32)">
            <summary>
            Returns string representing default column.
            </summary>
            <param name="index">Index of item within collection.</param>
            <returns>Text representing default column.</returns>
            <remarks>In this class method returns the same value with <c>GetName</c> method.</remarks>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CommentInfo.Text">
            <summary>
            Gets or sets content of the <c>ICommentInfo</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CommentInfo.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CommentInfo</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo">
            <summary>
            Contains information about <c>ILexSyntaxBlock</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLexSyntaxBlockInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.#ctor(QWhale.Syntax.Lexer.ILexSyntaxBlock)">
            <summary>
            Initializes a new instance of the <c>XmlLexSyntaxBlockInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexSyntaxBlock</c> object to store settings.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.ShouldSerializeExpressions">
            <summary>
            Indicates whether the <c>Expressions</c> property should be persisted.
            </summary>
            <returns>True if <c>Expressions</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.ShouldSerializeReswordSets">
            <summary>
            Indicates whether the <c>ReswordSets</c> property should be persisted.
            </summary>
            <returns>True if <c>ReswordSets</c> differs from its default value; otherwise false.</returns>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.Name">
            <summary>
            Stores <c>ILexSyntaxBlock.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.Desc">
            <summary>
            Stores <c>ILexSyntaxBlock.Desc</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.LexStyle">
            <summary>
            Stores <c>ILexSyntaxBlock.LexStyle</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.LeaveState">
            <summary>
            Stores <c>ILexSyntaxBlock.LeaveState</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.ReswordSets">
            <summary>
            Stores <c>ILexSyntaxBlock.ReswordSets</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexSyntaxBlockInfo.Expressions">
            <summary>
            Stores <c>ILexSyntaxBlock.Expressions</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetCode">
            <summary>
            Specifies the code that you want to insert into a file.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetCode.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetCode</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetCode.Assign(QWhale.Syntax.CodeCompletion.ICodeSnippetCode)">
            <summary>
            Copies the contents of another <c>ICodeSnippetCode</c> object.
            </summary>
            <param name="source">Specifies <c>ICodeSnippetCode</c> to assign.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetCode.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetCode.Delimiter">
            <summary>
            Specifies the delimiter used to describe literals and objects in the code.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetCode.Kind">
            <summary>
            Specifies the kind of code the snippet contains, and thus, where the snippet can be inserted. 
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetCode.Language">
            <summary>
            Specifies the language of the code snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetCode.Code">
            <summary>
            Specifies the code that you want to insert into a file.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetCode.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetCode</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippet">
            <summary>
            Represents particular code snippet in the snippets collection.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippet.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippets</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippet.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippets)">
            <summary>
            Initializes a new instance of the <c>CodeSnippet</c> class with specified parent.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippet.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified object and returns an indication of their relative values.
            </summary>
            <param name="value"></param>
            <returns>A signed number indicating the relative values of this instance and value.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.Header">
            <summary>
            Gets a header associated with the snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.Declarations">
            <summary>
            Specifies the literals and objects that make up the parts of a code snippet that you can edit.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.Imports">
            <summary>
            Contains the imported namespaces for the code snippet
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.References">
            <summary>
            Contains information about assembly references for the code snippet
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.Code">
            <summary>
            Gets or sets a string value that specifies code of the snippet. The code completion control, that holds a snippet collection inserts code when user accepts the input.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.Description">
            <summary>
            Gets string value representing descripton of the <c>CodeSnippet</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.ImageIndex">
            <summary>
            Gets or sets the index of the image displayed for the snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.CustomData">
            <summary>
            Gets or sets an object that can hold a user defined data attached to the snippet.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.Parent">
            <summary>
            Gets or sets a parent of the <c>CodeSnippet</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippet.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippet</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlLexStyleInfo">
            <summary>
            Contains information about <c>ILexStyle</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStyleInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStyleInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStyleInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlLexStyleInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlLexStyleInfo.#ctor(QWhale.Syntax.Lexer.ILexStyle)">
            <summary>
            Initializes a new instance of the <c>XmlLexStyleInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexStyle</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.Name">
            <summary>
            Stores <c>ILexStyle.Name</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.Desc">
            <summary>
            Stores <c>ILexStyle.Desc</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.ForeColor">
            <summary>
            Stores <c>ILexStyle.ForeColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.BackColor">
            <summary>
            Stores <c>ILexStyle.BackColor</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.FontStyle">
            <summary>
            Stores <c>ILexStyle.FontStyle</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.PlainText">
            <summary>
            Stores <c>ILexStyle.PlainText</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.ForeColorEnabled">
            <summary>
            Stores <c>ILexStyle.ForeColorEnabled</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.BackColorEnabled">
            <summary>
            Stores <c>ILexStyle.BackColorEnabled</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.BoldEnabled">
            <summary>
            Stores <c>ILexStyle.BoldEnabled</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.ItalicEnabled">
            <summary>
            Stores <c>ILexStyle.ItalicEnabled</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlLexStyleInfo.UnderlineEnabled">
            <summary>
            Stores <c>ILexStyle.UnderlineEnabled</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.XmlLexerToken">
            <summary>
            Represents lexical tokens for Xml parser.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.WhiteSpace">
            <summary>
            Specifies that lexical token corresponds to whitespace symbol.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.Body">
            <summary>
            Specifies that lexical token corresponds to xml body.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.OpenTag">
            <summary>
            Specifies that lexical token corresponds to open tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.CloseTag">
            <summary>
            Specifies that lexical token corresponds to close tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.OpenEndTag">
            <summary>
            Specifies that lexical token corresponds to open end tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.CloseEndTag">
            <summary>
            Specifies that lexical token corresponds to close end tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.Equal">
            <summary>
            Specifies that lexical token corresponds to comment tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.TagName">
            <summary>
            Specifies that lexical token corresponds to name of tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.ParamName">
            <summary>
            Specifies that lexical token corresponds to name of parameter.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.ParamValue">
            <summary>
            Specifies that lexical token corresponds to parameter value.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.Comment">
            <summary>
            Specifies that lexical token corresponds to equality symbol.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.Interr">
            <summary>
            Specifies that lexical token corresponds to "?" symbol.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.CDATA">
            <summary>
            Specifies that lexical token corresponds to CDATA tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlLexerToken.CDATABody">
            <summary>
            Specifies that lexical token corresponds to CDATA body tag.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.XmlNodeType">
            <summary>
            Represents node types for Xml parser.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlNodeType.None">
            <summary>
            Specifies that no flags are in effect.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlNodeType.XmlUnit">
            <summary>
            Specifies that xml node corresponds to entire unit.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlNodeType.XmlOpenTag">
            <summary>
            Specifies that xml node corresponds to xml open tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlNodeType.XmlCloseTag">
            <summary>
            Specifies that xml node corresponds to xml close tag.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlNodeType.XmlParameter">
            <summary>
            Specifies that xml node corresponds to xml parameter.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlNodeType.XmlParameters">
            <summary>
            Specifies that xml node corresponds to list of xml parameters.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlNodeType.XmlBody">
            <summary>
            Specifies that xml node corresponds to xml body.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.XmlNodeType.XmlComment">
            <summary>
            Specifies that xml node corresponds to xml comment.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlListMembersInfo">
            <summary>
            Contains information about <c>IListMembers</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMembersInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMembersInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMembersInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlListMembersInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlListMembersInfo.#ctor(QWhale.Syntax.CodeCompletion.IListMembers)">
            <summary>
            Initializes a new instance of the <c>XmlListMembersInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IListMembers</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMembersInfo.ShowDescriptions">
            <summary>
            Stores <c>IListMembers.ShowHints</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMembersInfo.ShowHints">
            <summary>
            Stores <c>IListMembers.ShowHints</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMembersInfo.ShowQualifiers">
            <summary>
            Stores <c>IListMembers.ShowQualifiers</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMembersInfo.ShowResults">
            <summary>
            Stores <c>IListMembers.ShowResults</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMembersInfo.ShowParams">
            <summary>
            Stores <c>IListMembers.ShowParams</c> property.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlListMembersInfo.Members">
            <summary>
            Stores list of <c>IListMember</c> objects.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.SyntaxTree">
            <summary>
            Describes syntax structure of code text.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.#ctor">
            <summary>
            Initializes a new instance of the <c>SyntaxTree</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.Clear">
            <summary>
            Removes all nodes from <c>SyntaxTree</c> node collection.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.Push(QWhale.Syntax.ISyntaxNode)">
            <summary>
            Adds specified node to the stack of nodes.
            </summary>
            <param name="node">Specifies <c>ISyntaxNode</c> to add.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.Pop">
            <summary>
            Removes last added node from the stack of nodes.
            </summary>
            <returns><c>ISyntaxNode</c> that is removed.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.BlockDeleting(System.Drawing.Rectangle)">
            <summary>
            Removes all nodes from the node collection which position in the specified rectangle.
            </summary>
            <param name="rect">Specified rectangle to remove syntax nodes.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.PositionChanged(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes positions of any syntax nodes and its elements located next to the specified position.
            </summary>
            <param name="x">The X-constituent of the Point value that specifies start position to change.</param>
            <param name="y">The Y-constituent of the Point value that specifies start position to change.</param>
            <param name="deltaX">Specifies horizontal displacement.</param>
            <param name="deltaY">Specifies vertical displacement.</param>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.FindNode(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            Finds specified node.
            </summary>
            <param name="obj">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted node collection.</param>
            <returns><c>ISyntaxNode</c> that is located.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.FindNodes(QWhale.Syntax.ISyntaxNode,System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode},QWhale.Syntax.ISyntaxNodes)">
            <summary>
            Locates all nodes matching search criteria.
            </summary>
            <param name="node">Specifies node to locate.</param>
            <param name="comparer">Specifies method that compares nodes in the sorted node collection.</param>
            <returns>List of located nodes.</returns>
        </member>
        <member name="M:QWhale.Syntax.SyntaxTree.Sort(System.Collections.Generic.IComparer{QWhale.Syntax.ISyntaxNode})">
            <summary>
            Sorts all <c>ISyntaxNode</c> in the node collection using the specified comparer.
            </summary>
            <param name="comparer">The IComparer implementation to use when comparing nodes.</param>
        </member>
        <member name="P:QWhale.Syntax.SyntaxTree.Root">
            <summary>
            Represents root level <c>ISyntaxNode</c> in this syntax tree.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.SyntaxTree.Current">
            <summary>
            Represents current <c>ISyntaxNode</c> (node on top of the stack) in the node collection.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.ShowingEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionProvider.ShowPopup</c> event.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ShowingEventArgs.Provider">
            <summary>
            Represents the object that provides data for code completion window.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.ShowingEventArgs.NeedShow">
            <summary>
            Represents a value indicating whether the popup window needs showing.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.ShowingEventArgs.#ctor(QWhale.Syntax.CodeCompletion.ICodeCompletionProvider)">
            <summary>
            Initializes a new instance of the <c>ShowingEventArgs</c> class with specific provider.
            </summary>
            <param name="provider">Specifies Provider property for this new instance.</param>
        </member>
        <member name="T:QWhale.Syntax.ShowPopupEvent">
            <summary>
            Represents a method that will handle the <c>CodeCompletionProvider.ShowPopup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>ShowingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="T:QWhale.Syntax.CodeCompletion.CodeSnippetMembers">
            <summary>
            Represents collection containing list of code templates.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.#ctor">
            <summary>
            Initializes a new instance of the <c>CodeSnippetMembers</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.#ctor(QWhale.Syntax.CodeCompletion.ICodeSnippetMember)">
            <summary>
            Initializes a new instance of the <c>CodeSnippetMembers</c> class with specified parent.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.AddSnippetMember">
            <summary>
            Adds a new item to the <c>ICodeSnippetMembers</c> collection.
            </summary>
            <returns><c>ICodeSnippetMember</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.InsertSnippetMember(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ICodeSnippetMembers</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ICodeSnippetMember</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.OnClosePopup(System.Object,QWhale.Syntax.ClosingEventArgs)">
            <summary>
            Checks for nested members and raises <c>ClosePopup</c> event if they are not found.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A <c>ClosingEventArgs</c> that contains the event data.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.GetImageIndex(System.Int32)">
            <summary>
            Returns <c>ICodeSnippetMember.ImageIndex</c> from the snippet specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.FindByShortcut(System.String,System.Boolean)">
            <summary>
            Gets a code snippet by its shortcut.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.ShouldIndent(QWhale.Syntax.CodeCompletion.ICodeSnippet)">
            <summary>
            Gets a boolean value indicating whether the multi-line snippet code should be indented when inserting to the edit control.
            </summary>
            <param name="snippet">Specifies given snippet</param>
            <returns>True if code should be indented, otherwise False</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.ColumnVisible(System.Int32)">
            <summary>
            Indicates whether specified column is visible.
            </summary>
            <param name="column">Specifies index of the column.</param>
            <returns>True if visible; otherwise false.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.GetColumnText(System.Int32,System.Int32)">
            <summary>
            Returns text from specified column and snippet.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
            <param name="column">Specifies index of the snippet.</param>
            <returns>Text representing specified snippet.</returns>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.GetText(System.Int32)">
            <summary>
            Returns an empty string
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.GetName(System.Int32)">
            <summary>
            Returns <c>ICodeSnippetMember.Name</c> of the snippet member specified by index.
            </summary>
            <param name="index">Specifies index of the snippet.</param>
        </member>
        <member name="M:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.GetParent">
            <summary>
            Returns code completion provider owning this <c>ICodeCompletionProvider</c> instance.
            </summary>
            <returns>Parent of the <c>ICodeCompletionProvider</c>.</returns>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.Parent">
            <summary>
            Gets or sets a parent of the <c>CodeSnippetMembers</c>.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.Item(System.Int32)">
            <summary>
            Provides an indexed access to <c>ICodeSnippetMember</c> objects stored in the collection.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.ColumnCount">
            <summary>
            Returns number of the columns. In this class <c>ColumnCount</c> always return 1.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.Images">
            <summary>
            Gets or sets the ImageList for code completion items.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.EditPath">
            <summary>
            Gets or sets a value indicating path to the nested code completion provider.
            </summary>
        </member>
        <member name="P:QWhale.Syntax.CodeCompletion.CodeSnippetMembers.SerializationInfo">
            <summary>
            Gets or sets an xml representation of this <c>CodeSnippetMembers</c> object.
            </summary>
            <remarks>Normally, you do not need to use this property directly. It's used internally when serializing Editor's content to XML.</remarks>
        </member>
        <member name="T:QWhale.Syntax.TextUndoList">
            <summary>
            Represents collection containing list of <c>ITextUndo</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.TextUndoList.QWhale#Syntax#ITextUndoList#Sort(System.Collections.Generic.IComparer{QWhale.Syntax.ITextUndo})">
            <summary>
            Represents collection containing list of <c>ITextUndo</c> objects.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Serialization.XmlQuickInfoItemInfo">
            <summary>
            Contains information about <c>IQuickInfoItem</c> object's settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlQuickInfoItemInfo.FixupReferences(System.Object)">
            <summary>
            Updates properties of external object with stored ones.
            </summary>
            <param name="owner">Specifies external object.</param>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlQuickInfoItemInfo.Load">
            <summary>
            Reads property values from external object. Reserwed for internal use.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlQuickInfoItemInfo.#ctor">
            <summary>
            Initializes a new instance of the <c>XmlQuickInfoItemInfo</c> class with default settings.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Serialization.XmlQuickInfoItemInfo.#ctor(QWhale.Syntax.CodeCompletion.IQuickInfoItem)">
            <summary>
            Initializes a new instance of the <c>XmlQuickInfoItemInfo</c> class with specified owner.
            </summary>
            <param name="owner">Specifies <c>IQuickInfoItem</c> object to store settings.</param>
        </member>
        <member name="P:QWhale.Syntax.Serialization.XmlQuickInfoItemInfo.Text">
            <summary>
            Stores <c>IQuickInfoItem.Text</c> property.
            </summary>
        </member>
        <member name="T:QWhale.Syntax.Lexer.LexStates">
            <summary>
            Provides an indexed access to individual <c>ILexState</c> objects.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStates.#ctor(QWhale.Syntax.Lexer.ILexScheme)">
            <summary>
            Initializes a new instance of the <c>LexStates</c> with specified owner.
            </summary>
            <param name="owner">Specifies <c>ILexScheme</c> that owns this new instance.</param>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStates.AddLexState">
            <summary>
            Creates new <c>ILexState</c> and adds it to <c>LexScheme.LexStates</c> collection.
            </summary>
            <returns><c>ILexState</c> that is added.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStates.InsertLexState(System.Int32)">
            <summary>
            Inserts a new item to the specified position within the <c>ILexStates</c> collection.
            </summary>
            <param name="index">Specifies position to insert.</param>
            <returns><c>ILexState</c> that is inserted.</returns>
        </member>
        <member name="M:QWhale.Syntax.Lexer.LexStates.FindLexState(System.String)">
            <summary>
            Finds <c>ILexState</c> by its name.
            </summary>
            <param name="name">Name of the <c>ILexState</c>.</param>
            <returns><c>ILexState</c> that is found.</returns>
        </member>
        <member name="T:QWhale.Syntax.DescriptionLookupEventArgs">
            <summary>
            Provides data for the <c>ICodeCompletionRepository.DescriptionLookup</c> event,
            used to search for the description of specified member.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.DescriptionLookupEventArgs.Member">
            <summary>
            Represents an object to lookup.
            </summary>
        </member>
        <member name="F:QWhale.Syntax.DescriptionLookupEventArgs.Name">
            <summary>
            The String containing the name of the object. 
            </summary>
        </member>
        <member name="F:QWhale.Syntax.DescriptionLookupEventArgs.Description">
            <summary>
            Result string representing description of the member.
            </summary>
        </member>
        <member name="M:QWhale.Syntax.DescriptionLookupEventArgs.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <c>DescriptionLookupEventArgs</c> with specified parameters.
            </summary>
            <param name="member">Specifies Member property of this new instance.</param>
            <param name="name">Specifies Name property of this new instance.</param>
        </member>
        <member name="T:QWhale.Syntax.DescriptionLookupEvent">
            <summary>
            Represents a method that will handle the <c>CodeCompletionRepository.DescriptionLookup</c> event.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">The <c>DescriptionLookupEventArgs</c> that contains the event data.</param>
        </member>
    </members>
</doc>
